/* eslint-disable */
export const PostSeo = [
  {
    _id: '6226de45c25c6b3bca00032d',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646714523/myportfolioblogproject/gxje1buoduhfqmxza0rh.jpg',
    title: 'VSCode 설치 및 익스텐션 설정',
    text: '<h4><strong><em>1. Visual Studio Code</em></strong></h4><h4><br></h4><h4><strong>2. Material Theme</strong></h4><h4><br></h4><h4><strong>3. Material Icon Theme</strong></h4><p><br></p><h4><strong>4. Prettier - Code formatter</strong></h4><p>settings 창에서 Format On Save 활성화 prettier setting 창에서 Tab Width 2로 세팅 setting 창에서 prettier quote에서 single quote 사용 설정 setting 창에서 quote 검색해서 typescript, javascript single quote 사용 설정</p><p><br></p><h4><strong><em>5. Bracket Pair Colorizer</em></strong></h4><p>괄호에 색감을 주어서 코드의 가독성을 높이는 것</p><p><br></p><h4><strong><em>6. Indent - rainbow</em></strong></h4><p>들여쓰기 한 부분이 무지개 빛이 나게하여 코드의 가독성을 높여주는 익스텐션.</p><p><br></p><h4><strong><em>7. Auto Rename Tag</em></strong></h4><p>태그 변경시 뒷부분은 자동으로 변경되게끔 해주는 익스텐션</p><p><br></p><h4><strong><em>8. CSS Peek</em></strong></h4><p>HTML 내의 클래스 이름을 Ctrl 키를 누르면서 클릭을 하게 되면 css 자동으로 찾아주는 익스텐션</p><p><br></p><h4><strong><em>9. HTML CSS Support</em></strong></h4><p>똑같은 클래스 이름이나 함수명을 타입할 때 일일이 다 적어주는 귀찮음을 해소해주는 익스텐션</p><p><br></p><h4><strong><em>10. Live Server</em></strong></h4><p>코드를 수정하고 수동적으로 브라우저에서 새로고침을 눌러서 확인하는 귀찮음을 해소해주는 익스텐션</p><p><br></p><h4><strong><em>11. Markdown preview</em></strong></h4><p>VSCode에 이미 내장이 되어있는 익스텐션 Readme.md 파일 작성하면서 실시간으로 작성된거 확인 가능함</p><p><br></p><h4><strong><em>12. Comment Color Customizations</em></strong></h4><p><br></p><p>VSCode settings 에 접속하여 settings.json에서</p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-string">"editor.tokenColorCustomizations"</span>: { <span class="hljs-string">"comments"</span>: <span class="hljs-string">"#d4ffd0"</span> }\n</pre><p><br></p><p><br></p><p>다음과 같이 추가!</p>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2022-03-08T04:40:37.361Z',
    updatedAt: '2022-04-07T06:54:37.676Z',
    __v: 0,
  },
  {
    _id: '6227b1ef70e999964e51b7d2',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646766731/myportfolioblogproject/otqkiz0aaah7jj94n5ov.jpg',
    title: '깃 설치 및 깃 허브 설정',
    text: '<p>📌Git 다운로드 바로가기 : https://git-scm.com/download/</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774325/myportfolioblogproject/iforqv2vyf5fboaaxttq.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774362/myportfolioblogproject/qqtvr5schv5zhkvf54tl.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌 Additional iconsOn the Desktop : 바탕화면에 바로가기 생성</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Windows Explorer integration</p><p>✅Git Bash Here : 폴더 오른쪽 클릭 메뉴에 Git Bash Here(연결 기능) 추가</p><p>✅Git GUI Here : 폴더 오른쪽 클릭 메뉴에 Git GUI Here(연결 기능) 추가</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Git LFS (Large File Support)대용량 파일 지원</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Associate .git* configuration files with the defalut text editor기본 텍스트 에디터에 git 구성(.git 확장자) 연결</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Associate .sh files to be run with BashBash에 .sh 확장자 파일 연결</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 Check daily for git for Windows updates매일 새로운 업데이트 확인</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 (NEW!) Add a Git Bash Profile to Windows Terminal</p><p><br class="ProseMirror-trailingBreak"></p><p>윈도우 기본 터미널에 Git Bash 프로파일 추가</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774540/myportfolioblogproject/hvzre516edhpg58egu0r.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌 ✅Let Git decide : 새로운 Repository의 initial branch에 기본 분기 이름("master")을 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌 Override the default branch name for new repositories : 새로운 Repository의 initial branch에 사용자 지정 분기 이름을 사용합니다. 이미 팀에서 관용적으로 쓰는 명칭이 있을 때 사용하면 됩니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774603/myportfolioblogproject/rnbiehjgbwdf5j2fs24j.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use Git from Git Bash only : Git Bash에서만 Git 명령어를 수행할 수 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Git from the command line and also from 3rd-party software : Git을 환경변수(PATH)에 추가하여 윈도우 기본 명령 프롬프트(CMD) 등에서도 Git 명령어를 수행할 수 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use Git and optional Unix tools from the Command Prompt : Git과 Unix 도구 모두 환경변수(PATH)에 추가합니다. 이 경우 몇 가지 Windows 기본 도구가 새롭게 재정의 됩니다. 이러한 위험을 충분히 숙지하고 있는 경우에만 이 옵션을 사용하기를 권장합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774637/myportfolioblogproject/ys7filfnpzbkziwjjpmh.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Use bundled OpenSSH : Git에서 기본으로 제공되는 OpenSSH를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use external OpenSSH : 외부 OpenSSH를 사용합니다. 이 경우 Git에서 기본 제공하는 OpenSSH는 따로 설치되지 않으며 PATH에 명시된 OpenSSH를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774649/myportfolioblogproject/g1iozo93gt5snqhhesui.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Use the OpenSSL library : OpenSSL 라이브러리를 사용합니다. ca-bundle.crt 파일로 검증합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use the native Windows Secure Channel library : Windows 인증서 저장소를 사용하여 검증합니다. 이 옵션은 Active Directory 도메인 서비스를 통한 회사의 내부 Root CA 인증서를 사용할 수 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774677/myportfolioblogproject/fjubdqal3de5xmi9nhvd.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Checkout Windows-style, commit Unix-style line endings : 체크아웃은 윈도우 스타일, 커밋은 유닉스 스타일로 자동 변경되도록 설정합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Checkout as-is, commit Unix-style line endings : 체크아웃은 변경 없이, 커밋은 유닉스 스타일로 설정합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Checkout as-is, commit as-is : 체크아웃, 커밋 모두 스타일 변경 없이 진행합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774695/myportfolioblogproject/wetutqcnny3nskpdnpul.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Use MinTTY (the default terminal of MSYS2) : Git Bash 기본 터미널 에뮬레이터(MinTTY)를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Use Windows\' default console window : 윈도우 기본 콘솔(cmd)을 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774709/myportfolioblogproject/kqbyicqqcra1nxjp3rdy.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Default (fase-forward or merge) : \'git pull\'의 수행 동작을 기본으로 설정합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Rebase : \'git pull\'의 수행 동작으로 현재 분기를 불러온 분기에 재배치합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Only ever fase-forward : \'git pull\'의 수행 동작으로 불러온 분기로 빠르게 넘어갑니다. 명령어 수행에 실패할 가능성이 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774725/myportfolioblogproject/dxgjy0xil8lfawk92oi8.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Git Credential Manager Core : Git의 자격 증명 도우미를 사용합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌None : 자격 증명 도우미를 사용하지 않습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774744/myportfolioblogproject/tssgjz0isb5c73sryynf.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌✅Enable file system caching : 파일 시스템 캐싱을 활성화하여 상당한 성능 향상을 제공합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Enable symbolic links : 심볼릭 링크를 활성화합니다. (SeCreateSymbolicLink 권한이 필요합니다.) 기존 리포지토리에는 이 설정이 적용되지 않습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1646774763/myportfolioblogproject/nh1pt4zphbp0u8f07bca.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>📌Enable experimental support for pseudo consoles : winpty를 사용하지 않고 Git Bash에서 Node나 Python과 같은 콘솔을 실행할 수 있게 합니다. 그러나 몇 가지 버그가 있습니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Enable experimental built-in file system monitor : \'git status\', \'git commit\' 등과 같은 명령어 실행 속도를 높이기 위해 built-in file system monitor를 자동으로 실행합니다.</p><p><br class="ProseMirror-trailingBreak"></p><p>📌Git Bash를 실행해줍니다.</p><div data-language="text" class="toastui-editor-ww-code-block"><pre><code>git config --global user.name "사용자이름" git config --global user.email "이메일@abc.com"</code></pre></div><p>📌사용자 이름/이메일 등록을 진행합니다.</p><p>📌 등록된 사용자를 확인합니다.</p><div data-language="text" class="toastui-editor-ww-code-block"><pre><code>git config --list</code></pre></div>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2022-03-08T19:43:43.789Z',
    updatedAt: '2022-03-08T21:26:28.058Z',
    __v: 0,
  },
  {
    _id: '6227dd03d46c3b43fd80cabc',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646779647/myportfolioblogproject/fkioxf49osh0chqg8c4n.jpg',
    title: '리액트 설정 및 필요한 툴, 익스텐션',
    text: '<h3>1. cmder 설치</h3><p><br></p><p><strong>git 사용할 수 있게 full version으로 설치하기</strong></p><h3><strong><em>https://cmder.net/</em></strong></h3><p><br></p><p><br></p><h3>2. node, npm 설치</h3><p><br></p><p><strong>node -v, npm -v 으로 설치 확인하기</strong></p><h3><strong><em>https://nodejs.org/ko/</em></strong></h3><p><br></p><p><br></p><h3>3. yarn도 npm 통해서 설치하기</h3><p><br></p><h3><strong><em>npm install yarn --global</em></strong></h3><p><br></p><p><br></p><h3>4. 리액트 프로젝트 생성</h3><p><br></p><h3><strong><em>https://create-react-app.dev/docs/getting-started</em></strong></h3><p><br></p><p><br></p><h3>5. 리액트 developer tools 설치</h3><p><br></p><h3><strong>https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=ko</strong></h3><p><br></p><p><br></p><h3>7. Reactjs code snippets 익스텐션 설치</h3><p><br></p><h3>rsi, rcc 등등의 snippets들을 통해서 리액트 기본 코드 수동적으로 작성할 필요없이 자동으로 작성되는 코드 익스텐션!</h3><p><br></p><p><br></p><h3>8. Auto Import 익스텐션 설치</h3><p><br></p><h3>import 할때 리액트 컴포넌트를 import 할때 수동이 아닌 자동적으로 import 코드 작성해주는 익스텐션!</h3><p><br></p><p><br></p><h3>9. React Emmet 설정</h3><p><br></p><h3>순서 -&gt; 기본 설정 -&gt; 설정 -&gt; \'emmet\' 검색 -&gt; settings.json -&gt; 코드 설정</h3><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"> <span class="hljs-string">"emmet.includeLanguages"</span>: {<span class="hljs-string">"javascript"</span>:<span class="hljs-string">"javascriptreact"</span>}\n</pre><p><br></p><p><br></p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-03-08T22:47:31.078Z',
    updatedAt: '2022-04-07T06:56:30.127Z',
    __v: 0,
  },
  {
    _id: '6227e289d46c3b43fd80cac7',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646781055/myportfolioblogproject/b4nj0wkivfsg6c7ebyza.jpg',
    title: 'NodeJS 기본 개발 설정 및 익스텐션',
    text: '<h3><strong>1. postsman 설치</strong></h3><p><br></p><p>백엔드 APIs request, response 설계시 유용하게 사용가능한 프로그램!!</p><h3>https://www.postman.com/downloads/</h3><p><br></p><p><br></p><h3><strong>2. nodemon설치</strong></h3><p><br></p><p>백엔드 코드 변화에 따라 실시간으로 (자동으로) 업데이트 및 확인 가능</p><h3>npm install nodemon --save-dev</h3><p><br></p><p>환경변수 관련 에러가 난다면</p><h3>npm install nodemon --global</h3><p><br></p><p>develope dependency로 추가해줘서 설치!</p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-string">"scripts"</span> : { ... <span class="hljs-string">"start"</span> : <span class="hljs-string">"nodemon app"</span>, ... }\n</pre><p><br></p><p>script 위와 같이 작성!!</p><p><br></p><h3><strong>3. Heroku 배포 툴 설치</strong></h3><h3>https://devcenter.heroku.com/articles/heroku-cli</h3><p><br></p><p>컴퓨터 각 버전에 맞게 설치하기.</p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-03-08T23:11:05.509Z',
    updatedAt: '2022-04-07T06:57:17.032Z',
    __v: 0,
  },
  {
    _id: '6228648d16045a8efc6ea0ae',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1646810893/myportfolioblogproject/muj41nyttton1dgfiauk.jpg',
    title: '깃 원격 저장소와 로컬 저장소 충돌문제(feat. git pull & fetch)',
    text: '<p>만약 팀 내의 다른 팀원이 개발한 내역이 있어 깃의 원격 저장소 작업 코드가 나의 로컬 코드와 다를 때는 내 변경사항 코드를 그대로 깃에 push를 하게되면 위 사진과 같은 에러가 발생한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>이럴 때는 원격저장소의 변경사항과 나의 로컬저장소 간격을 메워주어야 한다.</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong><em>이때 원격저장소의 최신 변경사항으로 맟추어야 내 로컬 변경사항을 업로드할 수 있다. 이를 위한 명령어가 fetch와 pull이다.</em></strong></h3><p><br class="ProseMirror-trailingBreak"></p><blockquote><h5><strong>git fetch : 원격 저장소의 변경사항 (commit) 들을 로컬저장소로 가져온다. (commit 내역을 가져옴)</strong></h5><h5><strong>git pull : 원격 저장소의 변경사항을 가져와 로컬에 병합한다.</strong></h5></blockquote><p><br class="ProseMirror-trailingBreak"></p><p>git pull은 원격 저장소의 변경사항을 가져와 로컬에 병합한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>예를 들면, 나 같은 경우 최근 컴퓨터를 바꾸는 과정 중 개발세팅을 하면서 기존에 쓰던 컴퓨터 안에 저장되어있던 로컬저장소가 깃 원격저장소에 연결되어 있던 상태에서</p><p>새 컴퓨터 로컬 저장소를 git clone ~ 으로 그대로 가지고 온뒤, 코드를 작성하고 git add *, git commit -m "", git push origin ~ 했더니 위와 같은 Error 가 발생을 하였다.</p><p><br class="ProseMirror-trailingBreak"></p><p>뒤늦게 git init, git remote add origin ~ , git pull, git branch -M main, git commit -m "", git push -u origin main 했지만 계속 에러가 발생했다.</p><p>즉, 애초에 기존 원격 저장소와 새 로컬 저장소의 연결 상태를 업데이트 시키지 않은 상태에서 git add *, git commit -m "", git push origin ~ 한 것이 실수 였다.</p><p><br class="ProseMirror-trailingBreak"></p><blockquote><h4><strong>git pull origin main --allow-unrelated-histories</strong></h4></blockquote><p>( 원격 저장소와 로컬 저장소의 병합을 허용한다는 의미임 )</p><p><br class="ProseMirror-trailingBreak"></p><p>이렇게 git pull을 적용하고 다시 push를 했더니 정상적으로 작동이 되었다.</p><p><br class="ProseMirror-trailingBreak"></p><p>이미 생성되어있는 원격 저장소를 새로운 컴퓨터에서 로컬 저장소를 새로 만들어서 생성되어 있던 원격 저장소와 새로운 로컬 저장소 간의 연결 상태를 업데이트 시켜주지 않았기</p><p>때문에 발생했던 문제인 것 같다.</p><p><br class="ProseMirror-trailingBreak"></p><p>그래서 add, commit, push 하기 전에 꼭꼭 git pull을 해서 기존 원격 저장소와 새 로컬 저장소 간의 코드 내용 및 연결 상태 업데이트를 해주어야 에러가 발생하지 않는다.</p><h4><br class="ProseMirror-trailingBreak"></h4><h4><strong>에러가 나지 않기 위한 제대로 된 새 로컬 저장소 - 기존 원격 저장소 연결방법은</strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>1. git init</p><p>2. git remote add origin http ~</p><p>3. git pull</p><p>4. git add *</p><p>5. git commit -m "~"</p><p>6. git push origin main</p><p><br class="ProseMirror-trailingBreak"></p><p>이었던 것 같다.</p><p><br class="ProseMirror-trailingBreak"></p><p>나는 3번을 거치지 않고 바로 add, commit, push 를 하였기 때문에 생긴 에러였던 것 같다.</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong>cf) git clone 과 git pull 의 차이점</strong></h3><p><br class="ProseMirror-trailingBreak"></p><p>git clone과 git pull을 기능상 똑같아 보이지만 명백한 차이점이 존재한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>git clone을 통해서 깃의 원격 저장소 내용을 그대로 가져오면 내가 나의 로컬에서 기존에 작업하던 코드들은 다 사라지고 git clone을 통해서 원격 저장소에서 가져온 코드만</p><p>그대로 복사가 되어진다. (즉, 기존에 내가 로컬에서 작성했던 코드들은 다 날라감!!)</p><p><br class="ProseMirror-trailingBreak"></p><p>반면 git pull은 깃 원격 저장소 코드를 그대로 가지고 옴과 동시에 나의 로컬에서 작성한 코드를 비교해가면서 바뀌지 않은 것은 그대로 두지만</p><p>내가 로컬에서 작업하면서 바뀐 코드 부분만 변경 수정해서 그대로 가지고 온다.</p><p><br class="ProseMirror-trailingBreak"></p><p>앞서 git pull에서 원격 저장소와 로컬 저장소 코드를 병합한다는 의미는 이런 의미인 것이다.</p><p><em>ex) git pull ~ , git pull origin master -&gt; git pull [원격 저장소 이름] [원격 저장소에서 받아오고자 하는 브랜치의 이름]</em></p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em><span data-raw-html="span" style="color: #ff0000">!그래서, git pull 명령은 병합과정도 포함되어져 있기 때문에, pull하기 전에 반드시 commit을 해주어야 한다.!</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>pull 하기 전에 commit을 하지 않으면 덮어쓰기 에러가 발생할 수도 있음. 즉, 다시 쉽게 말하면, 협업을 하다 보면 내가 로컬에서 작업하고 있을 때, 같은 팀원이 원격 저장소에</p><p>먼저 변경 사항을 commit하고 push를 하게 되는 상황은 반드시 있다. 그러면 원격 저장소의 업데이트된 내용이 나의 로컬 저장소에는 최신화가 되어있지 않기 때문에</p><p>이럴때 <strong>pull</strong> 아니면 <strong>fetch</strong>를 사용하게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em><span data-raw-html="span" style="color: #002eff">!즉, 기존 작업에 대해서 commit을 미리 해두고 pull을 수행해야함!</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>(향후에 새롭게 알거나 수정되는 사항이 있다면 다시 업데이트 해두도록 하겠다!)</p><p><br class="ProseMirror-trailingBreak"></p><h3><strong>*깃 원격 저장소와 현재 로컬 저장소가 동기화되어 있지 않기 때문에 해결방법도 동기화 시켜주면 됨 (2022년 3월 22일)</strong></h3><p><br class="ProseMirror-trailingBreak"></p><h4><strong><em><span style="color: #002eff" data-raw-html="span">git pull --rebase &lt;원격저장소별칭&gt; master</span></em></strong></h4><p><br class="ProseMirror-trailingBreak"></p><p>채팅 앱 deploy 하는 과정 중에 또 에러가 생겨서 git pull ~ 해줬지만 실패!</p><p>그래서 rebase로 하고 난 뒤 정상적으로 push 실행! 해결!</p><p><br class="ProseMirror-trailingBreak"></p><h2><strong>* git remote ~ git 원격 저장소 설정 및 해제 방법</strong></h2><h6><br class="ProseMirror-trailingBreak"></h6><h3>1. 원격 저장소 로컬 저장소 연결 설정 -&gt; git remote add origin &lt;원격 저장소 url&gt;</h3><h3><br class="ProseMirror-trailingBreak"></h3><h3>2. 로컬에 등록된 원격 저장소 확인 -&gt; git remote -v</h3><h3><br class="ProseMirror-trailingBreak"></h3><h3>3. 로컬에 등록된 원격 저장소 제거 -&gt; git remote remove origin</h3><h3><br class="ProseMirror-trailingBreak"></h3><h3>4. 원격 저장소에서 설정하고 그 관련된 코드 불러올때 -&gt; git pull origin main</h3><h3>(git clone &lt;원격저장소 url&gt; 은 로컬에서 원격 저장소 설정없이 그대로 복사 가능!)</h3>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-09T08:25:49.390Z',
    updatedAt: '2022-03-21T15:30:35.629Z',
    __v: 0,
  },
  {
    _id: '62389ae3f0ff8c7697cceb79',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648011186/myportfolioblogproject/v1000filfpnkj3xge13n.jpg',
    title: 'Mixed content 문제 해결',
    text: '<h1>*timeago.js</h1><p><br class="ProseMirror-trailingBreak"></p><h5><em><span data-raw-html="span" style="box-sizing: border-box;">import&nbsp;{&nbsp;format,&nbsp;render,&nbsp;cancel,&nbsp;register&nbsp;}&nbsp;from&nbsp;\'timeago.js\';</span></em></h5><h5><em><span data-raw-html="span" style="box-sizing: border-box;">format(\'2016-06-12\',</span><span data-raw-html="span" style="box-sizing: border-box; color: rgb(0, 0, 0); font-family: monospace, monospace; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(247, 247, 247); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;">&nbsp;</span><span data-raw-html="span" style="box-sizing: border-box;">\'en_US\');</span></em></h5><p><br class="ProseMirror-trailingBreak"></p><h1><strong>https 사이트에서 http 사이트 요청 시 발생하는 보안 문제</strong></h1><p><br class="ProseMirror-trailingBreak"></p><p>Chattinb website 를 만들 때, Heroku http ver1.0 으로 배포하고 timeago.js 라이브러리를 사용하였을 때 발생했던 문제였음.</p><p>아래와 같이 meta 데이터 추가하여 해결!</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h2>*Mixed content 에러 발생</h2><h5><br class="ProseMirror-trailingBreak"></h5><h4><em>Mixed Content: The page at \'https://plprice.netlify.app/\' was loaded over HTTPS, but requested an insecure script \'http://api.vworld.kr/</em></h4><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><h2>*Mixed content 에러 발생</h2><p><br class="ProseMirror-trailingBreak"></p><h6><strong><em><span data-raw-html="span" style="color: rgb(85, 85, 85); font-family: Spoqa Han Sans, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">-html파일 head에 추가</span></em></strong></h6><h6><br class="ProseMirror-trailingBreak"></h6><h4><strong><em>&lt;meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"&gt;</em></strong></h4>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2022-03-21T15:33:55.724Z',
    updatedAt: '2022-03-23T04:56:09.121Z',
    __v: 0,
  },
  {
    _id: '623aa127e30b40a8d7ff1f19',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648009442/myportfolioblogproject/jfqwxlhmusy8iehw1k9y.jpg',
    title: '프로세스와 쓰레드 개념 정리',
    text: '<p><strong><em>1. 프로세서</em></strong></p><p>운영체제 위에서 연속적으로 실행되고 있는 프로그램을 말함. 각각의 프로그램은 메모리 위에서 서로 독립적으로 실행되고 있음.</p><p>프로세스마다 할당된 메모리, 데이터가 지정되어 있음.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>2. 코드</em></strong></p><p>프로그램을 실행하기 위한 코드</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>3. 스택</em></strong></p><p>함수들이 어떤순서로 실행되어야 하는지에 대한 정보가 저장된 곳.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>4. 힙</em></strong></p><p>오브젝트를 생성하거나 동적으로 할당된 변수를 선언할때 그 데이터가 저장되는 곳</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>5. 스태틱</em></strong></p><p>전역변수나 스태틱 변수가 할당되어 저장되는 곳</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>6. 스레드</em></strong></p><p>프로세스 안에 코드, 데이터, 힙과 같은 공통적인 데이터 리소스는 프로세스에 있다. 그래서 쓰레드는 프로세스에 할당된 공통적인 리소스에 동시 다발적으로 접근하여 정보 업데이트 삭제 가능.</p><p>그래서 서로 공유하면서 사용한다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648009497/myportfolioblogproject/zyii5dsli00k0oep927o.jpg" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-23T04:25:11.402Z',
    updatedAt: '2022-03-23T04:25:11.402Z',
    __v: 0,
  },
  {
    _id: '623aa660e30b40a8d7ff1f26',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648010683/myportfolioblogproject/kx0xvyvcsqyagdlnewxy.jpg',
    title: '자바스크립트 엔진 동작 환경 및 원리 정리',
    text: '<p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648213558/myportfolioblogproject/iusekev1neab4oqs1vr4.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>1. Stack</em></strong></p><p>LIFO : Last In First Out</p><p>함수의 실행 순서를 기억하고 마지막에 들어간 함수가 제일 먼저 실행된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>2. Queue</em></strong></p><p>FIFO : First In First Out</p><p>Stack에서 쌓이기 전 대기하고 있는 함수들의 장소.</p><p>task queue에 있는 함수들은 event loop가 한번에 하나 씩만 콜스택으로 가지고 오게 된다.</p><p>가지고 온 콜백함수가 끝나면, 다시 하나씩 들고와서 실행하게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648213578/myportfolioblogproject/isiijwzznaggb0isfv1f.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>3. Event Loop</em></strong></p><p>계속 Queue와 Call stack을 돌면서 실행되어질 함수를 지속적으로 관찰한다.</p><p>만약, Call stack에 쌓여진 모든 함수가 실행되어 지면, Queue에서 대기하고 있던 함수를 Call stack으로 불러오는 역할을 수행함.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>4. Web APIs</em></strong></p><p>DOM API, setTimeout, setInterval, fetch, event listener</p><p>만약, 버튼에 클릭 이벤트를 등록해놓으면, 클릭이라는 이벤트가 발생하게 되면,</p><p>event loop는 우리가 등록한 클릭 이벤트 리스너의 콜백 함수를 Queue에 넣게 된다.</p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-23T04:47:28.865Z',
    updatedAt: '2022-03-25T13:06:47.037Z',
    __v: 0,
  },
  {
    _id: '623dc058738dcca69b6d60b3',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648213991/myportfolioblogproject/mnprm0l1uqoovva4i6ek.gif',
    title: '자바스크립트 엔진 동작 환경 및 원리 정리2',
    text: '<p><strong><em>1. Task Queue</em></strong></p><p>Web APIs에서 우리가 등록한 콜백함수를 특정한 이벤트가 발생했을때 Task Queue에 넣는 것임.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>2. Miscro Task Queue</em></strong></p><p>promise가 resolve() 되고나서 then()에 등록된 콜백함수가 대기하는 곳. Mutation observer라는 web APIs에 등록된 콜백 또한 대기.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>3. Render sequence</em></strong></p><p>브라우저 상에서 우리가 요소들을 움직이거나 애니메이션이 발생할 때 주기적으로 브라우저에 업데이트 할 때 화면에 업데이트 해주는 곳임.</p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em>4. Event Loop의 순회 (밑의 GIF 이미지 참고)</em></strong></p><p>Event Loop가 계속 빠르게 돌다가 콜스택에서 수행하는 함수가 있다면 콜스택에서 끝날때까지 대기.</p><p>Render 쪽으로는 갈수도 있고 안 갈수도 있음. 1초 당 60fps (60개의 그림)을 보여주려고 노력함. (16.7ms마다 업데이트가 이뤄져야 함을 의미)</p><p>Event Loop는 한 바퀴 1ms 걸림. 그래서 한 바퀴 돌때마다 Render sequence 업데이트 할 필요는 없음. 어느 정도 시간이 있다가 업데이트가 이루어짐(보통 16.7ms).</p><p><br class="ProseMirror-trailingBreak"></p><p>Render sequence를 넘어가면 event loop는 micro task 큐안의 콜백함수들이 콜스택으로 모두 이동해서 없어질 때까지 그곳에서 대기한다.</p><p>(나중에 마이크로 태스큐 안에 들어오는 콜백까지 처리할 때까지 마이크로 태스크 큐에서 대기한다)</p><p><br class="ProseMirror-trailingBreak"></p><p>마이크로 태스크 큐가 텅텅비면 태스큐로 들어오고 한번에 하나의 콜백함수만 콜스택으로 호출하고,</p><p>콜스택으로 하나만 호출하고 콜스택에서 실행이 완료될 때까지 기다렸다가(콜스택에 하나만 호출!!) 실행이 완료되면,</p><p>다시 순회를 시작.</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214009/myportfolioblogproject/ulamhiw3en4ekdzqgktn.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214025/myportfolioblogproject/sfqaiuusdsmgjp2y9gsw.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214039/myportfolioblogproject/ki82vnkaft8rqx9mqcfs.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214051/myportfolioblogproject/cntvgsqsntbbjfv8rquj.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214063/myportfolioblogproject/ghr961ghp3hareemytdf.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648214073/myportfolioblogproject/ifcx8py23rlwxq8pqskw.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-03-25T13:15:04.941Z',
    updatedAt: '2022-03-25T13:15:04.941Z',
    __v: 0,
  },
  {
    _id: '623ebd5b25066ac1eb074c84',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648272334/myportfolioblogproject/ts2gcnhmrexysr8sy5v6.gif',
    title: '네트워크와 CORS (Feat. Socket.IO)',
    text: '<h2><strong style="color: rgb(171, 70, 66);"><em>1. 서버 출처(origin) 이란?</em></strong></h2><p><br></p><p>서버의 위치를 의미. 즉 아래와 같은 URL!</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658590488/myportfolioblogproject/ey58jhb4cf0tlyzw0h1z.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>이때 출처란 Protocol과 Host (위의 그림에는 나와 있는 않는 port 번호까지 포함해서) 출처라고 하는 것이다.</p><p>출처 내에서 포트 번호가 생략이 가능한 이유는 각 웹에서 사용하는 HTTP, HTTPS 프로토콜의 기본 포트 번호가 정해져 있기 때문임.</p><p><br></p><p>원칙적으로는 SOPS(Same-Origin-Policy-Sharing) 정책임.</p><p>즉, 프론트엔드 서버 URL이 http://localhost:3000이고, 백엔드 서버 URL이 http:/localhost:8080에 띄어져 있다고 하면,</p><p>이때, 프론트 서버와 백엔드 서버 출처(origin)가 SOP(Same-Origin-Policy) 정책에 어긋나기 때문에 CORS 에러가 발생함.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658590506/myportfolioblogproject/msfvzuos9reozxexjcfi.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>즉, CORS(교차 출처 리소스 공유) 라는 것은 브라우저에서 서버로 요청시, 추가 HTTP 헤더를 사용하여,</p><p>한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하는</p><p>브라우저 체제이다.</p><p><br></p><p><br></p><h2><strong style="color: rgb(171, 70, 66);"><em>2. 교차 출처(CORS) 허용 헤더 추가</em></strong></h2><p><br></p><p><strong>1. 클라이언트 사이드 브라우저에서 서버 리소스 요청 시</strong></p><p><br></p><p><strong>*요청 header에 origin 추가해서 서버에 요청!</strong></p><p><br></p><p>Ex)</p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'http:/localhost:8080/test\'</span>, {\n  <span class="hljs-attr">method</span>: <span class="hljs-string">"GET"</span>,\n  <span class="hljs-attr">mode</span>: <span class="hljs-string">"cors"</span>,\n  <span class="hljs-attr">credentials</span>: <span class="hljs-string">\'include\'</span>\n  <span class="hljs-comment">// 사용자 인증이 필요한 리소스 (쿠키, 세션.. 등등) 접근 허용</span>\n  <span class="hljs-comment">// 다른 도메인 간에 쿠키 공유 허용</span>\n  <span class="hljs-comment">// axios 에선 withCredentials: true</span>\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-string">"Content-Type"</span>: <span class="hljs-string">"application/json"</span>,\n    <span class="hljs-string">"Origin"</span>: <span class="hljs-string">"http://localhost:3000"</span>\n   <span class="hljs-comment">// 출처 허용 옵션</span>\n   },\n })\n    \n<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n</pre><p><br></p><p><br></p><p><strong>*package.json에서 proxy 값을 설정하는 경우도 있다!</strong></p><p><strong> 이는 우리가 서버 측 코드를 함부로 못 건드리는 경우에 이렇게 한다!</strong></p><p><br></p><pre class="ql-syntax" spellcheck="false">{\n  <span class="hljs-string">"proxy"</span>: <span class="hljs-string">"http://localhost:8080"</span>\n}\n</pre><p><br></p><p>위와 같이 클라이언트 프록시 서버로 서버 도메인 URL를 지정해주면,</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'/test\'</span>, {\n  <span class="hljs-attr">method</span>: <span class="hljs-string">"GET"</span>,\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-string">"Content-Type"</span>: <span class="hljs-string">"application/json"</span>,\n    },\n })\n    \n<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n</pre><p><br></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">이렇게 간단하게 \'http://localhost:8080/test\' 가 아닌 \'/test\' 이런 식으로 작성해도 네트워크 소통이 가능하다.</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">​</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">예를 들어서 react dev 서버가 localhost:3000, 백엔드 서버는 localhost:8080 이라고 가정하면,</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">클라이언트의 proxy(대리인) 서버를 사용하여, 클라이언트에서 서버와 직접적으로 네트워크 소통 하는 것이 아닌,</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">클라이언트 프록시 서버를 통해서 서버 대 서버 네트워크 소통을 하는 것이다.</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">​</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">결국 브라우저(클라이언트)와 서버 통신 사이의 SOP 정책을 검증하며 나올 수 있는 CORS 문제는 발생하지 않음.</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">왜냐하면, 아래와 같이 브라우저와 백엔드 사이의 통신이 아닌, </span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">클라이언트 프론트 서버 (Proxy 서버)와 백엔드 서버 간의 서버 대 서버 통신이기 때문에.... </span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">SOP정책 검증 대상이 아니며, CORS 문제도 발생하지 않음.</span></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664343201/myportfolioblogproject/aluaigzy42bgntetzhwv.gif" crossorigin="anonymous"></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em><u>[ Proxy 서버 구현 요약 ]</u></em></strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em><u>* 브라우저와 도메인( protocol 과 host )이 같은 서버를 만든 후,</u></em></strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em><u>* 브라우저에서 백엔드 서버 대신 프록시 서버로 요청을 보낸다.</u></em></strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em><u>* 그 후, 프록시 서버에서 요청을 받아 다시 백엔드 서버로 요청을 보낸다.</u></em></strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em><u>* 이는, 서버 - 서버 간의 요청이므로 CORS 문제가 발생하지 않게 된다.</u></em></strong></p><p><br></p><p><br></p><p><strong>2. 서버는 응답헤더에 Access-Control-Allow-Origin을 담아 클라이언트에 전달한다.</strong></p><p><br></p><p>Ex)</p><p>Access-Control-Allow-Origin 응답 헤더 설정</p><pre class="ql-syntax" spellcheck="false">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> {\n  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">"Access-Control-Allow-Origin"</span>, <span class="hljs-string">"*"</span>); \n  <span class="hljs-comment">// 모든 도메인 허용</span>\n  res.<span class="hljs-title function_">header</span>(<span class="hljs-string">"Access-Control-Allow-Origin"</span>, <span class="hljs-string">"http://localhost:3000"</span>); \n  <span class="hljs-comment">// 특정 도메인 허용</span>\n})\n</pre><p><br></p><p><span style="background-color: rgb(255, 255, 255);">이렇게 서버 응답시마다 계속 코드 추가하는 것은 활용성이 떨어짐.. 그래서...</span></p><p><br></p><p><br></p><p><strong>3. cors 모듈 사용해서 설정</strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>; \n<span class="hljs-keyword">import</span> cors <span class="hljs-keyword">from</span> <span class="hljs-string">\'cors\'</span>;\n</pre><p><br></p><p><strong>* 모든 도메인 허용</strong></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());\n</pre><p><br></p><p>아무 옵션 없이 그냥 설정하면 모든 cross-origin에 대해서 요청 수용함.</p><p>그래서 특정 도메인, 요청만 해주는 것이 중요하다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> cors <span class="hljs-keyword">from</span> <span class="hljs-string">\'cors\'</span>;\n</pre><p><br></p><p><br></p><p><strong>* 특정 도메인 허용</strong></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();\n\n<span class="hljs-keyword">const</span> options = {\n  <span class="hljs-attr">origin</span>: <span class="hljs-string">"http://localhost:3000"</span>,\n  <span class="hljs-comment">// 출처 허용 옵션 </span>\n  <span class="hljs-comment">// [\'http://localhost:3000\', \'http://localhost:3001\'] 이렇게 여러 도메인도 허용 가능.</span>\n  <span class="hljs-attr">credentials</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-comment">// 사용자 인증이 필요한 리소스 (쿠키, 세션.. 등등) 접근 허용 </span>\n  <span class="hljs-comment">// 만일 client 요청에 credentials: \'include\' 옵션이 추가 되었을 경우</span>\n  <span class="hljs-attr">optionsSuccessStatus</span>: <span class="hljs-number">200</span>, \n  <span class="hljs-comment">// 응답 상태 200으로 설정</span>\n}\n  \napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>(options));\n</pre><p><br></p><p><br></p><p><strong>*특정 요청 허용</strong></p><pre class="ql-syntax" spellcheck="false">app.<span class="hljs-title function_">use</span>(<span class="hljs-string">"http://localhost:3000/test"</span>, <span class="hljs-title function_">cors</span>(), <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> {\n  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'test code\'</span>);  \n})\n</pre><p><br></p><p><br></p><p><strong>3. 서버에서 리소스를 받은 클라이언트는 자신이 보냈던 요청 Origin과 서버가 보내준 Access-Control-Allow-Origin을 비교한다.</strong></p><p><br></p><p>이에 비교를 해서 동일하지않거나 유효하지 않다면 그 응답을 사용하지 않고 버리며 브라우저 상에서도 나타나지 않는다.</p><p><br></p><p><br></p><p><strong>4. 리소스 img, video 태그에 crossOrigin="anonymous" 속성을 주어서 브라우저 상에 나타나게 한다.</strong></p><p><br></p><p><br></p><h2><strong style="color: rgb(171, 70, 66);"><em>3. CORS 동작 방식</em></strong></h2><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313552/myportfolioblogproject/yni6qtnfazlepk8sjsuj.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>1. 자바스크립트의 fetch API 를 통해서 브라우저에게 리소스를 받아오려고 한다.</p><p><br></p><p>2. 브라우저는 서버로 예비요청을 먼저 보낸다.</p><p><br></p><p>3. 서버는 이 예비요청에 대한 응답으로 어떤 것을 허용하고 어떤 것을 금지하고 있는지에 대한 정보를 담아서 브라우저로 다시 보내준다.</p><p><br></p><p>4. 이후 브라우저는 보낸 요청과 서버가 응답해준 요청이 안전한지 확인해보고 본 요청을 보내게 된다.</p><p><br></p><p>5. 이후 서버가 본 요청에 대해서 응답을 하면 최종적으로 이 응답 데이터를 자바스크립트로 넘겨주게 된다.</p><p><br></p><p><br></p><h2><strong style="color: rgb(171, 70, 66);"><em>4. 인증된 요청(Credentialed Request)</em></strong></h2><p><br></p><p><br></p><p>기존 예비요청에서 보안을 더 강화하고 싶을 때 사용한다.</p><p>기본적으로 브라우저가 제공하는 비동기 리소스 요청 API fetch API는 별도의 옵션 없이 브라우저의 쿠키 정보나 인증과 관련된 헤더를 함부로 요청에 담지 않는다.</p><p><br></p><p>그래서, 요청에 인증과 관련된 정보를 담을 수 있게 해주는 옵션이 credentials 옵션이다.</p><p>이 옵션에는 총 3가지가 있다.</p><p><br></p><p><br></p><p><strong><em>* same-origin (기본값) - 같은 출처 간 요청에만 인증 정보를 담을 수 있다.</em></strong></p><p><strong><em>* include - 모든 요청에 인증 정보를 담을 수 있다.</em></strong></p><p><strong><em>* omit - 모든 요청에 인증 정보를 담지 않는다.</em></strong></p><p><br></p><p><br></p><p>Ex)</p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'http:/localhost:8080/testUpdate\'</span>, {\n  <span class="hljs-attr">method</span>: <span class="hljs-string">"PUT"</span>,\n  <span class="hljs-attr">mode</span>: <span class="hljs-string">"cors"</span>,\n  <span class="hljs-attr">credentials</span>: <span class="hljs-string">\'include\'</span>,\n  <span class="hljs-attr">headers</span>: {\n    <span class="hljs-string">"Content-Type"</span>: <span class="hljs-string">"application/json"</span>,\n    <span class="hljs-string">"Origin"</span>: <span class="hljs-string">"http://localhost:3000"</span>\n },\n})\n    \n<span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();\n</pre><p><br></p><p><br></p><p>include와 같은 옵션을 사용하여 리소스 요청에 인증 정보가 포함된다면,</p><p>서버는 브라우저가 다른 출처 리소스 요청할 때 Access-Control-Allow-Origin 만 확인하는 것이 아니라,</p><p>다른 조건을 추가로 검사하게 된다.</p><p><br></p><p><br></p><p>만약 요청에 인증정보가 담겨있는 상태에서 다른 출처 리소스를 요청하게 된다면,</p><p>브라우저는 CORS 정책 위반 여부를 검사하는 툴에 다음 두가지 조건을 추가하게 됨.</p><p><br></p><p><br></p><p>1. Access-Control-Allow-Origin 에는 모든 요청을 허용하는 * 를 사용할 수 없으며, 명시적인 URL을 써야만 한다.</p><p>2. 응답 헤더에는 반드시 Access-Controll-Allow-Credentials: true 가 존재해야함.</p><p><br></p><p><br></p><h2><strong style="color: rgb(171, 70, 66);"><em>5. Socket.IO 사용하기</em></strong></h2><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313587/myportfolioblogproject/zabwzlx3alizmy8rjvqr.gif" crossorigin="anonymous"></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648313603/myportfolioblogproject/tci9hburmkdg2t13sqie.gif" crossorigin="anonymous"></p><p><br></p><h2>*Server Side</h2><p><br></p><pre class="ql-syntax" spellcheck="false">...\n\n<span class="hljs-keyword">const</span> server = app.<span class="hljs-title function_">listen</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Hi Seong Eun Lee!\'</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Started!\'</span>);\n});\n\n\n<span class="hljs-keyword">const</span> corsOpt = {\n&nbsp; <span class="hljs-attr">origin</span>: [<span class="hljs-string">\'http://localhost:3000\'</span>, <span class="hljs-string">\'http://localhost:3001\'</span>],\n&nbsp; <span class="hljs-attr">optionsSuccessStatus</span>: <span class="hljs-number">200</span>,\n&nbsp; <span class="hljs-attr">credentials</span>: <span class="hljs-literal">true</span>,\n};\n\n\n<span class="hljs-keyword">const</span> io = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>(server, {\n&nbsp; <span class="hljs-attr">cors</span>: corsOpt,\n});\n\n\nio.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'connection\'</span>, <span class="hljs-function">(<span class="hljs-params">socket</span>) =&gt;</span> {\n&nbsp; <span class="hljs-comment">// socket은 각 클라이언트마다 배치된 것임.</span>\n&nbsp; <span class="hljs-comment">// when connect</span>\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`A user connected! SocketID = <span class="hljs-subst">${socket.id}</span>`</span>);\n&nbsp; <span class="hljs-comment">// socket.emit(\'getMessage\', `SocketID = ${socket.id}`);</span>\n\n\n&nbsp; <span class="hljs-comment">// join room</span>\n&nbsp; socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'joinRoom\'</span>, <span class="hljs-function">(<span class="hljs-params">room</span>) =&gt;</span> {\n&nbsp; &nbsp; socket.<span class="hljs-title function_">join</span>(room);\n&nbsp; &nbsp; io.<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'joinRoomNum\'</span>, <span class="hljs-string">`Joined Room Num <span class="hljs-subst">${room}</span>`</span>);\n&nbsp; });\n\n\n&nbsp; <span class="hljs-comment">// leave room</span>\n&nbsp; socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'leaveRoom\'</span>, <span class="hljs-function">(<span class="hljs-params">room</span>) =&gt;</span> {\n&nbsp; &nbsp; socket.<span class="hljs-title function_">leave</span>(room);\n&nbsp; &nbsp; io.<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'leaveRoomNum\'</span>, <span class="hljs-string">`Leaved Room Num <span class="hljs-subst">${room}</span>`</span>);\n&nbsp; });\n\n\n&nbsp; <span class="hljs-comment">// send and get message</span>\n&nbsp; socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'sendMessage\'</span>, <span class="hljs-function">(<span class="hljs-params">newMessage</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-comment">// 특정 클라이언트, 특정 room 에게만 메시지를 전송한다</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 아래는 특정 room 으로 전달</span>\n&nbsp; &nbsp; io.<span class="hljs-title function_">to</span>(newMessage.<span class="hljs-property">room</span>).<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'getMessage\'</span>, newMessage);\n\n    <span class="hljs-comment">// * 부가 설명 *</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 접속된 모든 클라이언트에게 메시지를 전송한다</span>\n&nbsp; &nbsp; <span class="hljs-comment">// io.emit(\'getMessage\', newMessage);</span>\n\n&nbsp; &nbsp; <span class="hljs-comment">// 메시지를 전송한 클라이언트에게만 메시지를 전송한다</span>\n&nbsp; &nbsp; <span class="hljs-comment">// socket.emit(\'getMessage\', newMessage);</span>\n\n&nbsp; &nbsp; <span class="hljs-comment">// 메시지를 전송한 클라이언트를 제외한 모든 클라이언트에게 메시지를 전송한다</span>\n&nbsp; &nbsp; <span class="hljs-comment">// socket.broadcast.emit(\'getMessage\', newMessage);</span>\n    <span class="hljs-comment">// * 부가 설명 *</span>\n&nbsp; });\n\n\n&nbsp; <span class="hljs-comment">// delete message</span>\n&nbsp; socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'afterDelMsg\'</span>, <span class="hljs-function">(<span class="hljs-params">afterDel</span>) =&gt;</span> {\n&nbsp; &nbsp; io.<span class="hljs-title function_">to</span>(afterDel.<span class="hljs-property">room</span>).<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'getAfterDelMsg\'</span>, afterDel.<span class="hljs-property">afterDelBol</span>);\n&nbsp; });\n\n\n&nbsp; <span class="hljs-comment">// edit message</span>\n&nbsp; socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'afterEditMsg\'</span>, <span class="hljs-function">(<span class="hljs-params">afterEdit</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(afterEdit);\n&nbsp; &nbsp; io.<span class="hljs-title function_">to</span>(afterEdit.<span class="hljs-property">room</span>).<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'getAfterEditMsg\'</span>, afterEdit.<span class="hljs-property">afterEditBol</span>);\n&nbsp; });\n});\n</pre><p><br></p><p><br></p><p><br></p><h2>*Client Side</h2><p><br></p><pre class="ql-syntax" spellcheck="false">...\n\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Socket</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'socket.io-client\'</span>;\n\n...\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; <span class="hljs-keyword">const</span> socketObj = <span class="hljs-title class_">Socket</span>(<span class="hljs-string">`백엔드 서버 URL`</span>).<span class="hljs-title function_">connect</span>();\n  <span class="hljs-comment">// 백엔드 서버 URL 연결하여 Socket 객체 생성</span>\n&nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">socketConnect</span>(socket));\n  <span class="hljs-comment">// Socket 객체 Redux 상태 툴에 저장.</span>\n  <span class="hljs-comment">// 페이지가 Refresh 될때마다 사라져서 state 전역 객체로 관리.</span>\n}, []);\n\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; socket?.<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'joinRoom\'</span>, selected);\n&nbsp; socket?.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'joinRoomNum\'</span>, <span class="hljs-function">(<span class="hljs-params">text</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);\n&nbsp; });\n}, [selected]);\n\n...\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleText</span> = (<span class="hljs-params">e: React.FormEvent&lt;HTMLFormElement&gt;</span>) =&gt; {\n&nbsp; &nbsp;e.<span class="hljs-title function_">preventDefault</span>();\n\n&nbsp; &nbsp;<span class="hljs-keyword">const</span> <span class="hljs-title function_">sendMessage</span> = <span class="hljs-keyword">async</span> () =&gt; {\n&nbsp; &nbsp; &nbsp;<span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axiosReq.<span class="hljs-title function_">post</span>(<span class="hljs-string">\'/sendMessage\'</span>, {\n&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">from</span>: user,\n&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">room</span>: selected,\n&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-attr">text</span>: text,\n&nbsp; &nbsp; &nbsp;});\n\n&nbsp; &nbsp; &nbsp;<span class="hljs-keyword">const</span> newMessage = res.<span class="hljs-property">data</span>.<span class="hljs-property">savedNewMessage</span>;\n&nbsp; &nbsp; &nbsp;socket?.<span class="hljs-title function_">emit</span>(<span class="hljs-string">\'sendMessage\'</span>, newMessage);\n&nbsp; &nbsp;};\n\n&nbsp; &nbsp;<span class="hljs-title function_">sendMessage</span>();\n};\n\n...\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; socket?.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'getMessage\'</span>, <span class="hljs-function">(<span class="hljs-params">getNewMessage</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-title function_">setMessages</span>([...messages, getNewMessage]);\n&nbsp; });\n}, [messages]);\n\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">getMessages</span> = <span class="hljs-keyword">async</span> () =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axiosReq.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/getMessage/<span class="hljs-subst">${selected}</span>`</span>);\n&nbsp; &nbsp; <span class="hljs-title function_">setMessages</span>(res.<span class="hljs-property">data</span>);\n&nbsp; };\n&nbsp; <span class="hljs-title function_">getMessages</span>();\n}, [afterEdit, selected]);\n\n...\n</pre><p><br></p><p><br></p><p>클라이언트 전체 코드를 전부 소개하기엔 무리가 있어서 간략하게 적어놓았음.</p><p>필요하다면 아래 소스코드 URL 참고하면 이해가 쉬울것!!</p><p><br></p><p><br></p><p><a href="https://github.com/BVBFD/SocketIO-Master-Chat-Project" rel="noopener noreferrer" target="_blank" class="ql-size-large"><strong><em>https://github.com/BVBFD/SocketIO-Master-Chat-Project</em></strong></a></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-03-26T07:14:35.519Z',
    updatedAt: '2022-09-28T23:43:00.605Z',
    __v: 0,
  },
  {
    _id: '623f49d7952fca4cbf91c4da',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314125/myportfolioblogproject/wnshoduuivfhmtlpexwg.gif',
    title: 'MySQL 설치 및 설정',
    text: '<p><strong><em><span style="color: #ab4642">1. MySQL 다운로드 센터에 가서 Installer 설치</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314150/myportfolioblogproject/puin70jdc90vgb3ijzfh.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">2. 해당 링크로 가서 아래 파일을 다운로드!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314163/myportfolioblogproject/cpwru0ttdtpepzhd0of6.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">3. 로그인 하지 말고 그냥 다운로드 페이지로 넘어감!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314173/myportfolioblogproject/hoxeeqrelhffh6yjzrmh.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">4. 잘은 몰라서 일단 개발자 툴로 전체 프로그램 설치</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314186/myportfolioblogproject/pvv3fyq6zizabupvbdag.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">5. Excute 버튼을 눌러 설치 진행</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314200/myportfolioblogproject/xnrb63fh2uuqsamqjtam.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">6. Excute 버튼을 누르기 전에 위에 나오는 필요한 요소 설치하기</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314212/myportfolioblogproject/bfnusgdlwrkkvb3oudk3.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">7. Excute 버튼을 누르고 설치 진행!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314224/myportfolioblogproject/vpjpohsa6jvfkfxk68hw.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">8. 특별히 설정은 안하고 기본 설정으로 진행!</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314238/myportfolioblogproject/quitwurr0ncimqhopcqs.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314250/myportfolioblogproject/jjnaqtv82mybennsrfn7.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">9. 기본 default id 는 root 유저 비밀번호 반드시 기억해두기!!!!  </span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314266/myportfolioblogproject/gzm2uxooevmwdyk2nip0.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314275/myportfolioblogproject/rccypznbr6eszabibkz5.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">10. 아까 설정한  아이디와 비밀번호로 db 연결 test!!  </span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314285/myportfolioblogproject/utetfcyxpe52mus7lsta.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314294/myportfolioblogproject/bjnfdjtmrzveibkfacue.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">11. 설치 완료!!  </span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648314303/myportfolioblogproject/hhsrpiisobp9r9vugvdx.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-03-26T17:13:59.179Z',
    updatedAt: '2022-03-26T17:13:59.179Z',
    __v: 0,
  },
  {
    _id: '6240347098a87052ccda562f',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648367741/myportfolioblogproject/u2ie0l3avbjfkhjhqgek.gif',
    title: 'Database (MySQL, MongoDB)',
    text: '<p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648376921/myportfolioblogproject/xvxnxvnlzeeejnwugdac.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648376931/myportfolioblogproject/vogwvi9m4inqfyt7dq7h.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648376939/myportfolioblogproject/zpgtdcc375bsdqsdiinz.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><a href="https://github.com/BVBFD/Blog-project/tree/main/server">Mongoose 참고 코드 (블로그 프로젝트)</a></p><p><br class="ProseMirror-trailingBreak"></p><p><a href="https://github.com/BVBFD/Mr.Lee-Chatting-Box">MonogoDB, Mongoose, MySQL, Sequelize 참고 코드 (채팅 사이트 프로젝트)</a></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-03-27T09:54:56.597Z',
    updatedAt: '2022-03-27T10:32:01.232Z',
    __v: 0,
  },
  {
    _id: '62451d8aec99bcd2151e4ab6',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648692562/myportfolioblogproject/dgtziindvhi6coe3p6k8.gif',
    title: 'XSS, CSRF 공격 및 대응 방안(백엔드 기본 보안)',
    text: '<p><strong><em><span style="color: #ab4642">1. XSS : Cross-Site Scripting</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694877/myportfolioblogproject/jnxm1th7vgbzp8rkwdun.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>공격대상: Client</p><p><br class="ProseMirror-trailingBreak"></p><p><span>공격자는 대상 사용자의 브라우저 내에서 임의의 JavaScript를 주입해서 실행</span></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">2. CSRF : Cross-Site Request Forgery</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694892/myportfolioblogproject/wec1pe12892kqmhazad7.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><span style="color: rgb(51, 51, 51);">공격대상: Client(Client의 권한으로 Server에 요청)</span></p><p><br class="ProseMirror-trailingBreak"></p><p><span>공격자는 피해자가 의도하지 않은 작업을 수행하도록 유도</span></p><p><br class="ProseMirror-trailingBreak"></p><p>예를 들면, 일단 해커가 조작된 HTTP 요청 정보를 담고 있는 게시물을 DB에 등록하게 되고,</p><p>허가된 사용자가 웹사이트에 로그인한 상태에서 조작된 HTTP 요청 코드가 삽입된</p><p>이 게시물을 열면, 이 조작된 HTTP 요청은 허가된 client로부터 보내졌다고 server가 판단,</p><p>허가된 사용자의 의도와는 다르게 CRUD 기능이 이루어지게 됨.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong><em><span style="color: #ab4642">3. XSS, CSRF 공격 대응 방안</span></em></strong></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*App.js</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694960/myportfolioblogproject/lipikvgj6xnplvvgb8g8.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>cookie-parser 라이브러리를 사용하여 최상위 서버 컴포넌트에 설치 및 실행. </p><p>XSS 대응, CSRF 대응 토큰을 생성하는 Request URL 생성</p><p><br class="ProseMirror-trailingBreak"></p><p>XSS 대응 토큰은 bcrypt 라이브러리를 통해서 강력한 비밀번호를 매번 hash해서 생성.</p><p>하지만, XSS 공격 특성상 자바스크립트로 cookie 토큰 탈취되는 것을 방지하기 위해,</p><p><strong><em><span style="color: #ab4642">httpOnly: true 옵션을 반드시 줘서, token 을 생성.</span></em></strong> ( <strong><em><span style="color: #ab4642">res.cookie() </span></em></strong><span style="color: #181818">) </span></p><p>client 상에서 자바스크립트로 cookie에 저장된 XSS 대응 토큰 탈취를 막는다.</p><p><br class="ProseMirror-trailingBreak"></p><p>CSRF 대응 토큰은 bcrypt 라이브러리를 통해서 강력한 비밀번호를 매번 hash해서 생성.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*XSS 공경 대응 코드 (XSS 토큰)</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694971/myportfolioblogproject/sazwxe77ab8goba5e3jg.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>단, XSS 공격 특성상 Client에 악성 자바스크립트 코드를 주입해서, </p><p>조작된 http 요청을 보내게 되고 피해를 입게 됨으로,</p><p>client 로 부터 오는 모든 조작 http 요청에 <strong><em><span style="color: #ab4642">credential:  \'include\'  옵션을 주고,</span></em></strong></p><p><strong><em><span style="color: #ab4642">서버는 credential:  true (cors 모듈 사용시) or Access-Control-Allow-Credentials: true,</span></em></strong></p><p>설정을 해서, cors origin 검사 뿐만 아니라, cookie 역시 http 요청에 자동으로 담아서 보낸다.</p><p><br class="ProseMirror-trailingBreak"></p><p>그리고 위와 같이 http 조작 요청에 담겨진 cookie xss 대응용 토큰을 받아서,</p><p>bcrypt 라이브러리를 통해서 유효성 검사를 하고,</p><p>통과를 하면 next() 다음 미들웨어로 넘기고,</p><p>아니면 에러처리!!</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>*CSRF 공경 대응 코드 (CSRF 토큰)</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694978/myportfolioblogproject/rbvbuis9gvddxmpdmrru.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>CSRF 대응용 토큰 또한 XSS 대응용 토큰처럼 전반적으로 대응방식은 똑같지만,</p><p>Client 를 사용자가 처음 실행했을때, 그 때 애초에 csrf 대응용 토큰을 만들어서 client로 보내고,</p><p>client는 이 csrf 토큰을 cookie나 로컬스토리지, 세션이 아니라,<span style="color: #ab4642"> </span><strong><em><span style="color: #ab4642">각자 컴퓨터의 메모리 상에 보관해야한다.</span></em></strong></p><p>(React로 예를 들면 useState의 변수에 저장!!!)</p><p><br class="ProseMirror-trailingBreak"></p><p>이를 통해서 사용자의 http 조작 요청 사항에 대해서만 headers에 위와 같이 csrf2Token이라는 이름으로,</p><p>headers에 csrf 대응용 토큰을 담아서 보내게 되고, 이를 xss 대응용 토큰처럼 유효성 검사를 실시한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>해커의 조작된 http 요청 사항에는 header 안에 csrf 대응용 토큰이 없어서 유효성 검사에서 에러처리 나겠지만,</p><p>사용자의 http 요청 사항은 통과할 수 있게된다.</p><p><br class="ProseMirror-trailingBreak"></p><p>쿠키나 세션, 로컬스토리지에 저장되어 있는게 아니라 사용자의 메모리에 저장되어 있기 때문에,</p><p>해커가 이를 알 수 있는 방법 또한 없게 된다.</p><p><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1648694987/myportfolioblogproject/c5wda8tiaqxr3um5zdx4.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>미들웨어를 위와 같이 구성하여, 유효성 검사를 실시하고,</p><p>CRUD 기능을 서버상에서 실행한다.</p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-03-31T03:18:34.778Z',
    updatedAt: '2022-03-31T03:18:34.778Z',
    __v: 0,
  },
  {
    _id: '6246e57228855e739d93ad13',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1648813411/myportfolioblogproject/v37oiyihhgirqs6brdaf.gif',
    title: 'React Hooks 완벽 정복!!',
    text: '<h3><span style="color: rgb(171, 70, 66);">1. 리액트 프로젝트 생성하기</span></h3><p><br></p><pre class="ql-syntax" spellcheck="false">$ yarn create react-app <span class="hljs-tag">&lt;<span class="hljs-name">project-name</span>&gt;</span>\n</pre><p><br></p><p><br></p><h3><span style="color: rgb(171, 70, 66);">2. useState()</span></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Counter</span> = () =&gt; {\n    <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);\n    <span class="hljs-keyword">return</span> (\n       <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>      \n          <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n           현재 카운터 값은 <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>{value}<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> 입니다.\n          <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setValue(value + 1)}&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setValue(value - 1)}&gt;-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Counter</span>;\n</pre><p><br></p><p><br></p><h3><span style="color: rgb(171, 70, 66);">3. useEffect()</span></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Name</span> = () =&gt; {\n    <span class="hljs-keyword">const</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">"Mr.Lee Seong Eun"</span>);\n    \n    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"이름 렌더링 완료!!"</span>);\n        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setName</span>(<span class="hljs-string">""</span>);\n    }, [name]);\n\n    <span class="hljs-keyword">return</span> (\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Name: {name}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    );\n}\n</pre><p><br></p><p>deps 배열 안에 아무것도 없다면 컴포넌트가 렌더링될 때마다 실행이 되어지고,</p><p>만약에 변수가 있다면, 컴포넌트가 렌더링 되고 난 직후 뿐만 아니라,</p><p>deps 배열 안의 변수가 업데이트 될 때마다 다시 렌더링 됨.</p><p><br></p><p>useEffect 안의 return () =&gt; {} 콜백 함수의 경우는 clean up 함수임.</p><p>deps가 비어 있는 경우 컴포넌트가 사라질때 clean up 콜백함수가 호출.</p><p>deps에 변수가 있다면 그 변수가 업데이트 되기 직전,</p><p>clean up 함수를 호출!!</p><p><br></p><p><br></p><h3><span style="color: rgb(171, 70, 66);">3. useContext, useReducer</span></h3><p><br></p><h3>*Context.js</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { createContext, useEffect, useReducer } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {  \n    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {    \n        <span class="hljs-keyword">case</span> <span class="hljs-string">"LOGIN_SUCCESS"</span>:      \n            <span class="hljs-keyword">return</span> {        \n                <span class="hljs-attr">id</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">userId</span>,        \n                <span class="hljs-comment">// token: action.payload.token,        </span>\n                <span class="hljs-attr">editable</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">editable</span>,        \n                <span class="hljs-attr">profilePic</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">profilePic</span>,        \n                <span class="hljs-attr">email</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">email</span>,      \n            };\n\n        <span class="hljs-keyword">case</span> <span class="hljs-string">"LOGOUT"</span>:      \n            <span class="hljs-keyword">return</span> {        \n                <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span>,        \n                <span class="hljs-comment">// token: null,        </span>\n                <span class="hljs-attr">editable</span>: <span class="hljs-literal">null</span>,        \n                <span class="hljs-attr">profilePic</span>: <span class="hljs-literal">null</span>,        \n                <span class="hljs-attr">email</span>: <span class="hljs-literal">null</span>,      \n            };\n\n        <span class="hljs-attr">default</span>:      \n            <span class="hljs-keyword">return</span> state;  \n      }\n};\n\n<span class="hljs-keyword">const</span> initialLoginData = {  \n    <span class="hljs-attr">id</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">"id"</span>)) || <span class="hljs-literal">null</span>,  \n    <span class="hljs-comment">// token: JSON.parse(localStorage.getItem("token")) || null,  </span>\n    <span class="hljs-attr">editable</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">"editable"</span>) || <span class="hljs-literal">null</span>,  \n    <span class="hljs-attr">profilePic</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">"profilePic"</span>) || <span class="hljs-literal">null</span>,  \n    <span class="hljs-attr">email</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">"email"</span>) || <span class="hljs-literal">null</span>,\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = <span class="hljs-title function_">createContext</span>(initialLoginData);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ContextProvider</span> = (<span class="hljs-params">{ children }</span>) =&gt; {  \n    <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(<span class="hljs-title class_">Reducer</span>, initialLoginData);\n    \n    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {    \n        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">"id"</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state.<span class="hljs-property">id</span>));    \n        <span class="hljs-comment">// localStorage.setItem("token", JSON.stringify(state.token));    </span>\n        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">"editable"</span>, state.<span class="hljs-property">editable</span>);    \n        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">"profilePic"</span>, state.<span class="hljs-property">profilePic</span>);    \n        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">"email"</span>, state.<span class="hljs-property">email</span>);        \n    }, [state.<span class="hljs-property">id</span>]);\n\n  <span class="hljs-keyword">return</span> (    \n    <span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span>      \n        <span class="hljs-attr">value</span>=<span class="hljs-string">{{</span>        \n            <span class="hljs-attr">id:</span> <span class="hljs-attr">state.id</span>,        \n            // <span class="hljs-attr">token:</span> <span class="hljs-attr">state.token</span>,        \n            <span class="hljs-attr">editable:</span> <span class="hljs-attr">state.editable</span>,        \n            <span class="hljs-attr">profilePic:</span> <span class="hljs-attr">state.profilePic</span>,        \n            <span class="hljs-attr">dispatch</span>,      \n            }}    \n    &gt;</span>      \n      {children}    \n    <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span>  \n  );\n};\n</pre><p><br></p><p><br></p><h3>*index.js</h3><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">"./index.css"</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"./App"</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">BrowserRouter</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-router-dom"</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ContextProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"./context/context"</span>;\n\n<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(  \n    <span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span>    \n        <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span>      \n            <span class="hljs-tag">&lt;<span class="hljs-name">ContextProvider</span>&gt;</span>        \n                <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>      \n            <span class="hljs-tag">&lt;/<span class="hljs-name">ContextProvider</span>&gt;</span>    \n        <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span>  \n    <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span>,  \n    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">"root"</span>)\n);\n</pre><p><br></p><p><br></p><h3>*Login.jsx</h3><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false">.......\n\n<span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axiosInstance.<span class="hljs-title function_">post</span>(<span class="hljs-string">`/loginDatas/login`</span>, {        \n    <span class="hljs-attr">userId</span>: idRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,        \n    <span class="hljs-attr">password</span>: pwdRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,      \n});      \n\n<span class="hljs-title function_">dispatch</span>({        \n    <span class="hljs-attr">type</span>: <span class="hljs-string">"LOGIN_SUCCESS"</span>,        \n    <span class="hljs-attr">payload</span>: {          \n        <span class="hljs-attr">userId</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">sendLoginData</span>.<span class="hljs-property">userId</span>,          \n        <span class="hljs-comment">// token: res.data.token,          </span>\n        <span class="hljs-attr">profilePic</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">sendLoginData</span>.<span class="hljs-property">profilePic</span>,          \n        <span class="hljs-attr">editable</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">sendLoginData</span>.<span class="hljs-property">editable</span>,          \n        <span class="hljs-attr">email</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">sendLoginData</span>.<span class="hljs-property">email</span>,        \n      },      \n    });    \n  } <span class="hljs-keyword">catch</span> (err) {      \n     <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(err);    \n  }    \n  <span class="hljs-title function_">setLoginSuccess</span>(<span class="hljs-literal">true</span>);  \n};\n\nloginSuccess &amp;&amp; <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">"/"</span>);\n\n.......\n</pre><p><br></p><p>전역적으로 사용하는 props들은 여러 컴포넌트로 2중 3중으로 넘겨주는 것 없이,</p><p>useContext API hook 으로 위와 같이 관리해주는 것이 바람직하다.</p><p><br></p><p>useReducer 는 useState 보다 컴포넌트에서 더 다양한 상황에 따라 다양한 상태를 다른 값으로 업데이트해주고 싶을 때 사용하는 Hook 입니다.</p><p>Reducer는 현재 상태와, 업데이트를 위해 필요한 정보를 담은 액션(action) 값을 전달 받아 새로운 상태를 반환하는 함수입니다.</p><p>위의 예제에서는 액션 값(type, payload)을 받아 올 수 있는 dispatch 변수를 각 컴포넌트로 prop으로 전달하여,</p><p>각 컴포넌트에서 액션 값을 받으면 그에 맞는 type에 따라,</p><p>리턴된 payload 값으로 state 상태가 업데이트 된다.</p><p><br></p><p><br></p><h3><span style="color: rgb(171, 70, 66);">4. useImperativeHandle, useCallback, useMemo</span></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, {&nbsp; \n    createContext,&nbsp; \n    useCallback,&nbsp; \n    useContext,&nbsp; \n    useEffect,&nbsp; \n    useImperativeHandle,&nbsp; \n    useMemo,&nbsp; \n    useRef,&nbsp; \n    useState,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Header</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'../components/Header\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'../pages/Login\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">AuthContext</span> = <span class="hljs-title function_">createContext</span>({});\n\n<span class="hljs-keyword">const</span> tokenRef = <span class="hljs-title function_">useRef</span>();\n<span class="hljs-keyword">const</span> csrfRef = <span class="hljs-title function_">useRef</span>();\n<span class="hljs-comment">// 상위 컴포넌트</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">AuthProvider</span> = (<span class="hljs-params">props</span>) =&gt; {&nbsp; \n    <span class="hljs-keyword">const</span> [user, setUser] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">undefined</span>);&nbsp; \n    <span class="hljs-keyword">const</span> [csrfToken, setCsrfToken] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">undefined</span>);\n\n    <span class="hljs-title function_">useImperativeHandle</span>(tokenRef, <span class="hljs-function">() =&gt;</span> (user ? user.<span class="hljs-property">token</span> : <span class="hljs-literal">undefined</span>));\n    <span class="hljs-title function_">useImperativeHandle</span>(csrfRef, <span class="hljs-function">() =&gt;</span> csrfToken);\n    <span class="hljs-comment">// 즉, 상위 컴포넌트에서 useRef 훅으로 생성한 객체의 current 프로퍼티는</span>\n    <span class="hljs-comment">// 하위 컴포넌트에서 호출한 useImperative 훅의 두 번째 인수로 전달된</span>\n    <span class="hljs-comment">// 콜백 함수의 반환값으로 작성한 객체와 연결됩니다.</span>\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {&nbsp; &nbsp; \n    authService.<span class="hljs-title function_">csrfToken</span>().<span class="hljs-title function_">then</span>(setCsrfToken).<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>);&nbsp; \n}, [authService]);\n\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {&nbsp; &nbsp; \n    authService.<span class="hljs-title function_">me</span>().<span class="hljs-title function_">then</span>(setUser).<span class="hljs-title function_">catch</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>);&nbsp; \n}, [authService]);\n\n<span class="hljs-keyword">const</span> signUp = <span class="hljs-title function_">useCallback</span>(&nbsp; &nbsp; \n    <span class="hljs-keyword">async</span> (username, password, name, email, url) =&gt;&nbsp; &nbsp; &nbsp; \n        authService&nbsp; &nbsp; &nbsp; &nbsp; \n            .<span class="hljs-title function_">signUp</span>(username, password, name, email, url)&nbsp; &nbsp; &nbsp; &nbsp; \n            .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> <span class="hljs-title function_">setUser</span>(user)),&nbsp; &nbsp; \n    [authService]&nbsp; \n);\n\n<span class="hljs-keyword">const</span> logIn = <span class="hljs-title function_">useCallback</span>(\n   <span class="hljs-keyword">async</span> (username, password) =&gt;\n      authService.<span class="hljs-title function_">login</span>(username, password).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> <span class="hljs-title function_">setUser</span>(user)),\n   [authService]\n);\n<span class="hljs-comment">// 특정함수를 메모리에 메모이제이션 해두고 재사용하고 싶을때</span>\n<span class="hljs-comment">// useCallback을 사용</span>\n\n<span class="hljs-keyword">const</span> logout = <span class="hljs-title function_">useCallback</span>(\n  <span class="hljs-keyword">async</span> () =&gt; authService.<span class="hljs-title function_">logout</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setUser</span>(<span class="hljs-literal">undefined</span>)),\n  [authService]\n);\n\n<span class="hljs-keyword">const</span> context = <span class="hljs-title function_">useMemo</span>(\n  <span class="hljs-function">() =&gt;</span> ({ user, signUp, logIn, logout }),\n  [user, signUp, logIn, logout]\n);\n\n<span class="hljs-comment">// 특정 값을 메모리에 메모이제이션 해두고 재사용하고 싶을 때</span>\n<span class="hljs-comment">// useMemo 사용</span>\n<span class="hljs-comment">// [] 안의 값이 바뀔 때만 첫번쨰 인자 콜백함수의</span>\n<span class="hljs-comment">// return 인자(콜백 함수 일지도 or 단수 변수 일지도)를</span>\n<span class="hljs-comment">// 호출 지금처럼 재계산하는</span>\n<span class="hljs-comment">// 함수가 아주 간단하다면 성능상의 차이는</span>\n<span class="hljs-comment">// 아주 미미하겠지만 만약 재계산하는 로직이 복잡하다면</span>\n<span class="hljs-comment">// 불필요하게 비싼 계산을 하는 것을 막을 수 있다.</span>\n\n<span class="hljs-keyword">return</span> (\n  <span class="hljs-tag">&lt;<span class="hljs-name">AuthContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">{context}</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'app\'</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">AuthContext.Provider</span>&gt;</span>\n );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AuthContext</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchToken</span> = () =&gt; tokenRef.<span class="hljs-property">current</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">fetchCsrfToken</span> = () =&gt; csrfRef.<span class="hljs-property">current</span>;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">useAuth</span> = () =&gt; <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">AuthContext</span>);\n\n</pre><p><br></p><p><br></p><h3><span style="color: rgb(171, 70, 66);">5. Memo() 로 렌더링 성능 최적화</span></h3><p><br></p><p>React가 렌더링을 하는 조건은 3가지이다.</p><p><br></p><p>* 자신의 state가 변경될 때</p><p>* 부모 컴포넌트로부터 전달받은 props가 변경될 때</p><p>* 부모 컴포넌트가 리렌더링 될 때</p><p><br></p><p>리액트 memo() 는 기본적으로 props만 비교를 하는 <strong style="color: rgb(171, 70, 66);">얕은 비교</strong>를 한다.</p><p>props의 변수가 변화하지 않았다면 리렌더링 방지!!</p><p><br></p><p>하지만 props 변수 내부 값을 확인하는 깊은 비교가 아니고,</p><p>단지 props 변수 명시적 객체만 (내부 값이 아닌) 확인..</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyComponent</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">MyComponent</span>(<span class="hljs-params">props</span>) {\n  <span class="hljs-comment">/* props를 사용하여 렌더링 */</span>\n});\n</pre><p><br></p><p>이를 방지하기위해선<span style="color: rgb(171, 70, 66);"> </span><strong style="color: rgb(171, 70, 66);">깊은비교</strong>를 하자고 하면,</p><p>memo() 두 번째 인자에 props 내부값 변화 확인하는 콜백함수를 넣어준다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">areEqual</span>(<span class="hljs-params">prevProps, nextProps</span>) {\n  <span class="hljs-comment">/*\n  nextProp가 prevProps와 동일한 값을 가지면 true를 반환하고, 그렇지 않다면 false를 반환\n  */</span>\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-title class_">MyComponent</span>, areEqual);\n</pre><p><br></p><p><br></p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-04-01T11:43:46.727Z',
    updatedAt: '2022-04-07T06:50:34.824Z',
    __v: 0,
  },
  {
    _id: '624d463a03cca0cb1e6d02e8',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1649230952/myportfolioblogproject/xrlsjqds2chqxcyjlj1f.gif',
    title: 'Sass 설치 및 셋업',
    text: '<h3><span style="color: #ab4642">Sass 설치하기</span></h3><p><br class="ProseMirror-trailingBreak"></p><p><strong>Visual Studio Code 익스텐션 자동 css 빌드 기능 Live Sass Compiler 설치하기</strong></p><p><br class="ProseMirror-trailingBreak"></p><p><strong>Sass 명령행 인터페이스 설치하기</strong></p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">Live Sass Compiler 설치하기</span></h3><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649231255/myportfolioblogproject/pl4zodlpiwif0hukknpe.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>Live Sass Compiler는 VS code 확장 기능으로, Sass 혹은 Scss 로 작성된 CSS 코드를 자동으로 실시간 빌드해준다.</p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">Sass 명령행 인터페이스 설치하기</span></h3><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649231296/myportfolioblogproject/cgxuczdmatzkefbrzmnk.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>npm을 통해서 Sass 명령행 인터페이스 설치하기!!</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649231311/myportfolioblogproject/yp0uqa3mk3m5mmul5fif.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>버전 확인을 통해서 정상적으로 설치 완료했는지 확인하기!!</p><p><br class="ProseMirror-trailingBreak"></p><h3><span style="color: #ab4642">Sass 사용해보기</span></h3><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649231344/myportfolioblogproject/wxxbfmqefhzfow04ftyp.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>반드시 css 파일 확장자 명을 .scss 로 지정해줘서 작성을 해주어야 한다.</p><p><br class="ProseMirror-trailingBreak"></p><p>작성이 끝나고 VS code 하단 Watch Sass 라는 표시가 보이는데,</p><p><br class="ProseMirror-trailingBreak"></p><p>그것을 클릭하고 저장을 하면....</p><p><br class="ProseMirror-trailingBreak"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649231395/myportfolioblogproject/i1bg9b4aiyxtpsoizmjd.gif" alt="image" crossorigin="anonymous" contenteditable="false"><img class="ProseMirror-separator"><br class="ProseMirror-trailingBreak"></p><p><br class="ProseMirror-trailingBreak"></p><p>위의 watching 상태에서 자동으로 scss에서 css로 빌드된 파일이 생성되고,</p><p><br class="ProseMirror-trailingBreak"></p><p>그 파일을 html 파일과 연결을 시켜주면 실행되어진다.</p><p><br class="ProseMirror-trailingBreak"></p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-04-06T07:50:18.470Z',
    updatedAt: '2022-04-06T07:50:18.470Z',
    __v: 0,
  },
  {
    _id: '624d4cb003cca0cb1e6d02ed',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1649231943/myportfolioblogproject/ioqhjyao1bukpw0qltkt.gif',
    title: 'Scss 문법 소개',
    text: '<h3><span style="color: rgb(171, 70, 66);">index.html</span></h3><p><br></p><pre class="ql-syntax" spellcheck="false">...\n <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"linkBox"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">""</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;&lt;<span class="hljs-name">h2</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n  \n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Another Title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"byeBtn"</span>&gt;</span>Bye bye<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Iphone"</span>&gt;</span>Iphone<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n...\n</pre><p><br></p><p><br></p><h3><span style="color: rgb(171, 70, 66);">style.scss</span></h3><p><br></p><h4><span style="color: rgb(220, 150, 86);">$(variable name)</span></h4><p><br></p><pre class="ql-syntax" spellcheck="false">$bg: #fff;\n$title: 32px;\n$fontBasicColor: red;\n$fontBold: bolder;\n$hoverColor: #a4ffa4;\n$linkColor:lightcoral; \n\n$minIphone: 500px;\n$maxIphone: 690px;\n$minTablet: $minIphone + 1;\n$maxTablet: 1120px;\n</pre><p><br></p><p>순수 CSS 문법의 :root 문법에 해당함.</p><p><br></p><p>scss 에서는 $를 써서 변수로 할당 추후에 mixin을 통해서 변수로 넘겨서 @if, @else if 등등의 문법으로로</p><p><br></p><p>활용이 가능하다</p><p><br></p><p><br></p><h4><span style="color: rgb(220, 150, 86);">@mixin</span></h4><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">@mixin</span> link($word) {\n    <span class="hljs-attribute">text-decoration</span>: none;\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;\n    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">12px</span>;\n    <span class="hljs-keyword">@if</span> $word == <span class="hljs-string">\'odd\'</span> {\n        <span class="hljs-attribute">color</span>: blue;\n    } <span class="hljs-keyword">@else</span> {\n        <span class="hljs-attribute">color</span>: red;\n    }\n    <span class="hljs-attribute">font-weight</span>: $fontBold;\n    <span class="hljs-attribute">display</span>: block;\n}\n\n</pre><p><br></p><p>@mixin 을 통해서 변수로 매개변수로 $word 로 주어서,</p><p><br></p><p>scss에서는 변수 선언이 가능해서 논리 문법으로 css를 꾸밀 수 있음.</p><p><br></p><pre class="ql-syntax" spellcheck="false">.linkBox {\n    a {\n        <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;\n\n        &amp;:nth-child(odd) {\n            <span class="hljs-keyword">@include</span> link(<span class="hljs-string">"odd"</span>);\n        }\n\n        &amp;:nth-child(even) {\n            <span class="hljs-keyword">@include</span> link(<span class="hljs-string">"even"</span>);\n        }\n    }\n}\n</pre><p><br></p><p>@include를 통해서 mixin scss 논리 문법을 꾸미고자 하는 태그에 위와 같이 적용한다</p><p><br></p><p><br></p><h4><span style="color: rgb(220, 150, 86);">@content</span></h4><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">@mixin</span> responsive($device) {\n    <span class="hljs-keyword">@if</span> $device == <span class="hljs-string">\'iphone\'</span> {\n        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: $minIphone) \n        <span class="hljs-keyword">and</span> ( <span class="hljs-attribute">max-width</span>: $maxIphone) {\n            <span class="hljs-keyword">@content</span>;\n        }\n\n    } <span class="hljs-keyword">@else</span> if $device == <span class="hljs-string">\'tablet\'</span> {\n        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: $minTablet) \n        <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: $maxTablet) {\n            <span class="hljs-keyword">@content</span>;\n        }\n\n    } <span class="hljs-keyword">@else</span> if $device == <span class="hljs-string">\'iphone-l\'</span> {\n        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: $minIphone) \n        <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: $maxIphone) \n        <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) {\n            <span class="hljs-keyword">@content</span>;\n        }\n\n    } <span class="hljs-keyword">@else</span> if $device == <span class="hljs-string">"ipad-l"</span> {\n        <span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: $minTablet) \n        <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: $maxTablet) \n        <span class="hljs-keyword">and</span> (<span class="hljs-attribute">orientation</span>: landscape) {\n            <span class="hljs-keyword">@content</span>;\n        }\n    }\n}\n</pre><p><br></p><pre class="ql-syntax" spellcheck="false">.Iphone {\n    <span class="hljs-keyword">@include</span> phoneCommonStyle;\n\n    <span class="hljs-keyword">@include</span> responsive(<span class="hljs-string">"iphone"</span>) {\n        <span class="hljs-attribute">color</span>: white;\n        <span class="hljs-attribute">background</span>: lightcoral;\n    }\n\n    <span class="hljs-keyword">@include</span> responsive(<span class="hljs-string">"tablet"</span>) {\n        <span class="hljs-attribute">color</span>: white;\n        <span class="hljs-attribute">background</span>: violet;\n    }\n\n    <span class="hljs-keyword">@include</span> responsive(<span class="hljs-string">"iphone-l"</span>) {\n        <span class="hljs-attribute">color</span>: white;\n        <span class="hljs-attribute">background</span>: lightseagreen;\n    }\n\n    <span class="hljs-keyword">@include</span> responsive(<span class="hljs-string">"ipad-l"</span>) {\n        <span class="hljs-attribute">color</span>: white;\n        <span class="hljs-attribute">background</span>: yellowgreen;\n    }\n}\n</pre><p><br></p><p>위와 같이 @content 를 @mixin과 잘 이용하면 반응형 만들 때 순수 css 보다는 더욱 더 편안하게 만들 수 있다.</p><p><br></p><p><br></p><h4><span style="color: rgb(220, 150, 86);">@extend</span></h4><p><br></p><pre class="ql-syntax" spellcheck="false">%button {\n    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">7px</span>;\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;\n    <span class="hljs-attribute">text-transform</span>: uppercase;\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;\n    <span class="hljs-attribute">background-color</span>: powderblue;\n}\n</pre><p><br></p><pre class="ql-syntax" spellcheck="false">.byeBtn {\n    <span class="hljs-keyword">@extend</span> %button;\n}\n</pre><p><br></p><p>@mixin 문법과 사용방법이 대체로 유사하나 다른 점은 mixin 과는 다르게 매개 변수 혹은 변수를 활용하지 못</p><p><br></p><p>해 @mixin 처럼 단독으로 논리적이 프로그래밍 언어로 활용하지는 못한다.</p><p><br></p><p><br></p><h1><span style="color: rgb(230, 0, 0);">*scss prettier 설정</span></h1><p><br></p><h2><span style="color: rgb(255, 153, 0);"> settings.json</span></h2><p><br></p><pre class="ql-syntax" spellcheck="false">"[scss]": {\n&nbsp; &nbsp; "editor.defaultFormatter": <span class="hljs-string">"esbenp.prettier-vscode"</span>\n&nbsp;}\n</pre><p><br></p><p>아래와 같이 추가하면 SCSS 도 prettier가 적용이 된다.</p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-04-06T08:17:52.997Z',
    updatedAt: '2022-04-10T05:07:49.622Z',
    __v: 0,
  },
  {
    _id: '625192c8ad717b8e66eac4fd',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1649512903/myportfolioblogproject/q9gabytqxd7lwdof9cae.gif',
    title: 'gitignore.io',
    text: '<h2><a href="https://www.toptal.com/developers/gitignore" rel="noopener noreferrer" target="_blank">https://www.toptal.com/developers/gitignore</a></h2><p><br></p><p>gitginore 파일을 사용하는 언어 스택에 따라 자동 생성해주는 사이트이다.</p><p>매우 유용함!!</p><p><br></p><p><br></p><h2>* 커밋할 때 .gitignore 이 적용이 되지 않을 때..</h2><p><br></p><p>보통은 깃에 남아있는 cache 관련된 문제이므로,</p><p>남아있는 cache를 지워주고 다시 commit을 하면,</p><p>정상적으로 commit이 된다.</p><p><br></p><pre class="ql-syntax" spellcheck="false">git rm -r <span class="hljs-attr">--cached</span> .\ngit add .\ngit commit -m "commit again"\ngit push origin main\n</pre>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2022-04-09T14:06:00.448Z',
    updatedAt: '2022-04-09T14:07:37.682Z',
    __v: 0,
  },
  {
    _id: '6252b24670616e302b755cc3',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1649582938/myportfolioblogproject/adyxsifo011v7g9fu4wy.gif',
    title: 'D-DOS 공격과 RateLimiter',
    text: '<h1>* D-DOS 공격이란?</h1><p><br></p><p><br></p><p>분산 서비스 공격 ( Distributed Denial of Service Attack ) 이란 특정 서버(컴퓨터)나 네트워크 장비를 대상으로 많은 데이터를 발생 시켜 장애를 일으키는 대표적인 서비스 거부 공격이다.</p><p><br></p><p>즉, 해커가 여러 대의 PC 및 기계 장비를 좀비 PC를 만들어서 공격 대상이 되는 특정 서버에 여러 좀비 PC를 통해서 무수히 많은 HTTP 요청을 한번에 보내서 서버를 마비시키고, 웹사이트를 마비시키는 공격이다.</p><p><br></p><p>이에 대한 대비책과 예방을 위한 코드를 해보자!!</p><p><br></p><p><br></p><h1>*Server Side</h1><p><br></p><h2><em style="color: rgb(255, 153, 0);">*rate-limiter.js (middleware)</em></h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> rateLimit <span class="hljs-keyword">from</span> <span class="hljs-string">\'express-rate-limit\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">rateLimit</span>({\n  <span class="hljs-attr">windowMs</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 밀리세컨드 기준</span>\n  <span class="hljs-attr">max</span>: <span class="hljs-number">200</span>, <span class="hljs-comment">// 즉, 1분에 httml 요청 200회로만 제한한다.</span>\n\n  <span class="hljs-comment">// keyGenerator: (req, res) =&gt; `Blog`,</span>\n  <span class="hljs-comment">// keyGenerator 따로 설정을 안해주면 개개인 IP로 설정됨. </span>\n  <span class="hljs-comment">// 랜던한 문자열을 준다면 그 프로젝트, 웹사이트 자체로 설정.</span>\n  <span class="hljs-comment">// 즉 이렇게 설정을 해주면 개개인 IP를 기준으로 1분 200회 이내로 제한하는 것이 아니라,</span>\n  <span class="hljs-comment">// 전체 서버 요청 1분당 200회로 제한!</span>\n  <span class="hljs-comment">// 그 외 옵션사항들도 많지만, vscode에서 확인할 것!</span>\n});\n</pre><p><br></p><p><br></p><h2><em style="color: rgb(255, 153, 0);">*app.js</em></h2><p><br></p><pre class="ql-syntax" spellcheck="false">...\n<span class="hljs-keyword">import</span> rateLimiter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./middleware/rate-limiter.js\'</span>;\n\napp.<span class="hljs-title function_">use</span>(rateLimiter);\n<span class="hljs-comment">// 위에서 만든 미들웨어를 app.js에 추가를 해준다!</span>\n...\n</pre><p><br></p><p><br></p><p>만약 이를 어기고 과다 요청을 하게 된다면!!!</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649587816/myportfolioblogproject/uyj0n9gsgtwcsz9cecwe.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>이러한 error 가 뜨게된다..</p><p>error 표시 역시도 코드상 옵션을 다르게 주어서,</p><p>커스텀마이징 할수 있겠다!!</p><p><br></p><p><br></p><h1>*Client Side</h1><p><br></p><h2><em style="color: rgb(255, 153, 0);">*config.js</em></h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">\'axios\'</span>;\n<span class="hljs-keyword">import</span> axiosRetry <span class="hljs-keyword">from</span> <span class="hljs-string">\'axios-retry\'</span>;\n<span class="hljs-comment">// 서버에서 과도한 요청사항으로 429 오류 코드를 보내게 되면,</span>\n<span class="hljs-comment">// axios-retry 라이브러리를 설치하여,</span>\n<span class="hljs-comment">// 429 오류 코드를 받고, 재시도를 몇번까지 할수 있고,</span>\n<span class="hljs-comment">// 재시도 걸리는 시간을 조정할 수 있다.</span>\n\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">AxiosService</span> {\n&nbsp; <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) {\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">axiosInstance</span> = axios.<span class="hljs-title function_">create</span>({\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">baseURL</span>: <span class="hljs-string">`<span class="hljs-subst">${process.env.REACT_APP_BASE_URL}</span>`</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">mode</span>: <span class="hljs-string">\'cors\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,\n&nbsp; &nbsp; &nbsp; ...options,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">headers</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/json\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">origin</span>: <span class="hljs-string">`<span class="hljs-subst">${process.env.REACT_APP_ALLOW_ORIGIN}</span>`</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; ...options?.<span class="hljs-property">headers</span>,\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; });\n\n\n&nbsp; &nbsp; <span class="hljs-title function_">axiosRetry</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">axiosInstance</span>, { <span class="hljs-comment">// 생성한 axiosInstance에 axiosRetry 설정을 추가해준다.</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">retries</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// 429 오류코드를 받고 최대 5번까지 재요청 가능하게 함!</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">retryDelay</span>: <span class="hljs-function">(<span class="hljs-params">retry</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> delay = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, retry) * <span class="hljs-number">100</span>;\n        <span class="hljs-comment">// 첫 retry는 2 * 100 = 200 밀리세컨드, 두번쨰는 2의 2제곱 * 100 = 400 밀리세컨드.... 후에 재시도해!!</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> jitter = delay * <span class="hljs-number">0.1</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>();\n        <span class="hljs-comment">// 200 밀리세컨드, 400밀리세컨드 등등 여러 pc에서 같은 시간대에 재시도하면 서버 과부하 발생,\n        // 그래서 jitter 시간을 주어서 201초, 209초... 등등 시간대를 나누어서 재시도하게끔 해준다.</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> delay + jitter;\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">retryCondition</span>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; axiosRetry.<span class="hljs-title function_">isNetworkOrIdempotentRequestError</span>(err) ||\n        <span class="hljs-comment">// Idempotent error, network http 요청 에러 발생하거나,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; err.<span class="hljs-property">response</span>.<span class="hljs-property">status</span> === <span class="hljs-number">429</span>,\n        <span class="hljs-comment">// 429 서버 과다 요청 에러일시 재시도 시작.</span>\n&nbsp; &nbsp; });\n&nbsp; }\n}\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">AxiosService</span>;\n</pre><p><br></p><p><br></p><p>클라이언트, 서버 사이드에서 이런식으로 구현을 해서, 서버 D-DOS 공격을 예방을 하자!!</p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-04-10T10:32:38.933Z',
    updatedAt: '2022-04-10T11:08:35.835Z',
    __v: 0,
  },
  {
    _id: '6258d8dab7216184dab6fb36',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1649989016/myportfolioblogproject/osinuwlktdkr9bki3a3g.gif',
    title: '타입스크립트 입문 및 셋업',
    text: '<h1><strong style="color: rgb(255, 153, 0);"><em>1. 먼저 node와 npm, Visual Studio Code 설치!!\t</em></strong></h1><p><br></p><h3>그 전 앞 게시물 참고!!</h3><p><br></p><p><br></p><p><br></p><h1><strong style="color: rgb(255, 153, 0);"><em>2. VS Code Setting 팔레트 창에 들어가서 Strict null 을 아래와 같이 설정 해준다!!</em></strong></h1><p><br></p><p><br></p><h3><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649989945/myportfolioblogproject/rowzzpg0ixjr7vqiee57.gif" crossorigin="anonymous"></h3><p><br></p><p><br></p><p><br></p><p><br></p><h1><strong style="color: rgb(255, 153, 0);"><em>3. 그 다음 npm을 통해서 TypeScript 설치\t</em></strong></h1><p><br></p><h2><a href="https://www.typescriptlang.org" rel="noopener noreferrer" target="_blank">https://www.typescriptlang.org</a></h2><p><br></p><pre class="ql-syntax" spellcheck="false">npm install -g ts-node\n</pre><p><br></p><p><br></p><p><br></p><h1><strong style="color: rgb(255, 153, 0);"><em>4. npm 통해서 버전 확인\t</em></strong></h1><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649989562/myportfolioblogproject/l54bimvm6yqzjo5h3bu1.gif" crossorigin="anonymous"></p><h3><br></h3><h3>콘솔창에 위와 같은 명령어 입력을 통해서 버전 확인을 한다!!</h3><p><br></p><p><br></p><p><br></p><h1><strong style="color: rgb(255, 153, 0);"><em>5. 타입스크립트 파일을 자바스크립트 파일로 자동 변환 빌드 설정!!\t</em></strong></h1><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649989674/myportfolioblogproject/tvvwsqnm46x2kkmi3pbv.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1649989685/myportfolioblogproject/hbevedij7oer08dq0ojs.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><h3>백엔드 nodemon 처럼 위와 같은 타입스크립트 명령어를 통해서 수정되고 저장되면 자동으로 자바스크립트 파일로 변환, </h3><h3>빌드되게 만들어 타입스크립트를 작성한다!!</h3><p><br></p>',
    catName: 'TypeScript',
    author: 'lse126',
    createdAt: '2022-04-15T02:30:50.704Z',
    updatedAt: '2022-04-15T02:33:17.795Z',
    __v: 0,
  },
  {
    _id: '625aabcfffe23c0003042a3f',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1650108650/myportfolioblogproject/yh2uaykwclnkuqd4hds8.gif',
    title: 'SCSS에서 @mixin을 통해서 @for 문 사용',
    text: '<pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">@mixin</span> btnClickEvent($num) {\n&nbsp; <span class="hljs-keyword">@if</span> $num == <span class="hljs-string">\'1\'</span> {\n&nbsp; &nbsp; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#af7832</span>;\n&nbsp; }\n\n\n&nbsp; <span class="hljs-keyword">@if</span> $num == <span class="hljs-string">\'2\'</span> {\n&nbsp; &nbsp; <span class="hljs-attribute">background-color</span>: darkblue;\n&nbsp; }\n\n\n&nbsp; <span class="hljs-keyword">@if</span> $num == <span class="hljs-string">\'3\'</span> {\n&nbsp; &nbsp; <span class="hljs-attribute">background-color</span>: darkcyan;\n&nbsp; }\n\n\n&nbsp; <span class="hljs-keyword">@if</span> $num == <span class="hljs-string">\'4\'</span> {\n&nbsp; &nbsp; <span class="hljs-attribute">background-color</span>: darkviolet;\n&nbsp; }\n\n\n&nbsp; <span class="hljs-keyword">@if</span> $num == <span class="hljs-string">\'5\'</span> {\n&nbsp; &nbsp; <span class="hljs-attribute">background-color</span>: darkorange;\n&nbsp; }\n}\n</pre><p> </p><p><br></p><p>@mixin 을 통해서 @if 라는 논리 문법을 써서 위와 같이 써보자!!</p><p>각 숫자 변수를 넘겨 받았을 때 숫자에 따라 다르게 background-color 설정!!</p><p><br></p><pre class="ql-syntax" spellcheck="false">@for $num from 1 to 6 {\n  div:nth-child(#{$num}) {\n     display: flex;\n&nbsp; &nbsp; &nbsp;justify-content: center;\n&nbsp; &nbsp; &nbsp;align-items: center;\n&nbsp; &nbsp; &nbsp;border: $border;\n&nbsp; &nbsp; &nbsp;border-top: none;\n\n    &amp;:hover {\n      color: white;\n      @include btnClickEvent(#{$num});\n    }\n  }   \n}\n</pre><p><br></p><p>@for 문 같은 경우 앞에<span style="background-color: rgb(255, 255, 0);"> </span><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em># 을 무조건 붙여</em></strong> 주어야 한다!!</p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-04-16T11:43:11.593Z',
    updatedAt: '2022-04-16T11:43:11.593Z',
    __v: 0,
  },
  {
    _id: '625d65418447d2c442691a44',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1650282153/myportfolioblogproject/nmsnu3mainginzpwxpps.gif',
    title: 'Content-Security-Policy (콘텐츠 보안 정책)',
    text: '<h2><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">콘텐츠 보안 정책(Content-Security-Policy)는 신뢰할 수 있는 웹페이지 콘텍스트에서 </span></h2><h2><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">악의적인 콘텐츠 실행으로 인한, 크로스 사이트 스크립팅, 클릭 재킹 및 기타 코드 삽입 공격을 </span></h2><h2><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">방지하기 위해서 도입된 컴퓨터 보안 표준 정책이다.</span></h2><p><br></p><p><br></p><h3>CORS 보호 정책은 클라이언트가 서버와 정상적인 네트워크 통신을 하면서,</h3><h3>허용하지 않는 클라이언트 origin (출처)과 서버 통신의 결과인 데이터를 브라우저가 직접 제한하는 정책이다.</h3><p><br></p><h3>예외적인 교차 origin 허용은 클라이언트 HTTPS 요청 헤더에 Origin을 추가하고,</h3><h3>서버에서 Cors 모듈을 통해서 클라이언트 교차 origin 교차 출처 사이트를 허용해주거나,</h3><p><br></p><h3>혹은 HTTPS 응답 코드(백엔드) 에서 Access-Control-Allow-Origin 헤더의 이름으로 특정 교차출처 사이트를 추가해주면 된다.</h3><h3>부가적으로는 응답헤더에 Cross-Origin-Resource-Policy를 cross-origin 으로 설정해 주기도 한다.</h3><p><br></p><p><br></p><h2>콘텐츠 보안 정책(Content-Security-Policy), 즉 CSP 규칙도 마찬가지로 "default-src \'self\' " 라는,</h2><h2>모든 콘텐츠는 현재 도메인에서만 제공되어야 한다.</h2><p><br></p><p>Ex)</p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">// 모든 콘텐츠는 현재 도메인에서만 제공되어야 한다.</span>\n<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Security</span>-<span class="hljs-title class_">Policy</span>: <span class="hljs-keyword">default</span>-src <span class="hljs-string">\'self\'</span>\n\n<span class="hljs-comment">// 신뢰할 수 있는 특정 도메인과 그것의 모든 하위 도메인의 콘텐츠를 허용한다.</span>\n<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Security</span>-<span class="hljs-title class_">Policy</span>: <span class="hljs-keyword">default</span>-src <span class="hljs-string">\'self\'</span> *.<span class="hljs-property">trusted</span>.<span class="hljs-property">com</span>\n\n<span class="hljs-comment">// 이미지는 모든 도메인, 미디어와 스크립트는 특정 도메인만 허용한다.</span>\n<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Security</span>-<span class="hljs-title class_">Policy</span>: <span class="hljs-keyword">default</span>-src <span class="hljs-string">\'self\'</span>;img-src *;media-src media1.<span class="hljs-property">com</span> media2.<span class="hljs-property">com</span>;script-src userscripts.<span class="hljs-property">example</span>.<span class="hljs-property">com</span>\n\n</pre><p><br></p><p>하지만 웹사이트를 만들고 사용하는 입장에서 이미지나 동영상, 일부 보안이 검증된 스크립트를 가져와 쓸 때가 많다.</p><p>cors 예외 출처 허용과 같이, csp 규칙에도 서버 응답 헤더에 관련 코드를 작성하거나, HTML 메타 태그 수정을 통해서</p><p>예외를 아래와 같이 허용하게 할 수도 있다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">// 서버 응답 헤더 방식</span>\nres.header(<span class="hljs-string">"Content-Security-Policy"</span>, <span class="hljs-string">"default-src \'self\'; img-src https://*; child-src \'none\';"</span>);\n\n<span class="hljs-comment">// HTML 태그 방식</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Security-Policy"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"default-src \'self\'; img-src https://*; child-src \'none\';"</span>&gt;</span>\n\n</pre><p><br></p><p>혹은, nodeJS npm을 통해서 받은 helmet 모듈을 사용할 경우는 아래와 같이 설정하면 된다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> cspOptions = {\n&nbsp; <span class="hljs-attr">directives</span>: {\n&nbsp; &nbsp; <span class="hljs-comment">// 기본 옵션을 가져옵니다.</span>\n&nbsp; &nbsp; ...helmet.<span class="hljs-property">contentSecurityPolicy</span>.<span class="hljs-title function_">getDefaultDirectives</span>(),\n\n&nbsp; &nbsp; <span class="hljs-comment">// cloudinary 사이트의 이미지, 비디오 소스를 허용합니다.</span>\n&nbsp; &nbsp; <span class="hljs-string">\'img-src\'</span>: [<span class="hljs-string">"\'self\'"</span>, <span class="hljs-string">\'data:\'</span>, <span class="hljs-string">`*`</span>],\n&nbsp; &nbsp; <span class="hljs-string">\'media-src\'</span>: [\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">"\'self\'"</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'data:\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">`https://res.cloudinary.com https://www.youtube.com/embed/`</span>,\n&nbsp; &nbsp; ],\n&nbsp; &nbsp; <span class="hljs-string">\'child-src\'</span>: [\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">"\'self\'"</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'data:\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">`https://res.cloudinary.com https://www.youtube.com/embed/`</span>,\n&nbsp; &nbsp; ],\n&nbsp; &nbsp; <span class="hljs-string">\'frame-src\'</span>: [<span class="hljs-string">"\'self\'"</span>, <span class="hljs-string">\'data:\'</span>, <span class="hljs-string">`https://www.youtube.com/embed/`</span>],\n&nbsp; },\n};\n\n\n<span class="hljs-comment">// Helmet의 모든 기능 사용. (contentSecurityPolicy에는 custom option 적용)</span>\napp.<span class="hljs-title function_">use</span>(\n&nbsp; <span class="hljs-title function_">helmet</span>({\n&nbsp; &nbsp; <span class="hljs-attr">contentSecurityPolicy</span>: cspOptions,\n&nbsp; })\n);\n\n</pre><p><br></p><p><br></p><p>위와 코드와 같이 CSP 보안 정책을 정의한 상태에서 공격자가 다른 허용되니 않은 출처에서 스크립트, 이미지, 동영상 소스 파일 등등 로드할 경우,</p><p>아래와 같은 오류를 발생시켜 버린다. 이렇게 된다면, 해커는 아무리 사이트로 악성코드를 주입하더라도 즉시 오류 메시지가 발생하여 어떠한 공격도</p><p>할 수 없는 상황이 되어버린다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1650286857/myportfolioblogproject/f3zytcccsqtytvdn9qor.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><h2><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">콘텐츠 보안 정책(Content-Security-Policy) 적용 목록</span></h2><p><br></p><p>아래와 같은 다양한 예외 허용할 수 있는 옵션이 있으니 참고하길 바란다.</p><p><br></p><p><strong><em>-base-uri</em></strong><em>&nbsp;는 페이지의&nbsp;&lt;base&gt;&nbsp;요소에 나타날 수 있는 URL을 제한합니다.</em></p><p><br></p><p><strong><em>-child-src</em></strong><em>&nbsp;는 작업자와 삽입된 프레임 콘텐츠에 대한 URL을 나열합니다. </em></p><p><em>예:&nbsp;child-src&nbsp;</em><a href="https://youtube.com/" rel="noopener noreferrer" target="_blank" style="color: rgb(4, 190, 184);"><em>https://youtube.com</em></a><em>을 사용하면 다른 출처가 아니라 YouTube에서 가져온 동영상을 삽입할 수 있습니다. </em></p><p><em>지원 중단된&nbsp;</em><strong><em>frame-src</em></strong><em>&nbsp;지시문 대신 이 지시문을 사용하세요.</em></p><p><br></p><p><strong><em>-connect-src</em></strong><em>&nbsp;는 (XHR, WebSockets 및 EventSource를 통해) 연결할 수 있는 출처를 제한합니다.</em></p><p><br></p><p><strong><em>-font-src</em></strong><em>&nbsp;는 웹 글꼴을 제공할 수 있는 출처를 지정합니다.&nbsp;</em></p><p><em>font-src&nbsp;</em><a href="https://themes.googleusercontent.com/" rel="noopener noreferrer" target="_blank" style="color: rgb(4, 190, 184);"><em>https://themes.googleusercontent.com</em></a><em>을 통해 Google의 웹 글꼴을 사용할 수 있습니다.</em></p><p><br></p><p><strong><em>-form-action</em></strong><em>&nbsp;은&nbsp;&lt;form&gt;&nbsp;태그에서의 제출을 위해 유효한 엔드포인트를 나열합니다.</em></p><p><br></p><p><strong><em>-frame-ancestors</em></strong><em>&nbsp;는 현재 페이지를 삽입할 수 있는 소스를 지정합니다. </em></p><p><em>이 지시문은&nbsp;&lt;frame&gt;,&nbsp;&lt;iframe&gt;,&nbsp;&lt;embed&gt;&nbsp;및&nbsp;&lt;applet&gt;&nbsp;태그에 적용됩니다. </em></p><p><em>이 지시문은&nbsp;&lt;meta&gt;&nbsp;태그에서 사용할 수 없고 HTML 이외의 리소스에만 적용됩니다.</em></p><p><br></p><p><strong><em>-frame-src</em></strong><em>&nbsp;는 지원 중단되었습니다.&nbsp;</em><strong><em>child-src</em></strong><em>&nbsp;를 대신 사용하세요.</em></p><p><br></p><p><strong><em>-img-src</em></strong><em>&nbsp;는 이미지를 로드할 수 있는 출처를 정의합니다.</em></p><p><br></p><p><strong><em>-media-src</em></strong><em>&nbsp;는 동영상과 오디오를 제공하도록 허용되는 출처를 제한합니다.</em></p><p><br></p><p><strong><em>-object-src</em></strong><em>&nbsp;는 플래시와 기타 플러그인에 대한 제어를 허용합니다.</em></p><p><br></p><p><strong><em>-plugin-types</em></strong><em>&nbsp;는 페이지가 호출할 수 있는 플러그인의 종류를 제한합니다.</em></p><p><br></p><p><strong><em>-report-uri</em></strong><em>&nbsp;은</em><strong><em>&nbsp;콘텐츠 보안 정책 위반 시 브라우저가 보고서를 보낼 URL을 지정</em></strong><em>합니다.&nbsp;</em></p><p><em>&lt;meta&gt;&nbsp;태그에서는 이 지시문을 사용할 수 없습니다.</em></p><p><br></p><p><strong><em>-style-src</em></strong><em>&nbsp;는&nbsp;script-src에서 스타일시트에 해당합니다.</em></p><p><br></p><p><strong><em>-upgrade-insecure-requests</em></strong><em>&nbsp;는 사용자 에이전트에 URL 구성표를 다시 작성하여 HTTP를 HTTPS로 변경하도록 지시합니다. </em></p><p><em>이 지시문은 다시 작성해야 할 이전 URL이 많은 웹사이트를 위한 것입니다.&nbsp;&nbsp;</em></p><p><br></p><p><br></p><p>브라우저, 서버 각종 보안 정책은 파고 파도 계속 나오는 거 같음... 앞으로 공부하면서 새로 알게 된 사실이 있다면</p><p>지속적으로 추가하겠음.. ㅠㅠ</p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-04-18T13:18:57.926Z',
    updatedAt: '2022-04-19T00:48:51.329Z',
    __v: 0,
  },
  {
    _id: '625fc3a2675de2288cc8d5c8',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1650441351/myportfolioblogproject/e54cx6rv5ofoa2xqbhxt.gif',
    title: 'Styled Components 셋업 및 문법 소개',
    text: '<p>기존에 SPA (싱글페이지 어플리케이션) 을 만들 땐 SCSS를 쓰고, 기존에 React로 멀티 페이지를 만들 땐 전처리기 post CSS를 쓰고 있었지만.</p><p><br></p><p>아무리 생각해도 post CSS를 쓰는 것은 최선이 아닌 것 같아 찾아낸 것이 Styled Components 라는 전처리기이다.</p><p><br></p><p><br></p><h1>*셋팅하기</h1><p><br></p><pre class="ql-syntax" spellcheck="false"># with npm\nnpm install <span class="hljs-attr">--save</span> styled-components\n\n# with yarn\nyarn add styled-components\n</pre><p><br></p><p>먼저 styled-components 라이브러리를 yarn이나 npm을 통해서 설치를 한다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1650441815/myportfolioblogproject/nhesowhk2cifgnwfjryn.gif" crossorigin="anonymous"></p><p><br></p><p>그리고 css 파일이 아니라 jsx 파일에서 styled-compents CSS 문법 Syntax 작성을 쉽게 도와주는</p><p>vscode-styled-components 익스텐션을 설치한다.</p><p><br></p><p><br></p><h1>*문법 소개</h1><p><br></p><h3>-기본문법</h3><p><br></p><p>아래와 같이 css components 들을 만들어서 react hook component 상에 구현이 가능하다.</p><p>이렇게 함으로써 하나의 jsx component 파일 하나에 js, css, html 파일 모두 구현이 가능하다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./App.css\'</span>;\n<span class="hljs-keyword">import</span> styled, { keyframes } <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Father</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; border-radius: 50%;\n`</span>;\n<span class="hljs-comment">//위와 같이 기본적인 css styled components를 생성할 수 있었다.</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Box</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; background: <span class="hljs-subst">${(props) =&gt; props.bgColor}</span>;\n&nbsp; color: <span class="hljs-subst">${(props) =&gt; props.color}</span>;\n&nbsp; display: flex;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; padding: 1rem;\n&nbsp; width: 100px;\n&nbsp; height: 100px;\n&nbsp; font-size: 1.2rem;\n&nbsp; font-weight: bolder;\n`</span>;\n<span class="hljs-comment">// 아래 react components 상에서 전달받은 props 에서 bgColor, color를 전달받아 css 구현이 가능하다.</span>\n<span class="hljs-comment">// scss 와 매우 유사</span>\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Circle</span> = <span class="hljs-title function_">styled</span>(<span class="hljs-title class_">Box</span>)<span class="hljs-string">`\n&nbsp; border-radius: 50%;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Btn</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; color: white;\n&nbsp; background-color: tomato;\n&nbsp; border: 0;\n&nbsp; border-radius: 15px;\n&nbsp; width: fit-content;\n&nbsp; padding: 0.4rem;\n&nbsp; margin-bottom: 0.4rem;\n&nbsp; margin-top: 0.4rem;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span>.<span class="hljs-title function_">attrs</span>({ <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">minLength</span>: <span class="hljs-number">10</span> })<span class="hljs-string">`\n&nbsp; background-color: tomato;\n&nbsp; width: 10rem;\n&nbsp; margin-bottom: 0.8rem;\n`</span>;\n<span class="hljs-comment">// attrs 를 통해서 위와 같이 속성 부여가 가능하다.</span>\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Wrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> animate = keyframes<span class="hljs-string">`\n&nbsp; 0% {\n&nbsp; &nbsp; transform: rotate(0deg);\n&nbsp; &nbsp; border-radius: 0px;\n&nbsp; }\n&nbsp; 50% {\n&nbsp; &nbsp; transform: rotate(360deg);\n&nbsp; &nbsp; border-radius: 50%;\n&nbsp; }\n&nbsp; 100% {\n&nbsp; &nbsp; transform: rotate(0deg);\n&nbsp; &nbsp; border-radius: 0px;\n&nbsp; }\n`</span>;\n<span class="hljs-comment">// keyframes을 import 시켜서 애니메이션을 위와 같이 구현 할 수도 있다.</span>\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Emoji</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 2rem;\n&nbsp; user-select: none;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">WrapperBox</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; height: 200px;\n&nbsp; width: 200px;\n&nbsp; background-color: tomato;\n&nbsp; animation: <span class="hljs-subst">${animate}</span> 4s linear infinite;\n&nbsp; display: flex;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n\n&nbsp; <span class="hljs-subst">${Emoji}</span> {\n&nbsp; &nbsp; &amp;:hover {\n&nbsp; &nbsp; &nbsp; font-size: 5rem;\n&nbsp; &nbsp; }\n&nbsp; &nbsp; &amp;:active {\n&nbsp; &nbsp; &nbsp; opacity: 0;\n&nbsp; &nbsp; }\n&nbsp; }\n`</span>;\n<span class="hljs-comment">// 이미 위에서 구현했던 Emoji 라는 컴포넌트를 scss 처럼 위와 같이 구현 할수도 있다.</span>\n<span class="hljs-comment">// 컴포넌트 이름 대신에 태그 이름을 적어서 scss 처럼 구현할 수도 있다.</span>\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Father</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Box</span> <span class="hljs-attr">bgColor</span>=<span class="hljs-string">\'lightblue\'</span> <span class="hljs-attr">color</span>=<span class="hljs-string">\'red\'</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Son\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Box</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Circle</span> <span class="hljs-attr">bgColor</span>=<span class="hljs-string">\'lightcoral\'</span> <span class="hljs-attr">color</span>=<span class="hljs-string">\'yellow\'</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Lee\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Circle</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Btn</span>&gt;</span>Log In<span class="hljs-tag">&lt;/<span class="hljs-name">Btn</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Btn</span> <span class="hljs-attr">as</span>=<span class="hljs-string">\'a\'</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'/\'</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Log In\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Btn</span>&gt;</span>\n   &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> /&gt;</span>\n  &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Father</span>&gt;</span>\n  &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Wrapper</span>&gt;</span>\n  &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">WrapperBox</span>&gt;</span>\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Emoji</span>&gt;</span>😘<span class="hljs-tag">&lt;/<span class="hljs-name">Emoji</span>&gt;</span>\n  &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">WrapperBox</span>&gt;</span>\n  &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Wrapper</span>&gt;</span>\n  &nbsp; &nbsp; <span class="hljs-tag">&lt;/&gt;</span>\n  &nbsp;);\n };\n <span class="hljs-comment">// btn css 설정만 들고 오고 as를 통해서 a태그로 변환시켜주고 href 속성을 주어서 변환 시킬수도 있다.</span>\n  \n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</pre><p><br></p><p><br></p><h3>-Theme 문법</h3><p><br></p><p>*<strong><em>index.js</em></strong></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom/client\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./index.css\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./App\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ThemeProvider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n<span class="hljs-comment">// ThemeProvider를 import 를 시키고</span>\n\t\n\n<span class="hljs-keyword">const</span> darkTheme = {\n   <span class="hljs-attr">textColor</span>: <span class="hljs-string">\'whitesmoke\'</span>,\n   <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">\'#111\'</span>,\n};\t\n\n<span class="hljs-keyword">const</span> lightTheme = {\n   <span class="hljs-attr">textColor</span>: <span class="hljs-string">\'#111\'</span>,\n   <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">\'whitesmoke\'</span>,\n};\n<span class="hljs-comment">// 객체 형식으로 props를 설정해준다.\t</span>\n\n<span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">\'root\'</span>));\nroot.<span class="hljs-title function_">render</span>(\n  <span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span>\n\t<span class="hljs-tag">&lt;<span class="hljs-name">ThemeProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{lightTheme}</span>&gt;</span>\n\t   <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>\n\t<span class="hljs-tag">&lt;/<span class="hljs-name">ThemeProvider</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span>\n);\n<span class="hljs-comment">// theme 이라는 props로 부여하고자 하는 css 객체를 props를 전달한다.</span>\n</pre><p><br></p><p><strong><em>*app.js</em></strong></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./App.css\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\t\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Title</span> = styled.<span class="hljs-property">h1</span><span class="hljs-string">`\n  color: <span class="hljs-subst">${(props) =&gt; props.theme.textColor}</span>;\n`</span>;\n<span class="hljs-comment">// 위와 같이 props를 전달하여 color를 적용시킨다.</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Wrapper</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n  justify-content: center;\n  align-items: center;\n  background: <span class="hljs-subst">${(props) =&gt; props.theme.backgroundColor}</span>;\n`</span>;\n<span class="hljs-comment">// 위와 같이 props를 전달하여 color를 적용시킨다.\t</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; {\n   <span class="hljs-keyword">return</span> (\n\t <span class="hljs-tag">&lt;<span class="hljs-name">Wrapper</span>&gt;</span>\n\t   <span class="hljs-tag">&lt;<span class="hljs-name">Title</span>&gt;</span>Hello, My Name is Seong Eun Lee<span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span>\n\t <span class="hljs-tag">&lt;/<span class="hljs-name">Wrapper</span>&gt;</span>\n   );\n};\n\t\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</pre><p><br></p><p>post CSS 보다 이 styled-components라는 전처리기가 리액트 코드시 더 효율적인 것 같다.</p><p>싱글페이지를 만들땐 scss를 쓰고, 리액트를 코드할 땐 styled-components 쓰는게 효율적인 것 같다!!</p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-04-20T08:26:10.062Z',
    updatedAt: '2022-04-20T08:27:36.007Z',
    __v: 0,
  },
  {
    _id: '62611d8487b93e250d1600aa',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1650529424/myportfolioblogproject/yueddefrausk3e9jnrde.gif',
    title: 'Redux 기본 개념 (feat. useReducer in ReactJS)',
    text: '<h2>*Redux 셋업</h2><p><br></p><p>yarn 이나 npm을 통해서 설치!!</p><p><br></p><pre class="ql-syntax" spellcheck="false">yarn add redux\nnpm install redux\n</pre><p><br></p><p><br></p><h2>*Redux 기본 문법 소개 및 함수</h2><p><br></p><p>Redux를 이용해서 간단한 count 기능을 구현해보자!!</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { legacy_createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">\'redux\'</span>;\n\n<span class="hljs-keyword">const</span> add = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'.add\'</span>);\n<span class="hljs-keyword">const</span> minus = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'.minus\'</span>);\n<span class="hljs-keyword">const</span> <span class="hljs-built_in">number</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'span\'</span>);\n\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ADD</span> = <span class="hljs-string">\'ADD\'</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">MINUS</span> = <span class="hljs-string">\'MINUS\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">count = <span class="hljs-number">0</span>, action</span>) =&gt; {\n&nbsp; <span class="hljs-comment">// count state 값 store에 등록,</span>\n&nbsp; <span class="hljs-comment">// action 콜백 중간 파라메터로 전달</span>\n&nbsp; <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">case</span> <span class="hljs-attr">ADD</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> count + <span class="hljs-number">1</span>;\n&nbsp; &nbsp; <span class="hljs-comment">// reducer 함수가 return 하는 것은</span>\n&nbsp; &nbsp; <span class="hljs-comment">// reducer 함수 action 파라메터 type 값에</span>\n    <span class="hljs-comment">// 에 따라 다른 값이 return 되고 그 값이 store 의 state</span>\n    <span class="hljs-comment">// 값으로 업데이트 된다.</span>\n&nbsp; &nbsp; <span class="hljs-keyword">case</span> <span class="hljs-attr">MINUS</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> count - <span class="hljs-number">1</span>;\n&nbsp; &nbsp; <span class="hljs-attr">default</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> count;\n&nbsp; }\n};\n<span class="hljs-comment">// 결국은 redux 라는 것은 모든 것이 이 reducer 함수를 통해서 이루어 진다.</span>\n\n<span class="hljs-keyword">const</span> store = <span class="hljs-title function_">legacy_createStore</span>(reducer);\n<span class="hljs-comment">// Redux state 데이터 값을 저장할 stoore 를 생성한다.\\</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">onChange</span> = () =&gt; {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'there was a change on the store!\'</span>);\n};\n\n\nstore.<span class="hljs-title function_">subscribe</span>(onChange);\n<span class="hljs-comment">// subscribe는 store 안에 있는 변화를 감지해서</span>\n<span class="hljs-comment">// store 안에 있는 값이 변화하면 해당 콜백함수를 실행</span>\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span> = () =&gt; {\n&nbsp; store.<span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">ADD</span> });\n&nbsp; <span class="hljs-built_in">number</span>.<span class="hljs-property">innerText</span> = store.<span class="hljs-title function_">getState</span>();\n};\n<span class="hljs-comment">// dispatch 를 통해서 action 객체를 받고 </span>\n<span class="hljs-comment">// reducer로 그 객체 값을 전달해준다.</span>\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">hadleMinus</span> = () =&gt; {\n&nbsp; store.<span class="hljs-title function_">dispatch</span>({ <span class="hljs-attr">type</span>: <span class="hljs-variable constant_">MINUS</span> });\n&nbsp; <span class="hljs-built_in">number</span>.<span class="hljs-property">innerText</span> = store.<span class="hljs-title function_">getState</span>();\n};\n<span class="hljs-comment">// dispatch, reducer 함수 파라미터 action은</span>\n<span class="hljs-comment">// 즉 지금 이 함수는 dispatch(action);</span>\n<span class="hljs-comment">// action 객체를 담고 있는 dispatch 함수 임..</span>\n<span class="hljs-comment">// 데이터를 콜백 return을 통해서 조작하는</span>\n<span class="hljs-comment">// reducer 함수와의 소통 방법임.</span>\n\n\nadd.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">\'click\'</span>, handleAdd);\nminus.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">\'click\'</span>, hadleMinus);\n\n<span class="hljs-comment">// 간단히 정리하며 아래와 같이 redux를 정리할 수 있을 것 같다.</span>\n<span class="hljs-comment">// ✅ Store는 data를 저장하는 곳</span>\n<span class="hljs-comment">// ✅ CreateStore는 reducer를 요구함.</span>\n<span class="hljs-comment">// ✅ Reducer는 data를 modify 해주고 초기 state 값을 등록 가능</span>\n<span class="hljs-comment">// 그리고 Reducer 함수의 객체 action 그리고 이를 dispatch 함수로 받아와,</span>\n<span class="hljs-comment">// type 에 따라  state 값 업데이트 가능함!!</span>\n</pre><p><br></p><p><br></p><h2>*리액트의 useReducer hook 기능 소개</h2><p><br></p><p>리액트 여러 hooks 함수 중 Redux 기능을 해주는 useReducer라는 훅을 통해서,</p><p>본 사이트 로그인 기능을 구현했었다.  이를 자세히 살펴보자.</p><p><br></p><h3>*reducer.js</h3><pre class="ql-syntax" spellcheck="false">\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">case</span> <span class="hljs-string">"LOGIN_SUCCESS"</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">userId</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// token: action.payload.token,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">editable</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">profilePic</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">email</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">email</span>,\n&nbsp; &nbsp; &nbsp; };\n\n&nbsp; &nbsp; <span class="hljs-keyword">case</span> <span class="hljs-string">"LOGOUT"</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// token: null,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">email</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; };\n\n&nbsp; &nbsp; <span class="hljs-attr">default</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> state;\n&nbsp; }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Reducer</span>;\n\n</pre><p><br></p><p><br></p><h3>*context.js</h3><pre class="ql-syntax" spellcheck="false">\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Reducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./reducer.js\'</span>;\n<span class="hljs-keyword">import</span> { createContext, useReducer, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-keyword">const</span> initialLoginData = {\n&nbsp; <span class="hljs-attr">id</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'id\'</span>)) || <span class="hljs-literal">null</span>,\n&nbsp; <span class="hljs-attr">editable</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'editable\'</span>) || <span class="hljs-literal">null</span>,\n&nbsp; <span class="hljs-attr">profilePic</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'profilePic\'</span>) || <span class="hljs-literal">null</span>,\n&nbsp; <span class="hljs-attr">email</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'email\'</span>) || <span class="hljs-literal">null</span>,\n};\n<span class="hljs-comment">// 리액트에서 렌더링 될때마다 빈 객체만 나타나기 때문에</span>\n<span class="hljs-comment">// 로그인 될때 setItem을 통해서 localStroage에 저장된</span>\n<span class="hljs-comment">// 객체를 getItem을 통해서 가져와 넣어준다.</span>\n&nbsp;\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = <span class="hljs-title function_">createContext</span>(initialLoginData);\n<span class="hljs-comment">// 리액트에서 전역적으로 값을 관라하기 위해서 </span>\n<span class="hljs-comment">// contextAPI를 통해서 context를 생성해준다.</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ContextProvider</span> = (<span class="hljs-params">{ children }</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(<span class="hljs-title class_">Reducer</span>, initialLoginData);\n  <span class="hljs-comment">// Redux와 같이 Reducer 함수와 초기 state 값을 등록시켜준다. </span>\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'id\'</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state.<span class="hljs-property">id</span>));\n&nbsp; &nbsp; <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'editable\'</span>, state.<span class="hljs-property">editable</span>);\n&nbsp; &nbsp; <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'profilePic\'</span>, state.<span class="hljs-property">profilePic</span>);\n&nbsp; &nbsp; <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'email\'</span>, state.<span class="hljs-property">email</span>);\n&nbsp; }, [state.<span class="hljs-property">id</span>]);\n&nbsp; <span class="hljs-comment">// dispatch action 객체에서 type에 따라 가지고 왔던</span>\n&nbsp; <span class="hljs-comment">// payload 값으로 return해서 state가 업데이트 된다.</span>\n&nbsp; <span class="hljs-comment">// state.id가 업데이트 되면 로컬스토리지 또한 업데이트 시킨다.</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">value</span>=<span class="hljs-string">{{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id:</span> <span class="hljs-attr">state.id</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable:</span> <span class="hljs-attr">state.editable</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic:</span> <span class="hljs-attr">state.profilePic</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">dispatch</span>,\n&nbsp; &nbsp; &nbsp; }}\n&nbsp; &nbsp; &gt;</span>\n&nbsp; &nbsp; &nbsp; {children}\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span>\n&nbsp; );\n};\n</pre><p><br></p><p><br></p><p>리덕스 기본 함수를 배워보았다. 하지만 기존에 React에서 가지고 있는 hook인 useReducer hook 이랑 크게 차이를 못 느끼겠다.</p><p>useReducer가 Redux 보다 늦게 나왔다고 알고 있다. 아무래도  React 에서 Redux를 보고 뒤늦게 props 를 전역적으로 관리할 수 있는</p><p>useReducer라는 hook 을 뒤늦게 만들어 준 것 같다.</p><p><br></p><p>Redux를 참고해서 그런지 크게 Redux랑 useReducer랑 차이를 못 느끼겠다. </p><p>대규모 프로젝트에서는 Redux를 보통 쓰고, 소규모 프로젝트에서는 useReducer를 쓴다고 들었다.</p><p>아직은 Redux를 많이 써보지 않았지만 쓰면서 새롭게 알게 되는 것을 계속 업데이트 하겠다. </p><p><br></p><p><br></p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-04-21T09:01:56.204Z',
    updatedAt: '2022-04-21T09:01:56.204Z',
    __v: 0,
  },
  {
    _id: '62682e8bc9b9aad5e1a16fc7',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1650993448/myportfolioblogproject/qmiskqzgtdwxsmfjyujq.gif',
    title: 'Redux 데이터 보관 방법에 대한 고찰',
    text: '<p>Redux, useReducer Hook 두 기능 모두 다 배워보았지만, </p><p>결국은 같은 개념인 것 같아 여기선 일단 useReducer Hook in React  기준으로 설명을 해보겠음.</p><p><br></p><p>블로그를 만들 때  만들었던 로그인 User 데이터 보관 방법에 대한 코드에 대해서,</p><p>다시 한번 생각을 해보았다. </p><p><br></p><p><br></p><p><strong><em>*reducer.js</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Reducer</span> = (<span class="hljs-params">state, action</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">case</span> <span class="hljs-string">"LOGIN_SUCCESS"</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">userId</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// token: action.payload.token,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">editable</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">profilePic</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">email</span>: action.<span class="hljs-property">payload</span>.<span class="hljs-property">email</span>,\n&nbsp; &nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class="hljs-keyword">case</span> <span class="hljs-string">"LOGOUT"</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// token: null,</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">email</span>: <span class="hljs-literal">null</span>,\n&nbsp; &nbsp; &nbsp; };\n\n\n&nbsp; &nbsp; <span class="hljs-attr">default</span>:\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> state;\n&nbsp; }\n};\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Reducer</span>;\n</pre><p><br></p><p>기존 reducer는 바뀐 점이 없다.</p><p>아래  context.js 부분을 보안 상 이유로 조금 코드를 바꾸었다.</p><p><br></p><p><br></p><p><strong><em>*기존 context.js 코드</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { createContext, useEffect, useReducer, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Reducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./reducer.js\'</span>;\n\n<span class="hljs-keyword">const</span> initialLoginData = {\n&nbsp; <span class="hljs-attr">id</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'id\'</span>)) || <span class="hljs-literal">null</span>,\n&nbsp; <span class="hljs-attr">editable</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'editable\'</span>) || <span class="hljs-literal">null</span>,\n&nbsp; <span class="hljs-attr">profilePic</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'profilePic\'</span>) || <span class="hljs-literal">null</span>,\n &nbsp;<span class="hljs-attr">email</span>: <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'email\'</span>) || <span class="hljs-literal">null</span>,\n};\n<span class="hljs-comment">// 이곳 localStorage를 비워두면 렌더링 될때마다 null 값이 되므로,</span>\n<span class="hljs-comment">// 렌더링될 때마다 localStorage에 저장되어 있던 state 값들을 가지고 와서,</span>\n<span class="hljs-comment">// 렌더링 될 때마다 state 값이 null이 되는 것을 방지한다.</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = <span class="hljs-title function_">createContext</span>(initialLoginData);\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ContextProvider</span> = (<span class="hljs-params">{ children }</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(<span class="hljs-title class_">Reducer</span>, initialLoginData);\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp;  &nbsp;<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'id\'</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state.<span class="hljs-property">id</span>));\n&nbsp;  &nbsp;<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">"token"</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state.<span class="hljs-property">token</span>));\n&nbsp;  &nbsp;<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'editable\'</span>, state.<span class="hljs-property">editable</span>);\n&nbsp;  &nbsp;<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'profilePic\'</span>, state.<span class="hljs-property">profilePic</span>);\n&nbsp;  &nbsp;<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">\'email\'</span>, state.<span class="hljs-property">email</span>);\n&nbsp; }, [state.<span class="hljs-property">id</span>]);\n  <span class="hljs-comment">// dispatch 를 통해서 Reducer를 통해서 state 값이 업데이트 되면</span>\n  <span class="hljs-comment">// 업데이트 될때마다 localStorage에 저장한다.</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">value</span>=<span class="hljs-string">{{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id:</span> <span class="hljs-attr">state.id</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; // <span class="hljs-attr">token:</span> <span class="hljs-attr">state.token</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable:</span> <span class="hljs-attr">state.editable</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic:</span> <span class="hljs-attr">state.profilePic</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">dispatch</span>,\n&nbsp; &nbsp; &nbsp; }}\n&nbsp; &nbsp; &gt;</span>\n&nbsp; &nbsp; &nbsp; {children}\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span>\n&nbsp; );\n};\n</pre><p><br></p><p><br></p><p><strong><em>*기존 context.js 코드</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { createContext, useMemo, useReducer, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Reducer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./reducer.js\'</span>;\n\n<span class="hljs-keyword">const</span> initialLoginData = {};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Context</span> = <span class="hljs-title function_">createContext</span>(initialLoginData);\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">ContextProvider</span> = (<span class="hljs-params">{ children }</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> [state, dispatch] = <span class="hljs-title function_">useReducer</span>(<span class="hljs-title class_">Reducer</span>, initialLoginData);\n\n&nbsp; <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> state, state.<span class="hljs-property">id</span>);\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Context.Provider</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">value</span>=<span class="hljs-string">{{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">id:</span> <span class="hljs-attr">state.id</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; // <span class="hljs-attr">token:</span> <span class="hljs-attr">state.token</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">editable:</span> <span class="hljs-attr">state.editable</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">profilePic:</span> <span class="hljs-attr">state.profilePic</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">dispatch</span>,\n&nbsp; &nbsp; &nbsp; }}\n&nbsp; &nbsp; &gt;</span>\n&nbsp; &nbsp; &nbsp; {children}\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Context.Provider</span>&gt;</span>\n&nbsp; );\n};\n</pre><p><br></p><p><em>아무리 생각을 해도 localStorage에 저장하는 것은 보안상 좋지않아서&nbsp;</em></p><p><em>React Hooks 중 하나의</em><strong><em> </em></strong><strong style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"><em>useMemo</em></strong><em> 라는 것을 써서,</em></p><p><em>기존에 계산 되었던 state 값을 업데이트 되지 않는 한 메모리에 저장을 해두고,</em></p><p><em>dispatch, Reducer를 통해서 state.id가 업데이트 되면 그때 메모리에 저장된</em></p><p><em>state 값을 업데이트 한다.</em></p><p><br></p><p><em>이 방법을 쓰면 localStorage에 저장하지 않고 누구도 볼수 없는</em></p><p><em>개인 컴퓨터 메모리에 저장을 해서 보안적으로 안전하게&nbsp;</em></p><p><em>로그인 state 값을 보관하고 재활용해서 쓸수 있다.</em></p><p><em>다만 주의 할 점은 최대한 웹페이지가 refresh 되자 않게</em></p><p><em style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">client 코드 작성시 </em><strong style="background-color: rgb(230, 0, 0); color: rgb(255, 255, 0);"><em>react-router-dom의 useNavigator</em></strong><em style="background-color: rgb(230, 0, 0); color: rgb(255, 255, 0);"> </em><em style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">사용하여</em></p><p><em style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">페이지 refresh 하지 않고 이동시킨다!!</em></p><p><br></p><p><br></p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-04-26T17:40:27.438Z',
    updatedAt: '2022-04-26T17:40:27.438Z',
    __v: 0,
  },
  {
    _id: '62683490c9b9aad5e1a16fda',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1650995980/myportfolioblogproject/es9yqlmhhza4p3eiedif.gif',
    title: 'Heroku 배포 방법 정리 (NodeJS. MongoDB)',
    text: '<h1>1.React, NodeJS, MongoDB Full Stack Deployment</h1><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1650996513/myportfolioblogproject/j6dve4h4wpzgmgqbrdpd.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>먼저 헤로쿠 사이트 회원 가입을 한다 메인 언어는 NodeJS 로 설정을 해주도록 하자.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1650996531/myportfolioblogproject/tbiolfqdfot8ukz6vtcs.gif" crossorigin="anonymous"></p><p><br></p><p>그리고 Heroku 관련 설치 파일을 각자 컴퓨터 OS에 맞게 설치 해준다.</p><p><br></p><p>이제 풀스택 배포 준비를 해보자!!</p><p>React Client 프론트엔드 페이지는 netlify로 배포하고 백엔드 서버는 heroku 이렇게 따로 배포하는 방법도 있지만,</p><p>이 방법은 쉽기 때문에 heroku 하나로 client와 server 한번에 배포하는 방법에 대해서 소개를 해보겠다.</p><p><br></p><p><strong><em>1.먼저, nodeJS 서버 코드에서 포트 설정을 아래와 같이 바꾸어 주어야 한다.</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false">...\nmongoose\n&nbsp; .<span class="hljs-title function_">connect</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">MONGO_DB_URL</span>)\n&nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Mongo DB Start!\'</span>))\n&nbsp; .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err));\n\napp.<span class="hljs-title function_">listen</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">5000</span>, <span class="hljs-function">() =&gt;</span> {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Backend is running check!\'</span>);\n});\n<span class="hljs-comment">// heroku 배포시 포트 설정이 동적으로 설정되기 때문에 위와 같이 작성하여 배포 준비를 해야함!!</span>\n...\n</pre><p><br></p><p><br></p><p><strong><em>2.전체 client React 코드를 백엔드 node App 코드 안 쪽으로 위치 시킨다.</em></strong></p><p><br></p><p><strong><em>3.</em> 그리고 아래의 코드를 서버 코드 app.js에 추가시킨다.</strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { fileURLToPath } <span class="hljs-keyword">from</span> <span class="hljs-string">\'url\'</span>;\n\n<span class="hljs-keyword">const</span> __dirname = <span class="hljs-title function_">dirname</span>(<span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>));\n\napp.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">\'/client/build\'</span>)));\napp.<span class="hljs-title function_">get</span>(<span class="hljs-string">\'*\'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {\n&nbsp; res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">\'/client/build\'</span>, <span class="hljs-string">\'index.html\'</span>));\n});\n</pre><p><br></p><p><br></p><p><strong><em>4.</em> package.json에 현재 node, npm 버전, heroku-postbuild 코드를 따로 작성을 해준다.</strong></p><p><br></p><pre class="ql-syntax" spellcheck="false">...\n<span class="hljs-string">"scripts"</span>: {\n&nbsp; &nbsp; <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"start"</span>: <span class="hljs-string">"node app.js"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"heroku-postbuild"</span>: <span class="hljs-string">"cd client &amp;&amp; npm install &amp;&amp; npm run build"</span>\n},\n\n<span class="hljs-string">"engines"</span>: {\n&nbsp; &nbsp; <span class="hljs-string">"node"</span>: <span class="hljs-string">"16.14.0"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"npm"</span>: <span class="hljs-string">"8.3.1"</span>\n},\n...\n</pre><p><br></p><p><strong><em>5.</em> React Client 코드에 있는 API URL을 전부다 변경을 해준다.</strong></p><p><br></p><p><strong><em>6.</em> Heroku 프로젝트 페이지에서 환경변수(.env)를 설정을 해준다.</strong></p><p><br></p><p><br></p><p><strong><em>7.</em> 그리고 아래의 코드를 실행을 해준다.</strong></p><p><br></p><pre class="ql-syntax" spellcheck="false">heroku login\ngit init\nheroku <span class="hljs-attr">git</span>:remote -a &lt;app-name&gt;\n\ngit add .\ngit commit -am <span class="hljs-string">"my first commit"</span>\ngit push heroku master\n</pre><p><br></p><p><br></p><p><strong><em>8.</em> 배포 완료!!</strong></p><p><br></p><p><br></p><p>MySQL의 경우 향후 따로 포스트를 해보도록 하겠다!!</p><p><br></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-04-26T18:06:08.825Z',
    updatedAt: '2022-04-26T18:25:27.356Z',
    __v: 0,
  },
  {
    _id: '627657acbe167943f6948073',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1651922174/myportfolioblogproject/utpy7vhortlwrnf7eogh.gif',
    title: 'Spine 애니메이션 React에 이식하기',
    text: '<p>최근에 회사에 입사를 했는데 게임 회사여서, 디자이너 분들이 spine 프레임워크를 통해서 2d 애니메이션, 캐릭터를 디자인 하시는 것 같다.</p><p>spine 프레임워크를 통해서 만들어진 캐릭터, 애니메이션을 web에 이식할 필요성이 생겨서, 찾아보았더니 정보가 거의 없었다..</p><p>바닐라 자바스크립트 예시를 통해서 이를 리액트 코드로 모듈화해서 적용시켜보았고, 이를 메모에 남기고자 한다.</p><p>spine 데이터를 바닐라 자바스크립트로 web에 이식시키기 위해서는 spine-ts 라는 모듈을 사용을 해야만 한다.</p><p>아래의 코드를 통해서 모듈을 설치하도록 하자.</p><p><br></p><pre class="ql-syntax" spellcheck="false">npm install <span class="hljs-meta">@esotericsoftware</span>/spine-core\nnpm install <span class="hljs-meta">@esotericsoftware</span>/spine-canvas\n</pre><p><br></p><h3><br></h3><h3><strong><em> *public 폴더 안에 assets을 만들어 spine 데이터를 저장한다..</em></strong></h3><p><br></p><p>(공식 홈페이지에 있는 예시 spineboy spine 데이터를 이용해보고자 한다.)</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1651928676/myportfolioblogproject/wt0ezhdzzumsserddcfr.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><h3><strong><em>*App.js</em></strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-string">\'./App.css\'</span>\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">LoadSpineAnimation</span>, <span class="hljs-title class_">SpineCanvasRenderer</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./spine\'</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; {\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-title class_">LoadSpineAnimation</span>(\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'spineboy\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'run\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'../assets/spineboy/\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'spineboy.atlas\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'spineboy-ess.json\'</span>,\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">skeletonX</span>: <span class="hljs-number">2</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">skeletonY</span>: <span class="hljs-number">0.1</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">scale</span>: <span class="hljs-number">0.8</span>,\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; )\n\n&nbsp; &nbsp; <span class="hljs-title class_">LoadSpineAnimation</span>(\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'capsule_box\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'box_open\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'../assets/capsule_box/\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'capsule box.atlas\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'capsule box.json\'</span>,\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">skeletonX</span>: <span class="hljs-number">5</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">skeletonY</span>: <span class="hljs-number">0.3</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">scale</span>: <span class="hljs-number">0.3</span>,\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; )\n&nbsp; }, [])\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">display:</span> \'<span class="hljs-attr">flex</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">justifyContent:</span> \'<span class="hljs-attr">center</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">alignItems:</span> \'<span class="hljs-attr">center</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">height:</span> \'<span class="hljs-attr">100vh</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">position:</span> \'<span class="hljs-attr">relative</span>\',\n&nbsp; &nbsp; &nbsp; }}\n&nbsp; &nbsp; &gt;</span>\n&nbsp; &nbsp; &nbsp; {SpineCanvasRenderer(\'spineboy\', {\n&nbsp; &nbsp; &nbsp; &nbsp; width: \'5rem\',\n&nbsp; &nbsp; &nbsp; &nbsp; height: \'5rem\',\n&nbsp; &nbsp; &nbsp; &nbsp; background: \'transparent\',\n&nbsp; &nbsp; &nbsp; })}\n\n&nbsp; &nbsp; &nbsp; {SpineCanvasRenderer(\'capsule_box\', {\n&nbsp; &nbsp; &nbsp; &nbsp; width: \'20rem\',\n&nbsp; &nbsp; &nbsp; &nbsp; height: \'20rem\',\n&nbsp; &nbsp; &nbsp; &nbsp; background: \'transparent\',\n&nbsp; &nbsp; &nbsp; })}\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n&nbsp; )\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>\n</pre><p><br></p><p><br></p><p><br></p><h3><strong><em>*spine.js</em></strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> {\n&nbsp; <span class="hljs-title class_">AssetManager</span>,\n&nbsp; <span class="hljs-title class_">SkeletonRenderer</span>,\n&nbsp; <span class="hljs-title class_">AtlasAttachmentLoader</span>,\n&nbsp; <span class="hljs-title class_">SkeletonJson</span>,\n&nbsp; <span class="hljs-title class_">Skeleton</span>,\n&nbsp; <span class="hljs-title class_">AnimationStateData</span>,\n&nbsp; <span class="hljs-title class_">AnimationState</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'@esotericsoftware/spine-canvas\'</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">LoadSpineAnimation</span> = (<span class="hljs-params">\n&nbsp; spineAnimName,\n&nbsp; spineAnimDetailName,\n&nbsp; assetsLocalUrl,\n&nbsp; atlasFile,\n&nbsp; jsonFile,\n&nbsp; locationAndSizeObj,\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">let</span> lastFrameTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() / <span class="hljs-number">1000</span>\n&nbsp; <span class="hljs-keyword">let</span> canvas, context\n&nbsp; <span class="hljs-keyword">let</span> assetManager\n&nbsp; <span class="hljs-keyword">let</span> skeleton, animationState, bounds\n&nbsp; <span class="hljs-keyword">let</span> skeletonRenderer\n\n&nbsp; <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">load</span>() {\n&nbsp; &nbsp; canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`<span class="hljs-subst">${spineAnimName}</span>canvas`</span>)\n&nbsp; &nbsp; context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">\'2d\'</span>)\n&nbsp; &nbsp; skeletonRenderer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkeletonRenderer</span>(context)\n\n&nbsp; &nbsp; <span class="hljs-comment">// &nbsp; Load the assets.</span>\n&nbsp; &nbsp; assetManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssetManager</span>(assetsLocalUrl)\n&nbsp; &nbsp; assetManager.<span class="hljs-title function_">loadText</span>(jsonFile)\n&nbsp; &nbsp; assetManager.<span class="hljs-title function_">loadTextureAtlas</span>(atlasFile)\n&nbsp; &nbsp; <span class="hljs-keyword">await</span> assetManager.<span class="hljs-title function_">loadAll</span>()\n\n&nbsp; &nbsp; <span class="hljs-comment">// Create the texture atlas and skeleton data.</span>\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> atlas = assetManager.<span class="hljs-built_in">require</span>(atlasFile)\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> atlasLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtlasAttachmentLoader</span>(atlas)\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> skeletonJson = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkeletonJson</span>(atlasLoader)\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> skeletonData = skeletonJson.<span class="hljs-title function_">readSkeletonData</span>(\n&nbsp; &nbsp; &nbsp; assetManager.<span class="hljs-built_in">require</span>(jsonFile),\n&nbsp; &nbsp; )\n\n&nbsp; &nbsp; <span class="hljs-comment">// Instantiate a new skeleton based on the atlas and skeleton data.</span>\n&nbsp; &nbsp; skeleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Skeleton</span>(skeletonData)\n&nbsp; &nbsp; skeleton.<span class="hljs-title function_">setToSetupPose</span>()\n&nbsp; &nbsp; skeleton.<span class="hljs-title function_">updateWorldTransform</span>()\n&nbsp; &nbsp; bounds = skeleton.<span class="hljs-title function_">getBoundsRect</span>()\n\n&nbsp; &nbsp; <span class="hljs-comment">// Setup an animation state with a default mix of 0.2 seconds.</span>\n&nbsp; &nbsp; <span class="hljs-keyword">var</span> animationStateData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnimationStateData</span>(skeleton.<span class="hljs-property">data</span>)\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(animationStateData)\n&nbsp; &nbsp; animationStateData.<span class="hljs-property">defaultMix</span> = <span class="hljs-number">0.2</span>\n&nbsp; &nbsp; animationState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnimationState</span>(animationStateData)\n\n&nbsp; &nbsp; <span class="hljs-comment">// Set the run animation, looping.</span>\n&nbsp; &nbsp; animationState.<span class="hljs-title function_">setAnimation</span>(<span class="hljs-number">0</span>, spineAnimDetailName, <span class="hljs-literal">true</span>)\n\n&nbsp; &nbsp; <span class="hljs-comment">// Start rendering.</span>\n&nbsp; &nbsp; <span class="hljs-title function_">requestAnimationFrame</span>(render)\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>() {\n&nbsp; &nbsp; <span class="hljs-comment">// Calculate the delta time between this and the last frame in seconds.</span>\n&nbsp; &nbsp; <span class="hljs-keyword">var</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() / <span class="hljs-number">1000</span>\n&nbsp; &nbsp; <span class="hljs-keyword">var</span> delta = now - lastFrameTime\n&nbsp; &nbsp; lastFrameTime = now\n\n&nbsp; &nbsp; <span class="hljs-comment">// Resize the canvas drawing buffer if the canvas CSS width and height changed</span>\n&nbsp; &nbsp; <span class="hljs-comment">// and clear the canvas.</span>\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (\n&nbsp; &nbsp; &nbsp; canvas.<span class="hljs-property">width</span> != canvas.<span class="hljs-property">clientWidth</span> ||\n&nbsp; &nbsp; &nbsp; canvas.<span class="hljs-property">height</span> != canvas.<span class="hljs-property">clientHeight</span>\n&nbsp; &nbsp; ) {\n&nbsp; &nbsp; &nbsp; canvas.<span class="hljs-property">width</span> = canvas.<span class="hljs-property">clientWidth</span>\n&nbsp; &nbsp; &nbsp; canvas.<span class="hljs-property">height</span> = canvas.<span class="hljs-property">clientHeight</span>\n&nbsp; &nbsp; }\n&nbsp; &nbsp; context.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)\n\n&nbsp; &nbsp; <span class="hljs-comment">// Center the skeleton and resize it so it fits inside the canvas.</span>\n&nbsp; &nbsp; <span class="hljs-comment">// x축 오른쪽 방향 기준으로 skeleton.x 파라메터 값이 클수록 오른쪽으로 위치</span>\n&nbsp; &nbsp; <span class="hljs-comment">// y축 아래쪽 방향 기준으로 skeleton.y 파라메터 값이 클수록 아래로 위치</span>\n&nbsp; &nbsp; <span class="hljs-comment">// scale 값이 작을 수록 작음. 클수록 큼.</span>\n&nbsp; &nbsp; skeleton.<span class="hljs-property">x</span> = canvas.<span class="hljs-property">width</span> / locationAndSizeObj.<span class="hljs-property">skeletonX</span>\n&nbsp; &nbsp; skeleton.<span class="hljs-property">y</span> = canvas.<span class="hljs-property">height</span> - canvas.<span class="hljs-property">height</span> * locationAndSizeObj.<span class="hljs-property">skeletonY</span>\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> scale = (canvas.<span class="hljs-property">height</span> / bounds.<span class="hljs-property">height</span>) * locationAndSizeObj.<span class="hljs-property">scale</span>\n&nbsp; &nbsp; <span class="hljs-comment">// skeleton.x = canvas.width / 5</span>\n&nbsp; &nbsp; <span class="hljs-comment">// skeleton.y = canvas.height - canvas.height * 0.3</span>\n&nbsp; &nbsp; <span class="hljs-comment">// let scale = (canvas.height / bounds.height) * 0.3</span>\n&nbsp; &nbsp; skeleton.<span class="hljs-property">scaleX</span> = scale\n&nbsp; &nbsp; skeleton.<span class="hljs-property">scaleY</span> = -scale\n\n&nbsp; &nbsp; <span class="hljs-comment">// Update and apply the animation state, update the skeleton\'s</span>\n&nbsp; &nbsp; <span class="hljs-comment">// world transforms and render the skeleton.</span>\n&nbsp; &nbsp; animationState.<span class="hljs-title function_">update</span>(delta)\n&nbsp; &nbsp; animationState.<span class="hljs-title function_">apply</span>(skeleton)\n&nbsp; &nbsp; skeleton.<span class="hljs-title function_">updateWorldTransform</span>()\n&nbsp; &nbsp; skeletonRenderer.<span class="hljs-title function_">draw</span>(skeleton)\n&nbsp; &nbsp; <span class="hljs-title function_">requestAnimationFrame</span>(render)\n&nbsp; }\n\n&nbsp; <span class="hljs-title function_">load</span>()\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">SpineCanvasRenderer</span> = (<span class="hljs-params">spineAnimName, styleObj</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">return</span> <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">{spineAnimName</span> + \'<span class="hljs-attr">canvas</span>\'} <span class="hljs-attr">style</span>=<span class="hljs-string">{styleObj}</span>&gt;&lt;/<span class="hljs-name">canvas</span>&gt;</span>\n}\n</pre><p><br></p><p><br></p><p><br></p><p><br></p><h1><strong><em>이렇게 해서 리액트를 실행시키면 아래와 같은 애니메이션이 리액트 web 페이지 상에서 구현이 된다!!!</em></strong></h1><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1651922820/myportfolioblogproject/ewrlxt9dlgoiaw4lx4kg.gif" crossorigin="anonymous"></p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-05-07T11:27:40.039Z',
    updatedAt: '2022-05-09T04:06:42.103Z',
    __v: 0,
  },
  {
    _id: '628ee998556b3847bd53184b',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1653533064/myportfolioblogproject/vxn5smd79yrs5v6nrhgo.gif',
    title: 'useEffect와 useLayoutEffect의 차이점',
    text: '<p><strong class="ql-size-large">Render : Dom Tree 를 구성하기 위해 각 엘리먼트의 스타일 속성을 계산하는 과정</strong></p><p><strong class="ql-size-large">Paint : 실제 스크린에 Layout을 표시하고 업데이트 하는 과정</strong></p><p><br></p><p><br></p><h2>useEffect</h2><p><br></p><p>useEffect는 컴포넌트들이 render와 paint 된 후에 실행됩니다. 비동기적(asynchronous) 으로 실행됩니다.</p><p>paint 된 후 실행되기 때문에, useEffect 내부에 dom 에 영향을 주는 코드가 있을 경우 사용자 입장에서는</p><p>화면의 깜빡임을 보게 됨.</p><p><br></p><p><br></p><h2>useLayoutEffect</h2><p><br></p><p>useLayoutEffect 는 컴포넌트들 render 된 후 실행되며, 그 이후에 paint 가 된다.</p><p>이 작업은 동기적(synchronous) 으로 실행됨. paint 가 되기 전에 실행되기 때문에,</p><p>dom을 조작하는 코드가 존재하더라도 사용자는 깜빡임을 경험하지 않음.</p><p><br></p><p><br></p><p>*useLayoutEffect는 동기적으로 실행되고 내부 코드가 모드 실행된 후 paint 작업을 하기 때문에</p><p>코드가 복잡하고 작업이 복잡해질 경우 사용자가 layout을 보는데 시간이 오래걸린다는 단점..</p><p>그래서 기본적으로는 항상 useEffect만 사용하길 권장함..</p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Test</span> = () =&gt; {\n  <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);\n  \t\n  <span class="hljs-title function_">useLayoutEffect</span>(<span class="hljs-function">() =&gt;</span> {\n     <span class="hljs-keyword">if</span> (value === <span class="hljs-number">0</span>) {\n      \t<span class="hljs-title function_">setValue</span>(<span class="hljs-number">10</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">200</span>);\n     }\n  }, [value]);\n  \n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'render\'</span>, value);\n        \t\n  <span class="hljs-keyword">return</span> (\n     <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setValue(0)}&gt;\n        value: {value}\n     <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  );\n};\n</pre><p><br></p><p><br></p><p>위와 같이 화면이 깜빡이는 상황일 때, 예를 들어서 위와 같이 state가 존재하며,</p><p>해당 state 조건에 따라 첫 painting 시 다르게 렌더링 되어야 할때는 useEffect 사용시,</p><p>처음에 0이 보여지고 이후에 re-rendering 되며 화면이 깜빡거려지기 때문에</p><p>useLayoutEffect를 사용하는 것이 바람직함..</p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-05-26T02:44:40.089Z',
    updatedAt: '2022-05-26T04:05:54.847Z',
    __v: 0,
  },
  {
    _id: '629262daf2d0ebb9af6a3ab8',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1653759498/myportfolioblogproject/efk9d4jra3q70ffhpqqd.gif',
    title: '리액트 18버전 및 유용한 Hooks 간단 소개',
    text: '<p><em>리액트 버전 18 알파가 출시되고 나서 프론트엔드 성능 향상에 유용한 Hooks를 정리 및</em></p><p><em>간략하게 나마 변경 사항을 기록할 필요가 있을 것 같아 기록을 해둔다. </em></p><h3><br></h3><p><br></p><h3>1. Auto Batch 기능 확립!!</h3><p><br></p><p>*기존 React : state1변경 - 재렌더링 - state2변경 - 재렌더링</p><p>*18버전 React: state1변경 - state2변경 - 재렌더링</p><p><br></p><p><em>사실 이 부분은 리액트 17버전에서도 도입이 되어있던 기능이었지만,</em></p><p><em>어떤 에러에서 인지는 모르겠지만 모든 부분에서 Auto Batch 기능이 수행이 되지 않던 것을</em></p><p><em>해결하고 확립한 것!! </em></p><p><br></p><p><br></p><h3>2. 성능 향상에 유용한 Hooks!!</h3><p><br></p><p><em>브라우저는 멀티쓰레드가 아니라 싱글쓰레드로 구동을 하고, </em></p><p><em>오로지 싱글쓰레드로만 동시작업을 처리하려고 하기 때문에,</em></p><p><em>브라우저 상 동시작업시 성능 이슈가 있어왔던 것임.</em></p><p><br></p><p>그래서 React 18 버전부터 도입된 useTransition, useDeferredValue 이런 Hooks들 모두</p><p>state 값 변경에 따른 React Dom 재렌더링 이슈를 해결하기 위한 Hooks들이다.</p><p>state 값 변경에 따라 React Dom 이 재렌더링 됨으로 문제가 되는 state 값 변경코드 시작 시점을</p><p>뒤로 미뤄줌으로써 성능향상을 일으킨다. (다시 말하지만 브라우저는 싱글쓰레드 기반이다..)</p><p><br></p><p>즉, 아래코드 예시로 들면,</p><p><br></p><p><strong><em>*e.target.value를 input 태그 안에 보여주어야 한다.</em></strong></p><p><strong><em>*state 값 변경에 따른 div 태그를 10000개 만들어야 한다.</em></strong></p><p><br></p><p>이거를 동시에 멀티쓰레드가 아니라 싱글쓰레드로만 처리하려고 하니 문제가 발생!</p><p>그래서 <strong><em>state 값 변경에 따라 React Dom이 재렌더링 됨으로...</em></strong></p><p><strong><em>state 값 변경하는 코드 실행시점을 뒤로 늦춰주어서</em></strong> 싱글쓰레드가 효율적으로</p><p>브라우저가 구동할 수 있도록 도움을 주는 역할을 함.</p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>(useTransition, useDeferredValue)</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-string">\'./App.css\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useTransition, useDeferredValue } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-keyword">let</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10000</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = (<span class="hljs-params">props</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">let</span> [name, setName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">\'\'</span>);\n&nbsp; <span class="hljs-keyword">let</span> [isPending, startTransition] = <span class="hljs-title function_">useTransition</span>();\n&nbsp; <span class="hljs-comment">// useTransition 느린 컴포넌트 성능 향상 기능!!</span>\n&nbsp; <span class="hljs-comment">// 브라우저는 single-threaded 기반이라서 한번에 한가지 작업만 가능하다.</span>\n&nbsp; <span class="hljs-comment">// 그래서 이 코드 경우 브라우저가 순차적으로 해야할 일은 아래 2가지이다.</span>\n&nbsp; <span class="hljs-comment">// 1. e.target.value를 &lt;input/&gt;에 보여주기</span>\n&nbsp; <span class="hljs-comment">// 2. &lt;div&gt; x 10000 만들기</span>\n&nbsp; <span class="hljs-comment">// 이거를 동시에 멀리쓰레드가 아니라 싱글쓰레드로만 처리를 해야하기 때문에 성능저하 발생!</span>\n&nbsp; <span class="hljs-comment">// 근데 startTransition 을 쓰면 콜백에 감싸진 코드이행 시작을 뒤로 늦춰줌으로써 성능향상 시킴!!</span>\n&nbsp; <span class="hljs-comment">// isPending은 startTransition이 처리 중일때 true가 되는 변수임!</span>\n\n  <span class="hljs-keyword">let</span> state = <span class="hljs-title function_">useDeferredValue</span>(name);\n&nbsp; <span class="hljs-comment">// useDeferredValue 역시 startTransition과 같이 state 값을 넣으면</span>\n&nbsp; <span class="hljs-comment">// 그 state 값 변동사항이 생기면 코드 이행 시작을 뒤로 늦춰줌으로써 성능향상 시킴!! 똑같음..</span>\n&nbsp; \n  <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'App\'</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; startTransition(() =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setName(e.target.value);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; &nbsp; }}\n&nbsp; &nbsp; &nbsp; /&gt;\n&nbsp; &nbsp; &nbsp; {isPending\n&nbsp; &nbsp; &nbsp; &nbsp; ? \'로딩중\'\n&nbsp; &nbsp; &nbsp; &nbsp; : a.map(() =&gt; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>{name}<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })}\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n\n</pre>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-05-28T17:58:50.565Z',
    updatedAt: '2022-05-28T18:00:21.703Z',
    __v: 0,
  },
  {
    _id: '62a6b5a8c024c40365a038da',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1655079663/myportfolioblogproject/syosqdpwc6wzk2yqcvwd.gif',
    title: '새로운 CSS 기능 정리 (2022 구글 I/O)',
    text: '<p>2022년 하반기까지 개발 완료 및 브라우저 호환</p><p>적용 예정인 CSS 새로운 기능 7가지를 기록해두고자 한다.</p><p><br></p><p><strong style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"><em>(출처 : https://www.youtube.com/watch?v=jr9imvgVRJM&amp;t=361s) </em></strong></p><p><strong style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"><em>Ellie Dream Coding Channel on Youtube</em></strong></p><h3><br></h3><p><strong><em>1.Cascade Layers</em></strong></p><p><br></p><p>CSS 적용 우선순위 선정 용이하게 도움을 주는 기능</p><p><br></p><ul><li><em>레이어의 순서를 정한다 (우선 순위에 따라..)</em></li><li><em>각 레이어 별로 스타일을 해준다.</em></li><li><em>높은 우선순위의 레이어가 이긴다!!</em></li></ul><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">/* establish a layer order up-front, from lowest to highest priority */</span>\n<span class="hljs-keyword">@layer</span> reset, defaults, patterns, components, utilities, overrides;\n\n<span class="hljs-comment">/* import stylesheets into a layer (dot syntax represents nesting) */</span>\n<span class="hljs-keyword">@import</span> url(<span class="hljs-string">\'framework.css\'</span>) layer(components.framework);\n\n<span class="hljs-comment">/* add styles to layers */</span>\n<span class="hljs-keyword">@layer</span> utilities {\n  <span class="hljs-comment">/* high layer priority, despite low specificity */</span>\n  [data-color=<span class="hljs-string">\'brand\'</span>] { \n    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--brand, rebeccapurple);\n  }\n}\n\n<span class="hljs-keyword">@layer</span> defaults {\n  <span class="hljs-comment">/* higher specificity, but lower layer priority */</span>\n  a:any-link { <span class="hljs-attribute">color</span>: maroon; }\n}\n\n<span class="hljs-comment">/* un-layered styles have the highest priority */</span>\na {\n  <span class="hljs-attribute">color</span>: mediumvioletred;\n}\n</pre><p><br></p><p><br></p><p><br></p><h3><strong><em>2. @container 쿼리</em></strong></h3><p><br></p><p>요소가 들어있는 부모 컨테이너 사이즈를 기반으로 해서</p><p>반응적으로 디자인 할 수 있음..</p><p><br></p><p>자식 박스가 부모 박스에게 사이즈가 어떤지 질의를 하기 때문에</p><p>쿼리가 붙음..</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">/* container query card-holder 라는 이름으로 설정 */</span>\n.card_holder {\n  container-type: inline-size;\n  container-name: card-holder \n}\n\n.card {\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">flex-direction</span>: row;\n}\n\n<span class="hljs-comment">/* 부모 박스인 .card_holder 사이즈가 200px 보다 작아지면 */</span>\n<span class="hljs-comment">/* 자식 박스의 flex-dirction 을 column 으로 바꾸어 준다. */</span>\n<span class="hljs-keyword">@container</span> card-holder (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">200px</span>) {\n  .card {\n    <span class="hljs-attribute">flex-direction</span>: column;\n  }\n}\n</pre><p><br></p><p><br></p><p><br></p><h3><strong><em>3. accent-color</em></strong></h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1655090489/myportfolioblogproject/bg9q29ajnfnygjraipuc.gif" crossorigin="anonymous"></p><p><br></p><p>컴포넌트가 위치한 배경 색상에 따라서 그와 대비되는</p><p>색상을 자동으로 스타일링 해줌..</p><p>기존에는 일일이 스타일링을 개별적으로 해줬어야 했는데,</p><p>편리해졌음..</p><p><br></p><p><strong><em>*index.html</em></strong></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;&lt;<span class="hljs-name">b</span>&gt;</span>Accent<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> Color<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Tint built-in HTML elements<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>\n\n\n<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>\n&nbsp; Checkbox\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">checked</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n\n\n<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>\n&nbsp; Radio Buttons\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"accented-demo"</span> <span class="hljs-attr">checked</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"accented-demo"</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"accented-demo"</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n\n\n<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>\n&nbsp; Range Slider\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"range"</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n\n\n<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>\n&nbsp; Progress element\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">progress</span> <span class="hljs-attr">max</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"50"</span>&gt;</span>50%<span class="hljs-tag">&lt;/<span class="hljs-name">progress</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n</pre><p><br></p><p><br></p><p><strong><em>*style.css</em></strong></p><pre class="ql-syntax" spellcheck="false">:root {\n&nbsp; accent-<span class="hljs-attribute">color</span>: gray;\n&nbsp; <span class="hljs-attribute">background</span>: black;\n&nbsp; <span class="hljs-attribute">color</span>: white;\n}\n\n<span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) {\n&nbsp; :root {\n&nbsp; &nbsp; accent-<span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">328</span> <span class="hljs-number">100%</span> <span class="hljs-number">65%</span>);\n&nbsp; }\n}\n\nlabel {\n&nbsp; <span class="hljs-attribute">display</span>: flex;\n&nbsp; <span class="hljs-attribute">align-items</span>: center;\n&nbsp; <span class="hljs-attribute">justify-content</span>: space-between;\n&nbsp; <span class="hljs-attribute">gap</span>: <span class="hljs-number">4rem</span>;\n}\n\nb {\n&nbsp; <span class="hljs-attribute">color</span>: deeppink;\n}\n\nfieldset {\n&nbsp; <span class="hljs-attribute">border</span>: none;\n&nbsp; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;\n}\n\n* {\n&nbsp; <span class="hljs-attribute">box-sizing</span>: border-box;\n&nbsp; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;\n}\n\nhtml {\n&nbsp; <span class="hljs-attribute">block-size</span>: <span class="hljs-number">100%</span>;\n&nbsp; <span class="hljs-attribute">color</span>-scheme: light dark;\n}\n\nbody {\n&nbsp; <span class="hljs-attribute">min-block-size</span>: <span class="hljs-number">100%</span>;\n&nbsp; <span class="hljs-attribute">font-family</span>: system-ui, sans-serif;\n&nbsp;&nbsp;\n&nbsp; <span class="hljs-attribute">display</span>: grid;\n&nbsp; place-<span class="hljs-attribute">content</span>: center;\n&nbsp; <span class="hljs-attribute">gap</span>: <span class="hljs-number">2rem</span>;\n}\n</pre><p><br></p><p><br></p><p><br></p><h3><strong><em>4. color-contrast</em></strong></h3><p><br></p><p>배경색에 따라서 그와 대조되는 색상을</p><p>우리가 지정된 범위 내에서 자동적으로 골라줌</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">color</span>: <span class="hljs-built_in">color-contrast</span>(wheat vs tan, sienna, <span class="hljs-number">#d2691e</span>);\n<span class="hljs-attribute">color</span>: <span class="hljs-built_in">color-contrast</span>(<span class="hljs-number">#008080</span> vs olive, <span class="hljs-built_in">var</span>(--myColor), <span class="hljs-number">#d2691e</span>);\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1655092139/myportfolioblogproject/ciymqzmjdjigrgg5frgr.gif" crossorigin="anonymous"></p><p><br></p><p>이런 식으로...</p><p><br></p><p><br></p><p><br></p><h3><strong><em>5. @nest</em></strong></h3><p><br></p><p>이게 나온다면 앞으로 SCSS, SASS 등 CSS 전처리기 사용할 필요가 없어짐..</p><p><br></p><p>* 기존 CSS</p><pre class="ql-syntax" spellcheck="false">article {\n  <span class="hljs-attribute">color</span>: darkgray;\n}\n\narticle &gt; a {\n  <span class="hljs-attribute">color</span>: hotpink;\n}\n\narticle &gt; h1 {\n  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;\n}\n</pre><p><br></p><p><br></p><p>* 앞으로 나올 CSS의 @nest 기능</p><pre class="ql-syntax" spellcheck="false">article {\n  <span class="hljs-attribute">color</span>: darkgray;\n\n  &amp; &gt; a {\n    <span class="hljs-attribute">color</span>: hotpink;\n  }\n\n  &amp; &gt; h1 { \n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;\n  }\n}\n</pre><p><br></p><p><br></p><p><br></p><h3><strong><em>6. @scope</em></strong></h3><p><br></p><p>CSS 스타일링 할때 다른 모듈 컴포넌트와 충돌 방지하게끔 하는 기능..</p><p>(기존의 전처리기 Post CSS 와 기능적으로 똑같은 역할 수행)</p><p>마찬가지로 이게 등장하고 브라우저 호환성이 업데이트 되면,</p><p>Post CSS 사용할 필요 없어짐.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">@scope</span> (.media) {\n  img {\n    <span class="hljs-attribute">border</span>: red;\n  }\n\n  p {\n   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.75rem</span>;\n  }\n\n  .title {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2rem</span>;\n  }\n}\n\n\n<span class="hljs-keyword">@scope</span> (.card) {\n  img {\n    <span class="hljs-attribute">border</span>: none;\n  }\n\n  p {\n   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.8rem</span>;\n  }\n\n  .title {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5rem</span>;\n  }\n}\n</pre><p><br></p><p><br></p><p><br></p><h3><strong><em>7. :has()</em></strong></h3><h3><br></h3><p>지정 요소 갖는 모든 요소 선택.</p><p>jQuery의 :has() 대응해서 도입 예정인 CSS 가상클래스.</p><p>아직까지는 브라우저 지원 하지는 않지만 향후에 지원 예정</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">/* 자식 요소로 img 갖는 모든 a 태그 */</span>\na:has(&gt; img)\n\n<span class="hljs-comment">/* 바로 뒤에 p 요소가 있는 모든 h1 태그 */</span>\nh1:has(+ p)\n</pre><p><strong><em> </em></strong></p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-06-13T03:57:28.190Z',
    updatedAt: '2022-06-14T12:32:30.745Z',
    __v: 0,
  },
  {
    _id: '62a8290a8927f5f5d86c97e7',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1655187495/myportfolioblogproject/rzhkimiunmt5vetxe9rw.gif',
    title: '자바스크립트 배열 APIs 정리 (복습)',
    text: '<p><strong><em>자바스크립트 여러 유용한 배열 APIs 있지만,</em></strong></p><p><strong><em>공부를 하고 일을 하면서 있으면서도,</em></strong></p><p><strong><em>배웠던 것을 제대로 써먹지 못했던 것 같아</em></strong></p><p><strong><em>복습 겸 기록 겸 정리해 보려고 한다.</em></strong></p><p><br></p><p><br></p><p><br></p><h3><strong>*기본 배열 APIs</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">\'use strict\'</span>;\n\n<span class="hljs-comment">// 1. 선언</span>\n<span class="hljs-keyword">const</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();\n<span class="hljs-keyword">const</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];\n\n\n<span class="hljs-comment">// 2. index 포지션</span>\n<span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">\'사과\'</span>, <span class="hljs-string">\'바나나\'</span>];\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits.<span class="hljs-property">length</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits[<span class="hljs-number">0</span>]);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits[<span class="hljs-number">1</span>]);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits[<span class="hljs-number">2</span>]);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits[fruits.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);\n\n\n<span class="hljs-comment">// 3. 각종 for문</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>();\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; fruits.<span class="hljs-property">length</span>; i++) {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits[i]);\n}\n\n\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fruit <span class="hljs-keyword">of</span> fruits) {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruit);\n}\n\n\nfruits.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">fruit, index, array</span>) {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruit, index, array);\n});\n\n\nfruits.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fruit, index</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruit, index));\n\n\n<span class="hljs-comment">// 5. push, pop, unshift, shift, splice, concat, includes, indexOf, lastIndexOf</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>();\n<span class="hljs-comment">// * push 새로운 아이템 배열 맨끝에 추가</span>\nfruits.<span class="hljs-title function_">push</span>(<span class="hljs-string">\'딸기\'</span>, <span class="hljs-string">\'복숭아\'</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n\n\n<span class="hljs-comment">// * pop 끝에서부터 배열 아이템을 지운다</span>\nfruits.<span class="hljs-title function_">pop</span>();\nfruits.<span class="hljs-title function_">pop</span>();\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n\n\n<span class="hljs-comment">// * unshift 배열 앞쪽부터 아이템 추가</span>\nfruits.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">\'딸기\'</span>, <span class="hljs-string">\'레몬\'</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n\n\n<span class="hljs-comment">// * shift 배열 앞쪽 아이템부터 지움</span>\nfruits.<span class="hljs-title function_">shift</span>();\nfruits.<span class="hljs-title function_">shift</span>();\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n\n\n<span class="hljs-comment">// * splice 인덱스 사이의 배열 아이템 제거</span>\n<span class="hljs-comment">// * splice 의미가 중간을 끊어서 두 줄을 엮는다는 의미 그대로임</span>\nfruits.<span class="hljs-title function_">push</span>(<span class="hljs-string">\'딸기\'</span>, <span class="hljs-string">\'복숭아\'</span>, <span class="hljs-string">\'레몬\'</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\nfruits.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 시작하는 인덱스부터 1개만 지울 것!!</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\nfruits.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">\'사과\'</span>, <span class="hljs-string">\'수박\'</span>); <span class="hljs-comment">// 시작하는 인덱스부터 1개만 지울 것!! 그리고 "사과", "수박" 배열 삭제된 자리에 추가</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n\n\n<span class="hljs-comment">// * concat 두 배열 합치기</span>\n<span class="hljs-keyword">const</span> fruits2 = [<span class="hljs-string">\'코코아\'</span>, <span class="hljs-string">\'망고\'</span>];\n<span class="hljs-keyword">const</span> newFruits = fruits.<span class="hljs-title function_">concat</span>(fruits2);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newFruits);\n\n\n<span class="hljs-comment">// * includes, indexOf, lastIndexOf</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>();\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits);\n<span class="hljs-comment">// indexOf</span>\n<span class="hljs-comment">// indexOf 찾고자 하는 값의 첫 배열 인덱스 값</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'사과\'</span>));\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'수박\'</span>));\n<span class="hljs-comment">// includes</span>\n<span class="hljs-comment">// 배열에 찾고자 하는 값이 그 배열에 있다면 true,</span>\n<span class="hljs-comment">// 아니면 false</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits.<span class="hljs-title function_">includes</span>(<span class="hljs-string">\'코코아\'</span>));\n<span class="hljs-comment">// lastIndexOf 찾고자 하는 값의 마지막 배열 인덱스 값</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruits.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">\'사과\'</span>));\n</pre><p><br></p><p><br></p><p><br></p><h3><strong>*응용 배열 APIs</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">\'use strict\'</span>;\n\n<span class="hljs-comment">// Q1. 배열로 문자열 만들기</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">\'apple\'</span>, <span class="hljs-string">\'banana\'</span>, <span class="hljs-string">\'orange\'</span>];\n&nbsp; <span class="hljs-keyword">const</span> result = fruits.<span class="hljs-title function_">join</span>(<span class="hljs-string">\'|\'</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q2. 문자열을 분리해서 배열 만들기</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> fruits = <span class="hljs-string">\'사과, 키위, 바나나, 체리\'</span>;\n&nbsp; <span class="hljs-keyword">const</span> result = fruits.<span class="hljs-title function_">split</span>(<span class="hljs-string">\',\'</span>, <span class="hljs-number">2</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q3. 기존 배열 값 또한 reverse 시킨다</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n&nbsp; <span class="hljs-keyword">const</span> result = array.<span class="hljs-title function_">reverse</span>();\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q4. 배열에서 원하는 부분만 return해서 받오고 쓰는 slice</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];\n&nbsp; <span class="hljs-comment">// const result = array.splice(0, 2);</span>\n&nbsp; <span class="hljs-comment">// splice 배열 자체를 수정하는 것임</span>\n&nbsp; <span class="hljs-comment">// splice 첫번째 인자값은 시작하는 index 값,</span>\n&nbsp; <span class="hljs-comment">// splice 두번째 인자값은 첫번째 index 값에서 몇개 자를 것인지 결정</span>\n&nbsp; <span class="hljs-keyword">const</span> result = array.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);\n&nbsp; <span class="hljs-comment">// slice 배열 부분을 자르는 것임.. 의미 그대로..</span>\n&nbsp; <span class="hljs-comment">// slice &lt;=, &lt;</span>\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> {\n&nbsp; <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, enrolled, score</span>) {\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">enrolled</span> = enrolled;\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> = score;\n&nbsp; }\n}\n\n\n<span class="hljs-keyword">const</span> students = [\n&nbsp; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">\'A\'</span>, <span class="hljs-number">29</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">45</span>),\n&nbsp; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">\'B\'</span>, <span class="hljs-number">28</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">80</span>),\n&nbsp; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">\'C\'</span>, <span class="hljs-number">30</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">90</span>),\n&nbsp; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">\'D\'</span>, <span class="hljs-number">40</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">66</span>),\n&nbsp; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">\'E\'</span>, <span class="hljs-number">18</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">88</span>),\n];\n\n\n<span class="hljs-comment">// Q5. 90점인 학생을 찾아라</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> result = students.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">score</span> === <span class="hljs-number">90</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q6. 등록된 학생들만 찾아라</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> result = students.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">enrolled</span> === <span class="hljs-literal">true</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q7. 학생들 점수만 뽑아내라</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> result = students.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">score</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q8. 전체 학생 중에 50점 이하 학생들이 있는지 첵크해라</span>\n{\n&nbsp; <span class="hljs-comment">// 일부 50점 이하가 있으면 true</span>\n&nbsp; <span class="hljs-keyword">const</span> result = students.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">score</span> &lt;= <span class="hljs-number">50</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n\n\n&nbsp; <span class="hljs-comment">// 모두 50점 이하면 true</span>\n&nbsp; <span class="hljs-keyword">const</span> result2 = students.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">score</span> &lt;= <span class="hljs-number">50</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2);\n}\n\n\n<span class="hljs-comment">// Q9. 학생들 평균 점수를 구하라</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> result = students.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, curr</span>) =&gt;</span> prev + curr.<span class="hljs-property">score</span>, <span class="hljs-number">0</span>);\n&nbsp; <span class="hljs-comment">// return한 값이 prev 첫번째 인자값으로 넘김</span>\n&nbsp; <span class="hljs-comment">// 두번째 인자값은 초기값임.</span>\n&nbsp; <span class="hljs-comment">// 배열을 점점 줄여가면서 계산을 해서 reduce란 이름이 붙은거 같음</span>\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result / students.<span class="hljs-property">length</span>);\n}\n\n\n<span class="hljs-comment">// Q10. 배열 안에 점수를 뽑아서 문자열로 만들어라</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> result = students.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">score</span>).<span class="hljs-title function_">join</span>();\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n\n\n<span class="hljs-comment">// Q11. 배열 안의 점수를 오름차순으로 정렬하고 문자열로 만들어라</span>\n{\n&nbsp; <span class="hljs-keyword">const</span> result = students\n&nbsp; &nbsp; .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">student</span>) =&gt;</span> student.<span class="hljs-property">score</span>)\n&nbsp; &nbsp; .<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b)\n&nbsp; &nbsp; .<span class="hljs-title function_">join</span>();\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n}\n</pre><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">(출처)</strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">https://www.youtube.com/watch?v=yOdAVDuHUKQ</strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">https://www.youtube.com/watch?v=3CUjtKJ7PJg&amp;t=1856s</strong></p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-06-14T06:22:02.621Z',
    updatedAt: '2022-06-14T06:23:46.134Z',
    __v: 0,
  },
  {
    _id: '62caf97f14cb58a38a016d1e',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1657468776/myportfolioblogproject/oz7wdjdjsva1ju3akkry.gif',
    title: 'YBM 그랜드 슬래머 달성기',
    text: '<p><br></p><p><span class="ql-size-large">2년 전에 그랜드 슬래머 달성하고 지금에서야 소개 겸 후기 쓰게된다.</span></p><p><span class="ql-size-large">추후에 토익공부 팁이나 전반적인 영어공부 팁을 공유해볼 예정임.</span></p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1657468800/myportfolioblogproject/z4yctp0inke8uigxgual.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><span class="ql-size-large">아래와 같이 그랜드 슬래머 현황 확인 페이지에서 아래와 같이 확인 가능하며,</span></p><p><span class="ql-size-large">모든 목표 점수 달성시 밑의 버튼을 눌러서 신청이 가능해진다. </span></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1657468817/myportfolioblogproject/omdfpl2bcncpqgh4adis.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><span class="ql-size-large">﻿그리고 다음 페이지에서 주소를 입력하고, 하면 아래와 같이 신청일이 뜬다.</span></p><p><span class="ql-size-large">그리고 발송이 완료되면 발송완료가 뜨게된다.</span></p><p><span class="ql-size-large">우편은 면대면 본인 확인이 필수임 등기로 오며,</span></p><p><span class="ql-size-large">발송완료 뜬지 한 2주 뒤에 온 기억이 있다.</span></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1657468829/myportfolioblogproject/kyn4giubxvaabexrynmi.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><span class="ql-size-large">인증서는 아래와 같이 생김!!!</span></p><p><span class="ql-size-large">쨔~~쨘!!~~~!!</span></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1657468971/myportfolioblogproject/a8u4nekwb3y0dezynbdc.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-07-10T16:08:31.426Z',
    updatedAt: '2022-07-10T16:08:31.426Z',
    __v: 0,
  },
  {
    _id: '62d28e090ca43fe46228d200',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1657964852/myportfolioblogproject/ywtiy1i8yvoeziz2zir0.gif',
    title: 'NodeJS (Express 서버) + Typescript  Heroku 배포 방법',
    text: '<h2>*<span style="color: var(--color-fg-default);">package.json</span></h2><p><br></p><p>아래와 같이 설정을 해준다.</p><p>heroku는 devdependency를 인식하지 못해서 에러가 발생하기 때문에</p><p>전부 dependency로 옮겨주어서 재설치 해준다.</p><p>그리고 글로벌로 typescrip, ts-node를 설치 해주었다고 할지라도,</p><p>프로젝트 내부적으로도 설치를 해주어야 한다.</p><p><br></p><p>"dev" 는 npm run dev 로 콘솔 실행시 로컬 상으로 서버 구동할 수 있도록 설정.</p><p>"postinstall" 설정을 통해서 서버 배포 전 npm run build 가 진행되도록 하며,</p><p>"build" 설정을 해준다. 보통 tsc 만 입력하여 타입스크립트 파일이 자바스크립트로 컴파일 되게 하며,</p><p>만약 "build" 설정 tsc 만으로 tsc not found module 에러가 발생한다면,</p><p>아래와 같이 npx tsc app.ts 로 npx 가 강제적으로 실행하게끔 한다.</p><p><br></p><p>그리고 "start" 의 node app.js 로 build 후 컴파일된 app.js를 실행하게끔 한다.</p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false">{\n\t  <span class="hljs-string">"name"</span>: <span class="hljs-string">"ecommerce"</span>,\n\t  <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,\n\t  <span class="hljs-string">"main"</span>: <span class="hljs-string">"app.js"</span>,\n\t  <span class="hljs-string">"type"</span>: <span class="hljs-string">"commonjs"</span>,\n\t  <span class="hljs-string">"scripts"</span>: {\n\t    <span class="hljs-string">"start"</span>: <span class="hljs-string">"node app.js"</span>,\n\t    <span class="hljs-string">"build"</span>: <span class="hljs-string">"npx tsc app.ts"</span>,\n\t    <span class="hljs-string">"postinstall"</span>: <span class="hljs-string">"npm run build"</span>,\n\t    <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span>,\n\t    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"concurrently \\"nodemon ./dist/app.js\\" \\"tsc -w\\""</span>\n\t  },\n\t  <span class="hljs-string">"engines"</span>: {\n\t    <span class="hljs-string">"node"</span>: <span class="hljs-string">"16.14.0"</span>,\n\t    <span class="hljs-string">"npm"</span>: <span class="hljs-string">"8.3.1"</span>\n\t  },\n\t  <span class="hljs-string">"author"</span>: <span class="hljs-string">""</span>,\n\t  <span class="hljs-string">"license"</span>: <span class="hljs-string">"ISC"</span>,\n\t  <span class="hljs-string">"description"</span>: <span class="hljs-string">""</span>,\n\t  <span class="hljs-string">"dependencies"</span>: {\n\t    <span class="hljs-string">"@types/bcryptjs"</span>: <span class="hljs-string">"^2.4.2"</span>,\n\t    <span class="hljs-string">"@types/cookie-parser"</span>: <span class="hljs-string">"^1.4.3"</span>,\n\t    <span class="hljs-string">"@types/cors"</span>: <span class="hljs-string">"^2.8.12"</span>,\n\t    <span class="hljs-string">"@types/crypto-js"</span>: <span class="hljs-string">"^4.1.1"</span>,\n\t    <span class="hljs-string">"@types/express"</span>: <span class="hljs-string">"^4.17.13"</span>,\n\t    <span class="hljs-string">"@types/jsonwebtoken"</span>: <span class="hljs-string">"^8.5.8"</span>,\n\t    <span class="hljs-string">"@types/morgan"</span>: <span class="hljs-string">"^1.9.3"</span>,\n\t    <span class="hljs-string">"@types/node"</span>: <span class="hljs-string">"^18.0.4"</span>,\n\t    <span class="hljs-string">"@types/nodemon"</span>: <span class="hljs-string">"^1.19.1"</span>,\n\t    <span class="hljs-string">"bcryptjs"</span>: <span class="hljs-string">"^2.4.3"</span>,\n\t    <span class="hljs-string">"concurrently"</span>: <span class="hljs-string">"^7.2.2"</span>,\n\t    <span class="hljs-string">"cookie-parser"</span>: <span class="hljs-string">"^1.4.6"</span>,\n\t    <span class="hljs-string">"cors"</span>: <span class="hljs-string">"^2.8.5"</span>,\n\t    <span class="hljs-string">"crypto-js"</span>: <span class="hljs-string">"^4.1.1"</span>,\n\t    <span class="hljs-string">"dotenv"</span>: <span class="hljs-string">"^16.0.1"</span>,\n\t    <span class="hljs-string">"express"</span>: <span class="hljs-string">"^4.18.1"</span>,\n\t    <span class="hljs-string">"express-async-errors"</span>: <span class="hljs-string">"^3.1.1"</span>,\n\t    <span class="hljs-string">"helmet"</span>: <span class="hljs-string">"^5.1.0"</span>,\n\t    <span class="hljs-string">"jsonwebtoken"</span>: <span class="hljs-string">"^8.5.1"</span>,\n\t    <span class="hljs-string">"mongoose"</span>: <span class="hljs-string">"^6.4.4"</span>,\n\t    <span class="hljs-string">"morgan"</span>: <span class="hljs-string">"^1.10.0"</span>,\n\t    <span class="hljs-string">"nodemon"</span>: <span class="hljs-string">"^2.0.19"</span>,\n\t    <span class="hljs-string">"stripe"</span>: <span class="hljs-string">"^9.10.0"</span>,\n\t    <span class="hljs-string">"ts-node"</span>: <span class="hljs-string">"^10.9.1"</span>,\n\t    <span class="hljs-string">"typescript"</span>: <span class="hljs-string">"^4.7.4"</span>\n\t  }\n\t}\n</pre><p><br></p><p><br></p><h3>*Procfile</h3><p><br></p><p>프로젝트 최상위 root 위치에 Procfile 을 설정해주어야 한다.</p><p>Heroku 서버가 node 실행 위치를 찾을 수 있게끔 아래와 같이 설정.</p><p>주의 사항은 반드시 프로젝트 최상위 위치에 Procfile을 만들어야 하며,</p><p>그리고 web : node app.js ~ 이렇게 띄어서 쓰면 안되고,</p><p>web: node app.js 이렇게 붙여서 써야한다.</p><p>아니면 에러가 발생함.</p><p><br></p><pre class="ql-syntax" spellcheck="false">web: node app.js\n</pre><p><br></p><p><br></p><h3>*import 방법 바꿔주기</h3><p><br></p><p>타입스크립트 node express 서버 배포시 ES6 문법인 import 가 먹히지가 않음.</p><p>순수 자바스크립트 배포는 문제가 없는 것으로 봐선,</p><p>관련 타입이 제대로 정의가 안되어 있어서 발생하는 문제인듯 하다.</p><p>그래서 ES6 문법인 import 를 쓰는 대신,</p><p>require를 써준다.</p><p><br></p><p>그리고 필요한 모듈내의 메소드 함수는 되도록 { 메소드함수 이름 },</p><p>이런 형식으로 임포트해서 써주길 바람..</p><p><br></p><pre class="ql-syntax" spellcheck="false">...\n<span class="hljs-comment">// import * as dotenv from \'dotenv\';</span>\n<span class="hljs-keyword">const</span> dotenv = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'dotenv\'</span>);\n<span class="hljs-comment">// import * as express from \'express\';</span>\n<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'express\'</span>);\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">NextFunction</span>, <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-comment">// import * as helmet from \'helmet\';</span>\n<span class="hljs-keyword">const</span> helmet = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'helmet\'</span>);\n<span class="hljs-comment">// import * as cors from \'cors\';</span>\n<span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'cors\'</span>);\n<span class="hljs-comment">// import * as morgan from \'morgan\';</span>\n<span class="hljs-keyword">const</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'morgan\'</span>);\n<span class="hljs-keyword">import</span> mongoose <span class="hljs-keyword">from</span> <span class="hljs-string">\'mongoose\'</span>;\n<span class="hljs-comment">// import * as cookieParser from \'cookie-parser\';</span>\n<span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'cookie-parser\'</span>);\n<span class="hljs-comment">// import * as bcrypt from \'bcryptjs\';</span>\n<span class="hljs-keyword">const</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'bcryptjs\'</span>);\n...\n</pre><p><br></p><p><br></p><h2><span style="color: var(--color-fg-default);">*tsconfig.json</span></h2><p><br></p><p>tsconfig.json 파일은 아래와 같이 설정을 해주었다.</p><h3><br></h3><pre class="ql-syntax" spellcheck="false">{\n\t  "compilerOptions": {\n\t    <span class="hljs-comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span>\n\t\n\n\t    <span class="hljs-comment">/* Projects */</span>\n\t    // "incremental": true,                              <span class="hljs-comment">/* Save .tsbuildinfo files to allow for incremental compilation of projects. */</span>\n\t    // <span class="hljs-string">"composite"</span>: true,                                <span class="hljs-comment">/* Enable constraints that allow a TypeScript project to be used with project references. */</span>\n\t    // <span class="hljs-string">"tsBuildInfoFile"</span>: <span class="hljs-string">"./.tsbuildinfo"</span>,              <span class="hljs-comment">/* Specify the path to .tsbuildinfo incremental compilation file. */</span>\n\t    // <span class="hljs-string">"disableSourceOfProjectReferenceRedirect"</span>: true,  <span class="hljs-comment">/* Disable preferring source files instead of declaration files when referencing composite projects. */</span>\n\t    // <span class="hljs-string">"disableSolutionSearching"</span>: true,                 <span class="hljs-comment">/* Opt a project out of multi-project reference checking when editing. */</span>\n\t    // <span class="hljs-string">"disableReferencedProjectLoad"</span>: true,             <span class="hljs-comment">/* Reduce the number of projects loaded automatically by TypeScript. */</span>\n\t\n\n\t    <span class="hljs-comment">/* Language and Environment */</span>\n\t    <span class="hljs-string">"target"</span>: <span class="hljs-string">"ES6"</span>,                                  <span class="hljs-comment">/* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */</span>\n\t    // <span class="hljs-string">"lib"</span>: [],                                        <span class="hljs-comment">/* Specify a set of bundled library declaration files that describe the target runtime environment. */</span>\n\t    // <span class="hljs-string">"jsx"</span>: <span class="hljs-string">"preserve"</span>,                                <span class="hljs-comment">/* Specify what JSX code is generated. */</span>\n\t    // <span class="hljs-string">"experimentalDecorators"</span>: true,                   <span class="hljs-comment">/* Enable experimental support for TC39 stage 2 draft decorators. */</span>\n\t    // <span class="hljs-string">"emitDecoratorMetadata"</span>: true,                    <span class="hljs-comment">/* Emit design-type metadata for decorated declarations in source files. */</span>\n\t    // <span class="hljs-string">"jsxFactory"</span>: <span class="hljs-string">""</span>,                                 <span class="hljs-comment">/* Specify the JSX factory function used when targeting React JSX emit, e.g. \'React.createElement\' or \'h\'. */</span>\n\t    // <span class="hljs-string">"jsxFragmentFactory"</span>: <span class="hljs-string">""</span>,                         <span class="hljs-comment">/* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. \'React.Fragment\' or \'Fragment\'. */</span>\n\t    // <span class="hljs-string">"jsxImportSource"</span>: <span class="hljs-string">""</span>,                            <span class="hljs-comment">/* Specify module specifier used to import the JSX factory functions when using \'jsx: react-jsx*\'. */</span>\n\t    // <span class="hljs-string">"reactNamespace"</span>: <span class="hljs-string">""</span>,                             <span class="hljs-comment">/* Specify the object invoked for \'createElement\'. This only applies when targeting \'react\' JSX emit. */</span>\n\t    // <span class="hljs-string">"noLib"</span>: true,                                    <span class="hljs-comment">/* Disable including any library files, including the default lib.d.ts. */</span>\n\t    // <span class="hljs-string">"useDefineForClassFields"</span>: true,                  <span class="hljs-comment">/* Emit ECMAScript-standard-compliant class fields. */</span>\n\t    // <span class="hljs-string">"moduleDetection"</span>: <span class="hljs-string">"auto"</span>,                        <span class="hljs-comment">/* Control what method is used to detect module-format JS files. */</span>\n\t\n\n\t    <span class="hljs-comment">/* Modules */</span>\n\t    <span class="hljs-string">"module"</span>: <span class="hljs-string">"CommonJS"</span>,                                <span class="hljs-comment">/* Specify what module code is generated. */</span>\n\t    // <span class="hljs-string">"rootDir"</span>: <span class="hljs-string">"./"</span>,                                  <span class="hljs-comment">/* Specify the root folder within your source files. */</span>\n\t    // <span class="hljs-string">"moduleResolution"</span>: <span class="hljs-string">"node"</span>,                       <span class="hljs-comment">/* Specify how TypeScript looks up a file from a given module specifier. */</span>\n\t    // <span class="hljs-string">"baseUrl"</span>: <span class="hljs-string">"./"</span>,                                  <span class="hljs-comment">/* Specify the base directory to resolve non-relative module names. */</span>\n\t    // <span class="hljs-string">"paths"</span>: {},                                      <span class="hljs-comment">/* Specify a set of entries that re-map imports to additional lookup locations. */</span>\n\t    // "rootDirs": [],                                   <span class="hljs-comment">/* Allow multiple folders to be treated as one when resolving modules. */</span>\n\t    <span class="hljs-string">"typeRoots"</span>: [<span class="hljs-string">"types/express"</span>, <span class="hljs-string">"./node_modules/@types"</span>],                                  <span class="hljs-comment">/* Specify multiple folders that act like \'./node_modules/@types\'. */</span>\n\t    // <span class="hljs-string">"types"</span>: [],                                      <span class="hljs-comment">/* Specify type package names to be included without being referenced in a source file. */</span>\n\t    // <span class="hljs-string">"allowUmdGlobalAccess"</span>: true,                     <span class="hljs-comment">/* Allow accessing UMD globals from modules. */</span>\n\t    // <span class="hljs-string">"moduleSuffixes"</span>: [],                             <span class="hljs-comment">/* List of file name suffixes to search when resolving a module. */</span>\n\t    // <span class="hljs-string">"resolveJsonModule"</span>: true,                        <span class="hljs-comment">/* Enable importing .json files. */</span>\n\t    // <span class="hljs-string">"noResolve"</span>: true,                                <span class="hljs-comment">/* Disallow \'import\'s, \'require\'s or \'&lt;reference&gt;\'s from expanding the number of files TypeScript should add to a project. */</span>\n\t\n\n\t    <span class="hljs-comment">/* JavaScript Support */</span>\n\t    <span class="hljs-string">"allowJs"</span>: true,                                  <span class="hljs-comment">/* Allow JavaScript files to be a part of your program. Use the \'checkJS\' option to get errors from these files. */</span>\n\t    // <span class="hljs-string">"checkJs"</span>: true,                                  <span class="hljs-comment">/* Enable error reporting in type-checked JavaScript files. */</span>\n\t    // <span class="hljs-string">"maxNodeModuleJsDepth"</span>: <span class="hljs-number">1</span>,                        <span class="hljs-comment">/* Specify the maximum folder depth used for checking JavaScript files from \'node_modules\'. Only applicable with \'allowJs\'. */</span>\n\t\n\n\t    <span class="hljs-comment">/* Emit */</span>\n\t    // <span class="hljs-string">"declaration"</span>: true,                              <span class="hljs-comment">/* Generate .d.ts files from TypeScript and JavaScript files in your project. */</span>\n\t    // <span class="hljs-string">"declarationMap"</span>: true,                           <span class="hljs-comment">/* Create sourcemaps for d.ts files. */</span>\n\t    // <span class="hljs-string">"emitDeclarationOnly"</span>: true,                      <span class="hljs-comment">/* Only output d.ts files and not JavaScript files. */</span>\n\t    <span class="hljs-string">"sourceMap"</span>: true,                                <span class="hljs-comment">/* Create source map files for emitted JavaScript files. */</span>\n\t    // <span class="hljs-string">"outFile"</span>: <span class="hljs-string">"./"</span>,                                  <span class="hljs-comment">/* Specify a file that bundles all outputs into one JavaScript file. If \'declaration\' is true, also designates a file that bundles all .d.ts output. */</span>\n\t    <span class="hljs-string">"outDir"</span>: <span class="hljs-string">"dist"</span>,                                   <span class="hljs-comment">/* Specify an output folder for all emitted files. */</span>\n\t    // <span class="hljs-string">"removeComments"</span>: true,                           <span class="hljs-comment">/* Disable emitting comments. */</span>\n\t    // <span class="hljs-string">"noEmit"</span>: true,                                   <span class="hljs-comment">/* Disable emitting files from a compilation. */</span>\n\t    // <span class="hljs-string">"importHelpers"</span>: true,                            <span class="hljs-comment">/* Allow importing helper functions from tslib once per project, instead of including them per-file. */</span>\n\t    // <span class="hljs-string">"importsNotUsedAsValues"</span>: <span class="hljs-string">"remove"</span>,               <span class="hljs-comment">/* Specify emit/checking behavior for imports that are only used for types. */</span>\n\t    // <span class="hljs-string">"downlevelIteration"</span>: true,                       <span class="hljs-comment">/* Emit more compliant, but verbose and less performant JavaScript for iteration. */</span>\n\t    // <span class="hljs-string">"sourceRoot"</span>: <span class="hljs-string">""</span>,                                 <span class="hljs-comment">/* Specify the root path for debuggers to find the reference source code. */</span>\n\t    // <span class="hljs-string">"mapRoot"</span>: <span class="hljs-string">""</span>,                                    <span class="hljs-comment">/* Specify the location where debugger should locate map files instead of generated locations. */</span>\n\t    // <span class="hljs-string">"inlineSourceMap"</span>: true,                          <span class="hljs-comment">/* Include sourcemap files inside the emitted JavaScript. */</span>\n\t    // <span class="hljs-string">"inlineSources"</span>: true,                            <span class="hljs-comment">/* Include source code in the sourcemaps inside the emitted JavaScript. */</span>\n\t    // <span class="hljs-string">"emitBOM"</span>: true,                                  <span class="hljs-comment">/* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */</span>\n\t    // <span class="hljs-string">"newLine"</span>: <span class="hljs-string">"crlf"</span>,                                <span class="hljs-comment">/* Set the newline character for emitting files. */</span>\n\t    // <span class="hljs-string">"stripInternal"</span>: true,                            <span class="hljs-comment">/* Disable emitting declarations that have \'@internal\' in their JSDoc comments. */</span>\n\t    // <span class="hljs-string">"noEmitHelpers"</span>: true,                            <span class="hljs-comment">/* Disable generating custom helper functions like \'__extends\' in compiled output. */</span>\n\t    // <span class="hljs-string">"noEmitOnError"</span>: true,                            <span class="hljs-comment">/* Disable emitting files if any type checking errors are reported. */</span>\n\t    // <span class="hljs-string">"preserveConstEnums"</span>: true,                       <span class="hljs-comment">/* Disable erasing \'const enum\' declarations in generated code. */</span>\n\t    // <span class="hljs-string">"declarationDir"</span>: <span class="hljs-string">"./"</span>,                           <span class="hljs-comment">/* Specify the output directory for generated declaration files. */</span>\n\t    // <span class="hljs-string">"preserveValueImports"</span>: true,                     <span class="hljs-comment">/* Preserve unused imported values in the JavaScript output that would otherwise be removed. */</span>\n\t\n\n\t    <span class="hljs-comment">/* Interop Constraints */</span>\n\t    // <span class="hljs-string">"isolatedModules"</span>: true,                          <span class="hljs-comment">/* Ensure that each file can be safely transpiled without relying on other imports. */</span>\n\t    <span class="hljs-string">"allowSyntheticDefaultImports"</span>: true,             <span class="hljs-comment">/* Allow \'import x from y\' when a module doesn\'t have a default export. */</span>\n\t    <span class="hljs-string">"esModuleInterop"</span>: true,                             <span class="hljs-comment">/* Emit additional JavaScript to ease support for importing CommonJS modules. This enables \'allowSyntheticDefaultImports\' for type compatibility. */</span>\n\t    // <span class="hljs-string">"preserveSymlinks"</span>: true,                         <span class="hljs-comment">/* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */</span>\n\t    <span class="hljs-string">"forceConsistentCasingInFileNames"</span>: true,            <span class="hljs-comment">/* Ensure that casing is correct in imports. */</span>\n\t\n\n\t    <span class="hljs-comment">/* Type Checking */</span>\n\t    <span class="hljs-string">"strict"</span>: true,                                      <span class="hljs-comment">/* Enable all strict type-checking options. */</span>\n\t    // <span class="hljs-string">"noImplicitAny"</span>: true,                            <span class="hljs-comment">/* Enable error reporting for expressions and declarations with an implied \'any\' type. */</span>\n\t    // <span class="hljs-string">"strictNullChecks"</span>: true,                         <span class="hljs-comment">/* When type checking, take into account \'null\' and \'undefined\'. */</span>\n\t    // <span class="hljs-string">"strictFunctionTypes"</span>: true,                      <span class="hljs-comment">/* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */</span>\n\t    // <span class="hljs-string">"strictBindCallApply"</span>: true,                      <span class="hljs-comment">/* Check that the arguments for \'bind\', \'call\', and \'apply\' methods match the original function. */</span>\n\t    // <span class="hljs-string">"strictPropertyInitialization"</span>: true,             <span class="hljs-comment">/* Check for class properties that are declared but not set in the constructor. */</span>\n\t    // <span class="hljs-string">"noImplicitThis"</span>: true,                           <span class="hljs-comment">/* Enable error reporting when \'this\' is given the type \'any\'. */</span>\n\t    // <span class="hljs-string">"useUnknownInCatchVariables"</span>: true,               <span class="hljs-comment">/* Default catch clause variables as \'unknown\' instead of \'any\'. */</span>\n\t    // <span class="hljs-string">"alwaysStrict"</span>: true,                             <span class="hljs-comment">/* Ensure \'use strict\' is always emitted. */</span>\n\t    // <span class="hljs-string">"noUnusedLocals"</span>: true,                           <span class="hljs-comment">/* Enable error reporting when local variables aren\'t read. */</span>\n\t    // <span class="hljs-string">"noUnusedParameters"</span>: true,                       <span class="hljs-comment">/* Raise an error when a function parameter isn\'t read. */</span>\n\t    // <span class="hljs-string">"exactOptionalPropertyTypes"</span>: true,               <span class="hljs-comment">/* Interpret optional property types as written, rather than adding \'undefined\'. */</span>\n\t    // <span class="hljs-string">"noImplicitReturns"</span>: true,                        <span class="hljs-comment">/* Enable error reporting for codepaths that do not explicitly return in a function. */</span>\n\t    // <span class="hljs-string">"noFallthroughCasesInSwitch"</span>: true,               <span class="hljs-comment">/* Enable error reporting for fallthrough cases in switch statements. */</span>\n\t    // <span class="hljs-string">"noUncheckedIndexedAccess"</span>: true,                 <span class="hljs-comment">/* Add \'undefined\' to a type when accessed using an index. */</span>\n\t    // <span class="hljs-string">"noImplicitOverride"</span>: true,                       <span class="hljs-comment">/* Ensure overriding members in derived classes are marked with an override modifier. */</span>\n\t    // <span class="hljs-string">"noPropertyAccessFromIndexSignature"</span>: true,       <span class="hljs-comment">/* Enforces using indexed accessors for keys declared using an indexed type. */</span>\n\t    // <span class="hljs-string">"allowUnusedLabels"</span>: true,                        <span class="hljs-comment">/* Disable error reporting for unused labels. */</span>\n\t    // <span class="hljs-string">"allowUnreachableCode"</span>: true,                     <span class="hljs-comment">/* Disable error reporting for unreachable code. */</span>\n\t\n\n\t    <span class="hljs-comment">/* Completeness */</span>\n\t    // <span class="hljs-string">"skipDefaultLibCheck"</span>: true,                      <span class="hljs-comment">/* Skip type checking .d.ts files that are included with TypeScript. */</span>\n\t    <span class="hljs-string">"skipLibCheck"</span>: true                                 <span class="hljs-comment">/* Skip type checking all .d.ts files. */</span>\n\t  }\n\t}\n</pre><p><br></p><p><br></p><p>나머지 설정들은</p><p>아래 나와 있는 순수 자바스크립트 배포 방법 대로 설정해서 배포 하면 된다.</p><p><a href="https://myportfolioblogproject.herokuapp.com/post/62683490c9b9aad5e1a16fda" rel="noopener noreferrer" target="_blank" class="ql-size-large"><strong><em>https://myportfolioblogproject.herokuapp.com/post/62683490c9b9aad5e1a16fda</em></strong></a></p><p><br></p><p><br></p><p><br></p><p>cf) 그리고 만약 배포시 build 설정을 여러번 하여 과도한 build 파일들이 저장되어,</p><h1><span style="color: var(--black-700);">Heroku: Your account has reached its concurrent build limit</span></h1><p>위와 같은 에러 발생시...</p><p><br></p><pre class="ql-syntax" spellcheck="false">$ heroku plugins:install heroku-builds\n$ heroku builds:cancel\n$ heroku restart\n</pre><p> </p><p>위 명령어를 콘솔에 입력하여 build 파일을 삭제해주면,</p><p>에러가 해결됨!!</p>',
    catName: 'TypeScript',
    author: 'lse126',
    createdAt: '2022-07-16T10:08:09.097Z',
    updatedAt: '2022-07-16T10:16:56.202Z',
    __v: 0,
  },
  {
    _id: '62d294a70ca43fe46228d219',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1657967748/myportfolioblogproject/fgboimmvlw4qtoahxdjn.gif',
    title: '<a> 태그 메일링크 (mailto:) 사용하는 방법',
    text: '<h3>&lt;a&gt; 태그 하이퍼링크에 메일링크(mailto:) 기본 개념</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'mailto:lsevina126@gmail.com\'</span>/&gt;</span>\n</pre><p><br></p><p>위와 같이 a 태그를 설정해주면 클릭시 받을 사람 주소가 위의 설정대로 뜨게 된다.</p><p><br></p><p><br></p><h3> &lt;a&gt; 태그 하이퍼링크에 메일링크(mailto:) 응용 개념</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'mailto:lsevina126@gmail.com?subject=안녕하세요!&amp;body=문의사항을 적어서 보내주세요!\'</span>/&gt;</span>\n</pre><p><br></p><p>이메일 주소를 입력하고  "?" 을 누르고,</p><p>subject는 이메일 제목을 미리 설정해주는 것!!</p><p>그리고 다른 사항을 설정하고 싶을 때  "&amp;" 를 입력하면 된다.</p><p>body 는 본문 내용을 미리 지정할 수 있음.</p><p><br></p><pre class="ql-syntax" spellcheck="false"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'mailto:lsevina126@gmail.com?bcc=﻿lsedonga126@gmail.com\'</span>/&gt;</span>\n</pre><p><br></p><p>bcc를 위와 같이 미리 설정할 수 있음.</p><p><br></p><pre class="ql-syntax" spellcheck="false"> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">\'mailto:lsevina126@gmail.com?body=[이름]%0D%0A[전화번호]\'</span>/&gt;</span>\n</pre><p><br></p><p>내용 본문 중 줄바꿈을 해주고 싶을 때, </p><p>위와 같이 설정을 해주면 된다.</p><p><br></p><p><br></p>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2022-07-16T10:36:23.088Z',
    updatedAt: '2022-07-16T10:36:23.088Z',
    __v: 0,
  },
  {
    _id: '62d297d20ca43fe46228d220',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1657968586/myportfolioblogproject/t4nbzbdjz7rzfqz2ujkc.gif',
    title: 'Express 서버, create react app + typescript  dotenv 안 먹히는 에러 해결!',
    text: '<h3>*create react app + typescript</h3><p><br></p><p>리액트 버전이 업그레이드 됨에 따라,</p><p>create react app 타입스크립트 리액트 템플릿이</p><p>관련된 타입을 업그레이드 하지 않아,</p><p>발생하는 문제인 것 같다.</p><p><br></p><pre class="ql-syntax" spellcheck="false">yarn add <span class="hljs-meta">@types</span>/react\n\nor\n\nnpm install <span class="hljs-meta">@types</span>/react\n</pre><p><br></p><p>그래서 최신 타입을 업그레이드 해주면 dotenv가 먹힌다.</p><p><br></p><p><br></p><h3>*NodeJS Express + typescript</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> dotenv = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'dotenv\'</span>);\n\ndotenv.<span class="hljs-title function_">config</span>();\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();\n</pre><p><br></p><p>Node express 서버에서 dotenv가 먹히지 않는 문제는</p><p>위와 같이, dotenv를 가장 먼저 import 시키고,</p><p>express 서버 실행 전 dotenv를 먼저 실행해야지만,</p><p>dotenv 실행 에러 해결할 수 있음.</p><p><br></p><p>아마 타입스크립트 같은 경우,</p><p>타입을 처음부터 끝까지 엄격하게 검사하고,</p><p>실행하기 때문에 dotenv를 먼저 실행하지 않고,</p><p>express 서버를 가동하면,</p><p>env 파일 내의 내용이 읽히지 않는 문제가</p><p>발생하는 것 같음.</p><p><br></p><p>그래서 dotenv를 가장 먼저 프로젝트에서,</p><p>내장시키고 실행을 시켜주어야 함!!</p><p><br></p><p><br></p><p><br></p>',
    catName: 'TypeScript',
    author: 'lse126',
    createdAt: '2022-07-16T10:49:54.937Z',
    updatedAt: '2022-07-16T10:51:07.881Z',
    __v: 0,
  },
  {
    _id: '62d81488891326fe5f34a01b',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1658325351/myportfolioblogproject/p0hsol2z41tafarjcppl.gif',
    title: 'Redux Toolkit  새로운 Redux 표준 (with TypeScript and React)',
    text: '<h1>Redux 폴더를 따로 만들어서 구성</h1><p><br></p><p><br></p><h3>* userRedux.ts</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { createSlice } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@reduxjs/toolkit\'</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">UserState</span> = {\n&nbsp; <span class="hljs-attr">currentUser</span>: <span class="hljs-built_in">object</span> | <span class="hljs-literal">null</span>;\n&nbsp; <span class="hljs-attr">isFetching</span>: <span class="hljs-built_in">boolean</span>;\n&nbsp; <span class="hljs-attr">error</span>: <span class="hljs-built_in">boolean</span>;\n};\n<span class="hljs-comment">// User state의 initial state 타입을 정의!!</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">UserState</span> = {\n&nbsp; <span class="hljs-attr">currentUser</span>: <span class="hljs-literal">null</span>,\n&nbsp; <span class="hljs-attr">isFetching</span>: <span class="hljs-literal">false</span>,\n&nbsp; <span class="hljs-attr">error</span>: <span class="hljs-literal">false</span>,\n};\n<span class="hljs-comment">// initial state 초기값 타입에 기초해 설정!!</span>\n\n<span class="hljs-keyword">const</span> userSlice = <span class="hljs-title function_">createSlice</span>({\n&nbsp; <span class="hljs-attr">name</span>: <span class="hljs-string">\'user\'</span>,\n&nbsp; initialState,\n&nbsp; <span class="hljs-attr">reducers</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">loginStart</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">true</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">loginSuccess</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">currentUser</span> = action.<span class="hljs-property">payload</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">loginFailure</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">error</span> = <span class="hljs-literal">true</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">logOut</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">currentUser</span> = <span class="hljs-literal">null</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">error</span> = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">signUpStart</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">true</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">signUpSuccess</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">signUpFailure</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">isFetching</span> = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">error</span> = <span class="hljs-literal">true</span>;\n&nbsp; &nbsp; },\n&nbsp; },\n});\n<span class="hljs-comment">// createslice 를 통해서 initial state 값을 등록하고 reducer 상태 관리 함수 정의 및 등록</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserState</span> };\n<span class="hljs-comment">// 정의된 타입 다른 곳에서도 쓰기위해 export</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> {\n&nbsp; loginStart,\n&nbsp; loginSuccess,\n&nbsp; loginFailure,\n&nbsp; logOut,\n&nbsp; signUpStart,\n&nbsp; signUpSuccess,\n&nbsp; signUpFailure,\n} = userSlice.<span class="hljs-property">actions</span>;\n<span class="hljs-comment">// reducer 함수 수행하기 위해..</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> userSlice.<span class="hljs-property">reducer</span>;\n<span class="hljs-comment">// reducer, state 상태 정보를 보관하는 store 객체를 만들기 위해..</span>\n</pre><p><br></p><p><br></p><h3>* cartRedux.ts</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { createSlice } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@reduxjs/toolkit\'</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">CartProductObjType</span> = {\n&nbsp; <span class="hljs-attr">categories</span>: <span class="hljs-built_in">string</span>[];\n&nbsp; <span class="hljs-attr">color</span>: <span class="hljs-built_in">string</span>;\n&nbsp; <span class="hljs-attr">createdAt</span>: <span class="hljs-built_in">number</span>;\n&nbsp; <span class="hljs-attr">desc</span>: <span class="hljs-built_in">string</span>;\n&nbsp; <span class="hljs-attr">img</span>: <span class="hljs-built_in">string</span>;\n&nbsp; <span class="hljs-attr">inStock</span>: <span class="hljs-built_in">boolean</span>;\n&nbsp; <span class="hljs-attr">price</span>: <span class="hljs-built_in">number</span>;\n&nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-built_in">number</span>;\n&nbsp; <span class="hljs-attr">size</span>: <span class="hljs-built_in">string</span>;\n&nbsp; <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n&nbsp; <span class="hljs-attr">updatedAt</span>: <span class="hljs-built_in">number</span>;\n&nbsp; <span class="hljs-attr">_v</span>: <span class="hljs-built_in">number</span>;\n&nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">State</span> = {\n&nbsp; <span class="hljs-attr">products</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">CartProductObjType</span>&gt;;\n&nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-built_in">number</span>;\n&nbsp; <span class="hljs-attr">total</span>: <span class="hljs-built_in">number</span>;\n};\n\n<span class="hljs-keyword">const</span> <span class="hljs-attr">initialState</span>: <span class="hljs-title class_">State</span> = {\n&nbsp; <span class="hljs-attr">products</span>: [],\n&nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-number">0</span>,\n&nbsp; <span class="hljs-attr">total</span>: <span class="hljs-number">0</span>,\n};\n\n<span class="hljs-keyword">const</span> cartSlice = <span class="hljs-title function_">createSlice</span>({\n&nbsp; <span class="hljs-attr">name</span>: <span class="hljs-string">\'cart\'</span>,\n&nbsp; initialState,\n&nbsp; <span class="hljs-attr">reducers</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">addProduct</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">quantity</span> += action.<span class="hljs-property">payload</span>.<span class="hljs-property">quantity</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">products</span>.<span class="hljs-title function_">push</span>(action.<span class="hljs-property">payload</span>);\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">total</span> += action.<span class="hljs-property">payload</span>.<span class="hljs-property">price</span> * action.<span class="hljs-property">payload</span>.<span class="hljs-property">quantity</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">removeProduct</span>: <span class="hljs-function">(<span class="hljs-params">state, action</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">quantity</span> -= action.<span class="hljs-property">payload</span>.<span class="hljs-property">quantity</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">products</span> = state.<span class="hljs-property">products</span>.<span class="hljs-title function_">filter</span>(\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">product</span>) =&gt;</span> product.<span class="hljs-property">_id</span> !== action.<span class="hljs-property">payload</span>.<span class="hljs-property">product</span>.<span class="hljs-property">_id</span>\n&nbsp; &nbsp; &nbsp; );\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">total</span> -= action.<span class="hljs-property">payload</span>.<span class="hljs-property">product</span>.<span class="hljs-property">price</span> * action.<span class="hljs-property">payload</span>.<span class="hljs-property">quantity</span>;\n&nbsp; &nbsp; },\n&nbsp; &nbsp; <span class="hljs-attr">emptyProduct</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">quantity</span> = <span class="hljs-number">0</span>;\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">products</span> = [];\n&nbsp; &nbsp; &nbsp; state.<span class="hljs-property">total</span> = <span class="hljs-number">0</span>;\n&nbsp; &nbsp; },\n&nbsp; },\n});\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">CartProductObjType</span> };\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> { addProduct, removeProduct, emptyProduct } = cartSlice.<span class="hljs-property">actions</span>;\n<span class="hljs-comment">// reducer 함수 수행하기 위해..</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> cartSlice.<span class="hljs-property">reducer</span>;\n<span class="hljs-comment">// reducer, state 상태 정보를 보관하는 store 객체를 만들기 위해..</span>\n</pre><p><br></p><p><br></p><h3>* store.ts</h3><p><br></p><p>store 설정하고 난 뒤에도 새로고침을 하면 메모리에 저장된 상태 정보 값이 다 지워지는 경우가 있다.</p><p>이 메모리에 저장된 상태 정보 값을 localstorage에 저장하는 persistor store 설정을 아래와 같이 추가해준다. </p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { configureStore, combineReducers } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@reduxjs/toolkit\'</span>;\n<span class="hljs-comment">// persistor store 설정 추가</span>\n<span class="hljs-keyword">import</span> {\n&nbsp; persistStore,\n&nbsp; persistReducer,\n&nbsp; <span class="hljs-variable constant_">FLUSH</span>,\n&nbsp; <span class="hljs-variable constant_">REHYDRATE</span>,\n&nbsp; <span class="hljs-variable constant_">PAUSE</span>,\n&nbsp; <span class="hljs-variable constant_">PERSIST</span>,\n&nbsp; <span class="hljs-variable constant_">PURGE</span>,\n&nbsp; <span class="hljs-variable constant_">REGISTER</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'redux-persist\'</span>;\n<span class="hljs-keyword">import</span> storage <span class="hljs-keyword">from</span> <span class="hljs-string">\'redux-persist/lib/storage\'</span>;\n<span class="hljs-comment">// persistor store 설정 추가</span>\n<span class="hljs-keyword">import</span> cartReducer <span class="hljs-keyword">from</span> <span class="hljs-string">\'./cartRedux\'</span>;\n<span class="hljs-keyword">import</span> userReducer <span class="hljs-keyword">from</span> <span class="hljs-string">\'./userRedux\'</span>;\n\n<span class="hljs-keyword">const</span> persistConfig = {\n&nbsp; <span class="hljs-attr">key</span>: <span class="hljs-string">\'root\'</span>,\n&nbsp; <span class="hljs-attr">version</span>: <span class="hljs-number">1</span>,\n&nbsp; storage,\n};\n<span class="hljs-comment">// persistor store 설정 추가</span>\n\n<span class="hljs-keyword">const</span> rootReducer = <span class="hljs-title function_">combineReducers</span>({ <span class="hljs-attr">user</span>: userReducer, <span class="hljs-attr">cart</span>: cartReducer });\n<span class="hljs-comment">// user, cart 2개 state 정보 관리하는 reducer 함수를 하나의 reducer로 통합 </span>\n\n<span class="hljs-keyword">const</span> persistedReducer = <span class="hljs-title function_">persistReducer</span>(persistConfig, rootReducer);\n<span class="hljs-comment">// persistReducer 함수에 등록!!</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">configureStore</span>({\n&nbsp; <span class="hljs-comment">// reducer: {</span>\n&nbsp; <span class="hljs-comment">// &nbsp; cart: cartReducer,</span>\n&nbsp; <span class="hljs-comment">// &nbsp; user: persistedReducer,</span>\n&nbsp; <span class="hljs-comment">// },</span>\n  <span class="hljs-comment">// persistor 설정 이전 설정</span>\n  \n  <span class="hljs-comment">// persistor store 설정 추가</span>\n&nbsp; <span class="hljs-attr">reducer</span>: persistedReducer,\n&nbsp; <span class="hljs-attr">middleware</span>: <span class="hljs-function">(<span class="hljs-params">getDefaultMiddleware</span>) =&gt;</span>\n&nbsp; &nbsp; <span class="hljs-title function_">getDefaultMiddleware</span>({\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">serializableCheck</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">ignoredActions</span>: [<span class="hljs-variable constant_">FLUSH</span>, <span class="hljs-variable constant_">REHYDRATE</span>, <span class="hljs-variable constant_">PAUSE</span>, <span class="hljs-variable constant_">PERSIST</span>, <span class="hljs-variable constant_">PURGE</span>, <span class="hljs-variable constant_">REGISTER</span>],\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; }),\n  <span class="hljs-comment">// persistor store 설정 추가</span>\n});\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> persistor = <span class="hljs-title function_">persistStore</span>(store);\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> <span class="hljs-title class_">RootState</span> = <span class="hljs-title class_">ReturnType</span>&lt;<span class="hljs-keyword">typeof</span> store.<span class="hljs-property">getState</span>&gt;;\n</pre><p><br></p><p><br></p><h3>* apiCalls.ts</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Dispatch</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@reduxjs/toolkit\'</span>;\n<span class="hljs-keyword">import</span> { publicRequest } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../requestMethods\'</span>;\n<span class="hljs-keyword">import</span> {\n&nbsp; loginFailure,\n&nbsp; loginStart,\n&nbsp; loginSuccess,\n&nbsp; signUpFailure,\n&nbsp; signUpStart,\n&nbsp; signUpSuccess,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">\'./userRedux\'</span>;\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">UserType</span> = {\n&nbsp; username?: <span class="hljs-built_in">string</span>;\n&nbsp; password?: <span class="hljs-built_in">string</span>;\n&nbsp; email?: <span class="hljs-built_in">string</span>;\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">dispatch: Dispatch, user: UserType</span>) =&gt; {\n&nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">loginStart</span>());\n  <span class="hljs-comment">// state 상태 정보 관리하는 reducer 함수 실행하는 dispatch 함수를 import 해서 실행</span>\n&nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> publicRequest.<span class="hljs-title function_">post</span>(<span class="hljs-string">\'/auth/login\'</span>, user);\n&nbsp; &nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">loginSuccess</span>(res.<span class="hljs-property">data</span>));\n  <span class="hljs-comment">// 네트워크 통신후 action에 payload로서 데이터를 받아 상태 정보 받은 데이터로 업데이트!!</span>\n&nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">loginFailure</span>());\n&nbsp; }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signUp</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">dispatch: Dispatch, user: UserType</span>) =&gt; {\n&nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">signUpStart</span>());\n&nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">await</span> publicRequest.<span class="hljs-title function_">post</span>(<span class="hljs-string">\'/auth/register\'</span>, user);\n&nbsp; &nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">signUpSuccess</span>());\n&nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(error);\n&nbsp; &nbsp; <span class="hljs-title function_">dispatch</span>(<span class="hljs-title function_">signUpFailure</span>());\n&nbsp; }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> { <span class="hljs-title class_">UserType</span> };\n</pre><p><br></p><p><br></p><h3>* requestMethods.ts</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">\'axios\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BASE_URL</span> = <span class="hljs-string">\'https://ecommerceprojectserver.herokuapp.com/api\'</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">USER</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>?.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'persist:root\'</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>)?.<span class="hljs-property">user</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TOKEN</span> = <span class="hljs-variable constant_">USER</span>\n&nbsp; ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable constant_">USER</span>).<span class="hljs-property">currentUser</span>?.<span class="hljs-property">accessToken</span>.<span class="hljs-title function_">toString</span>()\n&nbsp; : <span class="hljs-literal">null</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HOST</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">host</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> publicRequest = axios.<span class="hljs-title function_">create</span>({\n&nbsp; <span class="hljs-attr">baseURL</span>: <span class="hljs-variable constant_">BASE_URL</span>,\n&nbsp; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,\n&nbsp; <span class="hljs-attr">headers</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">origin</span>: <span class="hljs-string">`http://<span class="hljs-subst">${HOST}</span>`</span>,\n&nbsp; &nbsp; <span class="hljs-comment">// @ts-ignore</span>\n&nbsp; &nbsp; <span class="hljs-attr">CSRF_TOKEN</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">REACT_APP_CSRF_TOKEN</span>,\n&nbsp; },\n});\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> userRequest = axios.<span class="hljs-title function_">create</span>({\n&nbsp; <span class="hljs-attr">baseURL</span>: <span class="hljs-variable constant_">BASE_URL</span>,\n&nbsp; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,\n&nbsp; <span class="hljs-attr">headers</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">token</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${TOKEN}</span>`</span>,\n&nbsp; &nbsp; <span class="hljs-attr">origin</span>: <span class="hljs-string">`http://<span class="hljs-subst">${HOST}</span>`</span>,\n&nbsp; &nbsp; <span class="hljs-comment">// @ts-ignore</span>\n&nbsp; &nbsp; <span class="hljs-attr">CSRF_TOKEN</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">REACT_APP_CSRF_TOKEN</span>,\n&nbsp; },\n});\n</pre><p><br></p><p><br></p><h3>* index.ts</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom/client\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./index.css\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./App\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Provider</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-redux\'</span>;\n<span class="hljs-keyword">import</span> { store, persistor } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./redux/store\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">PersistGate</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'redux-persist/integration/react\'</span>;\n\n<span class="hljs-keyword">const</span> root = <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(\n&nbsp; <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">\'root\'</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>\n);\nroot.<span class="hljs-title function_">render</span>(\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">{store}</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">PersistGate</span> <span class="hljs-attr">loading</span>=<span class="hljs-string">{null}</span> <span class="hljs-attr">persistor</span>=<span class="hljs-string">{persistor}</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">PersistGate</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span>\n);<span class="hljs-comment">\n// 각 프로젝트 당 하나의 store만 존재 그것을 provider로 전역으로 전달\n// persist 설정을 하고 난뒤 상위 파일인 index.ts 에서도 위와 같이 설정 추가</span>\n</pre><p><br></p><p><br></p><h3>* Login.tsx</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> { useSelector } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-redux\'</span>;\n<span class="hljs-keyword">import</span> { useDispatch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-redux\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n<span class="hljs-keyword">import</span> { login } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../redux/apiCalls\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">RootState</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../redux/store\'</span>;\n<span class="hljs-keyword">import</span> { mobile } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../responsive\'</span>;\n\n...\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Login</span> = () =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> [username, setUsername] = useState&lt;<span class="hljs-built_in">string</span>&gt;();\n&nbsp; <span class="hljs-keyword">const</span> [password, setPassword] = useState&lt;<span class="hljs-built_in">string</span>&gt;();\n&nbsp; <span class="hljs-keyword">const</span> dispatch = <span class="hljs-title function_">useDispatch</span>();\n&nbsp; <span class="hljs-keyword">const</span> { isFetching, error } = <span class="hljs-title function_">useSelector</span>(<span class="hljs-function">(<span class="hljs-params">state: RootState</span>) =&gt;</span> state.<span class="hljs-property">user</span>);\n  <span class="hljs-comment">// react-redux 값의 useSelectore 값을 통해서 저장된 상태 정보 값을 가지고 온다.</span>\n  <span class="hljs-comment">// store 모듈에서 store 저장소 객체 타입을 받아서 RootState를 받아서 타입을 적용해준다.</span>\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleClick</span> = (<span class="hljs-params">e: React.FormEvent&lt;HTMLButtonElement&gt;</span>) =&gt; {\n&nbsp; &nbsp; e.<span class="hljs-title function_">preventDefault</span>();\n&nbsp; &nbsp; <span class="hljs-title function_">login</span>(dispatch, { username, password });\n    <span class="hljs-comment">// apiCalls 모듈에서 login 함수를 받아와서 실행시킴 ( 상태 정보 업데이트 시작, loginStart(), loginSuccess(), or loginFailure() )</span>\n    <span class="hljs-comment">// dispatch를 파라메터로 전달해주고, 입력된 유저 정보를 파라메터 변수로 전달해서 상태정보 업데이트 시작한다.</span>\n    <span class="hljs-comment">// apiCalls.ts 모듈 참고할 것!!</span>\n&nbsp; };\n\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; &lt;<span class="hljs-title class_">Container</span>&gt;\n&nbsp; &nbsp; &nbsp; &lt;<span class="hljs-title class_">Wrapper</span>&gt;\n....\n</pre><p><br></p>',
    catName: 'TypeScript',
    author: 'lse126',
    createdAt: '2022-07-20T14:43:20.422Z',
    updatedAt: '2022-07-20T14:43:20.422Z',
    __v: 0,
  },
  {
    _id: '62d8300f8a9308ed8c671782',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1658334268/myportfolioblogproject/npndshmkswskqjymx7ty.gif',
    title: '로마제국 쇠망사(1) - 에드워드 기번',
    text: '<p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658334310/myportfolioblogproject/tjw5ldy5hn3khkkxkvst.gif" crossorigin="anonymous"></p><p><strong style="color: rgb(85, 85, 85);"><em>가이우스 율리우스 카이사르</em></strong></p><p><br></p><p><br></p><h1>*아우구스투스</h1><p><br></p><p><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>고대에는 거대한 국가에 전국민이 참여하는 민주주의를 실행하는 것은</em></strong></p><p><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>도저히 불가능한 일</em></strong><strong class="ql-size-large"><em>이었다. 만일 실행한다 하더라도 속주 주민들의 이해관계가</em></strong></p><p><strong class="ql-size-large"><em>민주정에 반영되면 국가운영이 더욱 어려워질 것이고,</em></strong></p><p><strong class="ql-size-large"><em>그런 것은 아무도 바라지 않았다.</em></strong></p><p><strong class="ql-size-large"><em>결국, 제국으로 발전한 고대 로마 전역을 차질없이 운영하기 위해서는</em></strong></p><p><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>군주정체로의 전환은 불가피한 사항</em></strong><strong class="ql-size-large"><em>이었다.</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">출처 : https://ko.wikipedia.org/wiki/%EC%9B%90%EC%88%98%EC%A0%95</span></p><p><br></p><p><br></p><p><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>고대 로마의 공화정은 로마가 도시국가 내지 도시국가연합인 시대에 유효하게 기능</em></strong><strong class="ql-size-large"><em>했다. </em></strong></p><p><strong class="ql-size-large"><em>그러나 로마가 지중해 세계 대부분을 지배하는&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>거대국가가 되면서 구조적 한계</em></strong><strong class="ql-size-large"><em>가 나타나기 시작했다. </em></strong></p><p><strong class="ql-size-large"><em>로마의 유력자 모임에 불과한 원로원과 로마 시민만의 선거로 선출되는 집정관으로는 도저히 거대국가를 통제할 수 없게 된 것이다.</em></strong></p><p><br></p><p><strong class="ql-size-large"><em>또 한편으로는&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>고대 로마의 후원 문화 문제</em></strong><strong class="ql-size-large"><em>가 있었다. </em></strong></p><p><strong class="ql-size-large"><em>고대 로마는 주로 귀족으로 이루어진&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>부모격 보호자 (파트로누스)가 주로 평민으로 이루어진 자식격 피보호자 (클리엔테스) 를 거느리고 보호하는 상호관계 (피호제도)</em></strong><strong class="ql-size-large"><em>&nbsp;가 있었다.&nbsp;</em></strong></p><p><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>로마가 도시 국가</em></strong><strong class="ql-size-large"><em>인 단계에서 이런 문화는 사리사욕보다는&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>노블레스 오블리주적 의미</em></strong><strong class="ql-size-large"><em>가 있었다. </em></strong></p><p><strong class="ql-size-large"><em>그러나&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>로마가 거대국가화</em></strong><strong class="ql-size-large"><em>&nbsp;되면서 귀족의 보호를 받을 수 있는 클레엔테스는 평민들 중 소수 집단이 되고, </em></strong></p><p><strong class="ql-size-large"><em>그 결과 귀족은 자신에게 가까운 이의 이익만 우선하는 존재가 되어&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>대국가적인 국가운영보다 자신의 클리엔테스의 이익대표자 입장을 우선</em></strong><strong class="ql-size-large"><em>했다.</em></strong></p><p><strong class="ql-size-large"><em>이 현상을 타파하려면 개별 파트로누스와 클리엔테스들의 복잡한 상하관계를&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>단 한명을 정점으로 하는 단순한 상하관계로 정리할 필요</em></strong><strong class="ql-size-large"><em>가 있었다. </em></strong></p><p><strong class="ql-size-large"><em>하지만 애초에 왕을 추방하고 공화제로 전환한 역사를 가진 고대 로마에선 군주제는 최대의 금기어였다.</em></strong></p><p><br></p><p><strong class="ql-size-large"><em>기원전 1세기 갈리아를 정복하고, 내란기를 거쳐 종신 독재관에 취임한&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>민중파 율리우스 카이사르는 이를 깨닫고 종신독재관에 취임하여 급진적인 체제개혁을 시도하다 공화정 전통을 지키려는 사람들에게 암살</em></strong><strong class="ql-size-large"><em>당한다.</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">출처: https://ko.wikipedia.org/wiki/%EC%9B%90%EC%88%98%EC%A0%95</span></p><p><br></p><p><br></p><h1>*정치천재의 교묘한 체제의 변화</h1><p><br></p><p><strong class="ql-size-large"><em>그는 권력을 보유하되 암살당하지 않는 방법을 생각해 내야 했고,</em></strong></p><p><strong class="ql-size-large"><em>그 묘안이 바로&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>\'공화정의 형태로 위장한 절대 군주정\'&nbsp;</em></strong><strong class="ql-size-large"><em>이었다</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">청소년을 위한 로마제국 쇠망사 p32</span></p><p><br></p><p><br></p><p><strong class="ql-size-large"><em>안토니우스와 클레오파트라 동방지역과 내전에 승리한 후, </em></strong></p><p><strong class="ql-size-large"><em>절대 권력을 가진 옥타비아누스(아우구스투스)는&nbsp;</em></strong></p><p><strong style="color: rgb(255, 169, 79);" class="ql-size-large"><em>기존의 공화정 체제에 대한 반발심은 없다는 것을 보여 줌과 </em></strong></p><p><strong style="color: rgb(255, 169, 79);" class="ql-size-large"><em>동시에 내전을 통해서 얻은 불법적인 권력을 원로원의 승인을 받은 </em></strong></p><p><strong style="color: rgb(255, 169, 79);" class="ql-size-large"><em>합법적인 권력으로 전환할 필요</em></strong><strong class="ql-size-large"><em>가 있었다. </em></strong></p><p><strong class="ql-size-large"><em>이런 필요성에서&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>권력 반환</em></strong><strong class="ql-size-large"><em>이라는 과감한 행동을 하였다..</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">청소년을 위한 로마제국 쇠망사 p33</span></p><p><br></p><p><br></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">내전시기의 혼란을 수습하기 위해 원로원에서 옥타비아누스에게 부여한 임시특권을 포기하고 다시 원로원 시민에게 돌려준다는 제스쳐였지만, </span></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">오히려 이러한 특권들은 기존의 공화정에 맞지 않는 특권이며 지속적으로 보유시 양부 카이사르처럼 공화정 체제에 대한 노골적 반발로 보일 수 있기 때문에 </span></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">내려놓는 것이 오히려 옥타비아누스에게는 좋은 것이었다.</span></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">그럼에도 불구하고, 옥타비아누스가 로마 제정 초기 원수정, 후기 전제정을 확립하기 위해 내려놓지 않은 특권은 아래와 같다.</span></p><p><br></p><p><br></p><ul><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">원수(Princeps 프린켑스): 시민들 중 제1인자라는 의미의 명예칭호. 프린스(Prince)의 어원.</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">집정관(Consul 콘술)의 명령권(라틴어:&nbsp;Imperium 임페리움): 로마의 행정권한의 근거이자 이탈리아 반도의 군통수권</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">속주 총독(Proconsul 프로콘술), 즉 속주총독의 명령권: 황제 속주의 행정권 및 그 이외 원로원 속주에 영향력을 보장. 또한 속주에 배치된 군단의 통수권.</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">호민관(Tribunus 트리부누스)의 특권: 신체 불가침권, 원로원 의안 제출권, 민회 소집권 등. 그 중에서도 거부권이 가장 중요한 권력이었다.</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">카이사르(Caesar): 옥타비아누스가 카이사르의 양자로서 그 뒤를 이은 것에 유래한다. 본래는 율리우스씨 씨족에 속한 가족명이다. 카이저(Kaiser) 및 차르(Czar)의 어원.</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">존엄자(Augustus): 단순한 존칭이지만 "존엄한 자"라는 말은 영향력을 가지지 않을 수 없었다.</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">총사령관(Imperator 임페라토르): 양부 카이사르처럼 개선장군의 칭호를 개인 이름처럼 사용하여 그 칭호 사용을 사실상 독점했다. 엠페러(Emperor)의 어원.</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">제사장(Pontifex Maximus 폰티펙스 막시무스): 종교적 권위 장악.재정시기 아우구스투스 황제 부터 그라티아누스 황제 때까지 사용</strong></li><li><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">국부(Pater Patriae 파테르 파트리아에) 칭호</strong></li></ul><p><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">       </strong><span style="background-color: rgb(255, 255, 255);" class="ql-size-small">(출처:&nbsp;https://ko.wikipedia.org/wiki/%EC%9B%90%EC%88%98%EC%A0%95)</span></p><p><br></p><p><br></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">위에서 로마 전기 원수정과 후기 제정의 확립하는 가장 핵심이 되는 권한은 집정관 권한, 속주 총독 권한, 호민관 특권이었다.</span></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">집정관 권한, 속주 총독 권한 같은 경우 각각 이탈리아 반도 군 통수권, 로마 각 속주 군 통수권 장악을 할 수 있는 권한.</span></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">호민관 특권은 신체 불가침 특권 뿐만 아니라 원로원 의안 제출권, 민회 소집권, 거부권 등등 로마 행정, 정치 모든 권한을 확보할 수 있는 중요한 특권이었다.</span></p><p><br></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">기존의 로마 공화정 체제가 원로원에서 정책을 만들고 소집된 민회에서 비준 및 승인을 얻어 법이 만들어지고 정책이 실행되어지는 체제인데 </span></p><p><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">호민관 특권은 원로원 의안 제출권, 민회 소집권... 그리고 민회에 의해 비준 승인된 정책, 법을 거부할 수 있는&nbsp;</span><strong style="background-color: rgb(255, 255, 255); color: rgb(255, 147, 0);" class="ql-size-large"><em>거부권</em></strong><span class="ql-size-large" style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);">이 있었다.</span></p><p><br></p><p><strong style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">공화정 체제 내에서의 제정 즉, 원수정은</strong><strong style="background-color: rgb(255, 255, 255); color: rgb(255, 147, 0);" class="ql-size-large"><em>&nbsp;집정관 권한(이탈리아 본국 군대 통솔 권한), 속주 총독 권한(속주 군대 통솔 권한), 호민관 특권(거부권)&nbsp;</em></strong><strong style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이 세가지 권한에서 비롯된 것이며, </strong></p><p><strong style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이 세가지 권한은 공화정 체제 내에서 명백히 합법적인 권한이었다.</strong></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이 세가지 권한외에 임페라토르, 아우구스투스 칭호는 후에 전제정 시기 로마 정제를 칭하는 호칭이 되었으며, 카이사르는 로마 부제를 칭하는 호칭이 되었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">물론 아우구스투스 시기 원수정 시기 때에는 공화정을 어느정도 준수할 필요가 있었기에 이러한 칭호들은 사용을 자제했으며, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">대신에 프린켑스(로마 시민 중 1인자)라는 명예 칭호를 사용하여 공화정을 존중하는 이미지를 만들 필요가 있었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하지만 그 이후에도 주기적으로 아우구스투스는 아래와 같이 권련 반환이라는 제스쳐를 반복하곤 하였다.</span></p><p><br></p><p><br></p><p><strong class="ql-size-large"><em>원로원은 즉각 아우구스투스의 사임 요청을 거절했다. </em></strong></p><p><strong class="ql-size-large"><em>그들은 아우구스투스에게 그가 구한 공화정을 버리지 말아 달라고 탄원했다. </em></strong></p><p><strong class="ql-size-large"><em>그는 어쩔 수 없다는 듯이 원로원의 명령에 따라 속주와 로마 군대의 총지휘권을 10년 동안만 보유할 것이고, </em></strong></p><p><strong class="ql-size-large"><em>공화정이 예전의 건전함과 활력을 되찾고 자신이 개입할 필요가 없길 바란다는 단서를 달았다.</em></strong></p><p><br></p><p><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>이런 웃기는 상황극이 아우구스투스 황제의 치세 동안 여러 번 반복되었고, 로마제국이 멸망할 때까지 황제들은 아우구스투스 황제를 기념하여 통치 10년마다 이런 상황의 연극을 재연해야했다.</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">로마제국 쇠망사 제3장 69쪽</span></p><p><br></p><p><br></p><h1>*5현제 시대</h1><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658334819/myportfolioblogproject/peu0xeo1x0reodlcokra.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><strong class="ql-size-large"><em>모든 것이 너무나도 조용하고 완벽해서, 도저히 쓸 게 없다.</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">안토니누스 피우스 치세기에 대한 한 영국인 역사학자의 절규</span></p><p><br></p><p><br></p><p><strong class="ql-size-large"><em>아우구스투스 황제나 오현제들이 훌륭한 통치자로 칭송받는 것은 자신과의 끊임없는 싸움에서 이긴 결과였다. .... </em></strong></p><p><strong class="ql-size-large"><em>절대 권력을 쥐었음에도 불구하고 환락의 유혹에 빠지지 않았고, 충언에 귀를 기울였으며, 부지런히 몸을 움직였다.</em></strong></p><p><br></p><p><strong class="ql-size-large"><em>모든 것이 열악한 주둔지보다 풍요롭고 안락한 로마 시에서 지내고 싶었지만,</em></strong></p><p><strong class="ql-size-large"><em>그런 유혹을 뿌리치고 부지런히 공부하고 제국 전체상황을 점검하고,</em></strong></p><p><strong class="ql-size-large"><em>부지런히 몸을 움직여 제국 방위선을 점검하는&nbsp;</em></strong><strong style="color: rgb(255, 147, 0);" class="ql-size-large"><em>\'자기절제\'</em></strong><strong class="ql-size-large"><em>&nbsp;야말로,</em></strong></p><p><strong class="ql-size-large"><em>그들이 훌륭한 황제로 칭송받는 이유일 것이다.</em></strong></p><p><br></p><p><span style="color: rgb(119, 119, 119);">청소년을 위한 로마제국 쇠망사 p45</span></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658334870/myportfolioblogproject/elg6av30bdljbbpm2udf.gif" crossorigin="anonymous"></p><p><span style="color: rgb(85, 85, 85);">트라야누스 시기 로마 제국 최대 강역도</span></p><p><br></p><h1><strong style="background-color: rgb(255, 255, 255);">1. 트라야누스 황제</strong></h1><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">트라야누스 황제는 위와 같이 로마 최대의 강역을 이루고 Optimus Princeps(옵티무스 프린켑스) 지고의 황제라고 당대에 불린 말그대로 완벽한 황제였다(Optimus 라틴어 뜻이 "완벽한"). </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">군사적으로는 로마의 동쪽 방어선 다뉴브강 남쪽 모이시아 지역을 지속적으로 약탈하던 데케발루스의 다키아를 침공하여 합병하고 이 곳에 있던 금광, 은광을 확보. 재정적으로 도움이 된 원정이었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하지만 말년에 벌인 파르티아 원정을 경우 수도인 크테시폰을 점령하는 듯 일시적인 성과는 보였으나 </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">도중 시리아 유대인들의 반란으로 인해 이곳 방어선 유지에 어려움 겪자 결국 점령지를 포기하고 철수하는 와중에 트라야누스 황제는 사망하고 만다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">원수정 시대의 수많은 임페라토르 중 유이하게 제국의 질서를 유지한 명군이라는 찬사를 받았고, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">경제적으로도 로마 최절정기에 있었으며, 군사적으로는 많은 성공을 거두었으며, 원로원과의 사이도 나쁘지 않았다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하지만, 다음 세대인 3세기 위기가 오기 전에 제국을 행정적으로 정비하고 개편하여 내정을 정비하고, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">세수 지출을 줄여 세수를 확보해야 했음에도 불구하고 군사적 성공 외치에만 집중하여 도금된 영광일 뿐이다 라는 평가 역시도 존재한다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이러한 문제 때문에 후임 황제가 되는 하드리아누스 황제와는 지속적인 마찰이 있었다고 알려진다.</span></p><p><br></p><p><br></p><h1><strong style="background-color: rgb(255, 255, 255);">2. 하드리아누스 황제</strong></h1><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658334944/myportfolioblogproject/eqydgks1wr3motc08bw2.gif" crossorigin="anonymous"></p><p><span style="color: rgb(85, 85, 85);">하드리아누스 순행로</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">전임 황제였던 트라야누스 황제의 확장정책에 반대하던 하드리아누스 황제가 임페라토르가 되고 난 뒤, 제국은 군사적으로 공세 확장 공격 정책에서 방위 강화, 내치 강화, 재정 관리(세수절약)으로 정책을 전환하게 된다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">재위 기간 대부분을 수도 로마에 머무르지 않고 제국 곳곳을 돌아다니며 방위선 점검과 보수, 지방 속주 행정체계를 점검하고 재정비를 하였다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">전임 황제였던 트라야누스가 시행한 확장 정책은 제국의 판도를 상승시키는데 결정적인 공헌을 한 것은 사실이지만 공격 위주의 정책으로 제국 내부의 행정, 재정은 이완과 균열을 반복하고 있었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하드리아누스는 이를 바로 잡기 위해 제국 곳곳을 순행해 행정을 바로잡고 군단을 시찰하며 문제점을 바로잡아 갔다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이러한 공적은 당대에는 높은 평가를 받지 못했지만, 이후에 로마 제국이 위기에 빠졌을때 강화된 군단과 잘 정비된 행정 체계로 </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">인해 제국의 위기를 어느 정도 지연시키는데에는 기여를 하게된다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">1940년대 까지만 하더라도 저평가를 받았지만, 최근 연구를 통해서 상대적으로 고평가를 받았던 트라야누스 황제는 그 업적의 그림자 부작용이 상당했고, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그 부작용을 실용적인 내치 정책으로 팍스 로마나를 지속시키는데 노력한 명군이라는 평이 항상 따라온다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하지만 지나친 순방으로 인한 재정지출 확대로 비판점도 존재하지만, 그래도 전임 황제 트라야누스의 파르티아 원정 같은 무분별한 확장 정책보다는 </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">실용적인 정책이였다는 평이 대다수이다.</span></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">3. 안토니누스 피우스 황제</strong></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658335011/myportfolioblogproject/gg8cupbrbweo3ojn0fhm.gif" crossorigin="anonymous"></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">법률가 출신의 안토니누스 피우스 황제 시기에 들어서 주목할만한 업적은 다연히 로마법의 발전을 들수있다. 안토니누스 황제 시기에 비로소 \'재판에서 유죄 사실이 입중되기 전까지는 누구도 무죄로 간주해야 한다\' </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">라는 유명한 \'무죄추정의 원칙\' 을 확립하고 적용을 하였다. 사실 무죄추정 원칙 자체는 기원전 함무라비 법전에도 나올만큼 역사가 오래된 것이지만, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">안토니누스 피우스 황제 이전에는 무시하기 일쑤였으나 이를 법으로 명확히 규정한 황제이다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">안토니누스 피우스 황제 치세 23년 동안 전염병, 위기, 전쟁이 없었으며 로마 제국 황제 중에서는 군사적 원정을 경험한 바 없는 유일한 황제였다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하지만 통치시기가 평화롭다고 해서 할 일이 전혀 없었던 것은 아니다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그가 군사적인 업적이 없음에도 불구하고 오늘날까지도 현군으로 추앙받는 이유는 그의 국고 관리, 국고 재정 건전화 노력이었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그 당시 국고 재정이 잘 사는 부유한 동부 지방 (북아프리카, 소아시아, 그리스, 이집트) 들에서 거둬들인 속주세 의존 문제는 고질적인 약점이었다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">서방과 동방의 경제력 격차는 로마가 있는 이탈리아 본국에서 조차 정체를 넘어 쇠락기에 접어든 상황이었으며, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">도시 경제의 한계, 빈부격차 확대 등으로 안토니누스 피우스 황제가 단순히 넘길 문제가 아니었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이를 해결하기 위해서 안토니누스 피우스 황제는 서방과 이탈리아 본국에 계획적으로 돈을 풀어서 각종 항구, 농촌 인프라 건설을 확대하고 본국 내에서의 사회복지를 통해서 도시 경제 활성화를 위해 노력을 한다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그 당시, 이미 트라야누스 황제의 무리한 확장 정책, 하드리아누스 황제의 순행 과정에서 잘 사는 동방 속주세로 충단한 바가 많았기 때문에 더 이상 동방 속주세로만 국가 재정을 의존해선 안된다는 판단 하에 이런 내치 정책을 실행 한 것이다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">하드리아누스 황제, 안토니누수 피우스 황제의 내치 전념으로 인해 본격적인 이민족 침입이 시작되는 후임 황제 마르쿠스 아우렐리우스 황제에게 막대한 국고를 남겨줄 수 있었다.</span></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 255);" class="ql-size-large">4. 마르쿠스 아우렐리우스 황제</strong></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658335130/myportfolioblogproject/c0aex5enxcqmxsixbzw4.gif" crossorigin="anonymous"></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">유례없는 태평성대를 보낸 선제와 달리 마르쿠스 아우렐리우스 황제는 재위기간 동안 내내 군사령관이자 황제로서 힘든 삶을 보내야 했다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">어린 시절부터 철학을 논하고 사색에 잠기는 것을 좋아하고, 유례 없는 태평성대와 법률가 출신의 선제에게 군사적인 역량을 전혀 배우지 못했던 사람이 황제가 된 이후에는 전쟁터에서 대부분의 시간을 보내야만 했다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그 당시 안토니누스 역병으로 인해 군단 방위선에 균열이 가기 시작하고 이를 기회 여긴 게르만 족과 동방 파르티아의 침략을 자신의 동생 루키우스 베루스는 동방을 자신은 서방의 군사적 지휘를 맡으면서 군사적인 역량을 전혀 배운바 없음에도 불구하고, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이를 성공적으로 격퇴하고 방어선을 안정시킨 유능한 지휘관이었다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그 당시 가장 치열한 전쟁터였던 도나우 강 방어선에서 고된 국방문제를 앞장서서 해결을 했고, 안그래도 선천적으로 좋지 못했던 그의 건강을 악화시켰다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">원래 타 로마 황제들과는 달리 장군 출신이 아니고 학자 타입에다가 선제로 부터 군사적인 업무를 전혀 배우지 못했지만 항상 추위에 덜덜 떨며 쿨럭거리면서도 최전선에 나갔다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그리고 잠시 로마로 돌아와 행정적인 업무를 처리했으며, 시간적 여유가 되지 않는다면 전쟁터에서 행정적인 업무를 처리를 할 정도로 부지런한 황제였다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">이에 모든 직업군인, 장교, 군단들은 그와 그의 가문에 진심으로 협력했으며 이는 마르쿠스 아우렐리우스 황제의 군사적인 약점을 보완해주었다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">그 결과, 그가 죽기 직전 로마군은 도나우 강을 넘어 보헤미아 지역을 평정하고 있을 정도 였으며, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(123, 109, 109);" class="ql-size-large">뒤를 이은 아들 콤모두스가 황제 부적격자임에도 불구하고 모든 장교들이 전선의 제자리에서 묵묵히 자리를 지켜 향후 로마 내전을 방지했다는 평가도 받고 있는 황제이다.</span></p><p><span class="ql-size-large">﻿</span></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-07-20T16:40:47.716Z',
    updatedAt: '2022-07-20T16:40:47.716Z',
    __v: 0,
  },
  {
    _id: '62dbf746dae85b0fd5ac861f',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1658583576/myportfolioblogproject/uksahxti2qtod5regxry.gif',
    title: 'MySQL 전반전인 개념 및 Query 명령어 정리',
    text: '<h3>*2022년 11월 29일 추가</h3><p><br></p><p>오랜 만에 MySQL 작업을 하다가 아래와 같은 에러를 만나서 고생을 함.</p><p>아래의 코드를 활용하여 해결하도록 하자!!</p><h3><br></h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-title class_">Error</span>: <span class="hljs-attr">ER_NOT_SUPPORTED_AUTH_MODE</span>: <span class="hljs-title class_">Client</span> does not support authentication protocol requested by server; consider upgrading <span class="hljs-title class_">MySQL</span> client\n\n<span class="hljs-comment">// 위와 같은 에러 발생시, 아래의 코드를 입력해서 해결</span>\n\n<span class="hljs-variable constant_">ALTER</span> <span class="hljs-variable constant_">USER</span> <span class="hljs-string">\'[MYSQL 아이디]\'</span>@<span class="hljs-string">\'[MYSQL 주소]\'</span> <span class="hljs-variable constant_">IDENTIFIED</span> <span class="hljs-variable constant_">WITH</span> mysql_native_password <span class="hljs-variable constant_">BY</span> <span class="hljs-string">\'[MYSQL 비밀번호]\'</span>;\n<span class="hljs-variable constant_">ALTER</span> <span class="hljs-variable constant_">USER</span> <span class="hljs-string">\'root\'</span>@<span class="hljs-string">\'localhost\'</span> <span class="hljs-variable constant_">IDENTIFIED</span> <span class="hljs-variable constant_">WITH</span> mysql_native_password <span class="hljs-variable constant_">BY</span> <span class="hljs-string">\'asdf1234\'</span>;\n</pre><p><br></p><h3><br></h3><h3>*employees table</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658581332/myportfolioblogproject/gkacjzdpmwi4mnch26kf.gif" crossorigin="anonymous"></p><h3>*tasks table</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658581356/myportfolioblogproject/szng6dg00vjp3pfezgri.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><span class="ql-size-large">먼저 mysql 테이블 shema를 위와 같이 구성함</span></p><p><br></p><p><span class="ql-size-large">tasks table에서 employess table 정보를 가리키는</span></p><p><span class="ql-size-large">외래키는 tasks table의 userId를 외래키로 정하고, </span></p><p><span class="ql-size-large">employees 테이블의 id로 연결해준다.</span></p><p><br></p><p><span class="ql-size-large">이렇게 외래키를 설정해주면 tasks 테이블에서,</span></p><p><span class="ql-size-large">새로운 데이터 행을 추가해주면, 추가하기 전에,</span></p><p><span class="ql-size-large">employees table에 관련 </span><strong class="ql-size-large" style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>외래키 아이디에 부합하는</em></strong></p><p><strong class="ql-size-large" style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>정보가 있는지 확인</em></strong><span class="ql-size-large">하고 tasks 테이블에 새로운 데이터 행을 추가해준다.</span></p><p><strong class="ql-size-large" style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>만약에 employees table에 부합하는 id에 해당하는 정보가 없다면,</em></strong></p><p><strong class="ql-size-large" style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>에러를 발생시킨다.</em></strong></p><p><br></p><p><span class="ql-size-large">외래키를 꼭 설정을 해주어야 하는 지에 대해서는 논란이 있지만,</span></p><p><span class="ql-size-large">이런 관계형 데이터 베이스에서 외래키를 설정해 주는것이 어느정도는</span></p><p><span class="ql-size-large">좋은 것 같다.</span></p><p><br></p><p><br></p><h3>*app.ts</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> dotenv <span class="hljs-keyword">from</span> <span class="hljs-string">\'dotenv\'</span>;\n<span class="hljs-keyword">import</span> express, { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> cors <span class="hljs-keyword">from</span> <span class="hljs-string">\'cors\'</span>;\n<span class="hljs-keyword">import</span> helmet <span class="hljs-keyword">from</span> <span class="hljs-string">\'helmet\'</span>;\n<span class="hljs-keyword">import</span> morgan <span class="hljs-keyword">from</span> <span class="hljs-string">\'morgan\'</span>;\n<span class="hljs-keyword">import</span> mysql <span class="hljs-keyword">from</span> <span class="hljs-string">\'mysql\'</span>;\n\n<span class="hljs-keyword">import</span> employeesRouter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/employees\'</span>;\n<span class="hljs-keyword">import</span> tasksRouter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/tasks\'</span>;\n<span class="hljs-keyword">import</span> joinRouter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/join\'</span>;\n\ndotenv.<span class="hljs-title function_">config</span>();\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> db = mysql.<span class="hljs-title function_">createConnection</span>({\n&nbsp; <span class="hljs-attr">user</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">USER</span>,\n&nbsp; <span class="hljs-attr">host</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">HOST</span>,\n&nbsp; <span class="hljs-attr">password</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">PWD</span>,\n&nbsp; <span class="hljs-attr">database</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DB</span>,\n});\n\napp.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>());\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">morgan</span>(<span class="hljs-string">\'tiny\'</span>));\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/employees\'</span>, employeesRouter);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/tasks\'</span>, tasksRouter);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/join\'</span>, joinRouter);\n\napp.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/initemployeeid\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'ALTER TABLE employees AUTO_INCREMENT = 1\'</span>, [], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'initialize the auto employees Increment!\'</span>);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; });\n&nbsp; }\n);\n\napp.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/inittaskid\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'ALTER TABLE tasks AUTO_INCREMENT = 1\'</span>, [], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'initialize the auto tasks Increment!\'</span>);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; });\n&nbsp; }\n);\n\napp.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'MySQL have been started!\'</span>);\n});\n</pre><p><br></p><p><span class="ql-size-large">위와 같이 mysql 데이터 베이스에 연결을 시켜주고, 각종 Query 문법에 대해서 알아보자</span></p><p><br></p><p><br></p><h3>*employees.ts (as controller)</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span>, <span class="hljs-title class_">Router</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> { db } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../app\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createEmployee</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> name = req.<span class="hljs-property">body</span>.<span class="hljs-property">name</span>;\n&nbsp; <span class="hljs-keyword">const</span> age = req.<span class="hljs-property">body</span>.<span class="hljs-property">age</span>;\n&nbsp; <span class="hljs-keyword">const</span> country = req.<span class="hljs-property">body</span>.<span class="hljs-property">country</span>;\n&nbsp; <span class="hljs-keyword">const</span> position = req.<span class="hljs-property">body</span>.<span class="hljs-property">position</span>;\n&nbsp; <span class="hljs-keyword">const</span> wage = req.<span class="hljs-property">body</span>.<span class="hljs-property">wage</span>;\n\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'INSERT INTO employees (name, age, country, position, wage) VALUES (?,?,?,?,?)\'</span>,\n&nbsp; &nbsp; [name, age, country, position, wage],\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">201</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n<span class="hljs-comment">// 말그대로 새로운 데이터를 삽입해주는 문구임.</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTotalEmployees</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'SELECT * FROM employees\'</span>, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; }\n&nbsp; });\n};\n<span class="hljs-comment">// 테이블 전체 데이터를 가지고 오는 문구</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getEmployee</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> employeeId = req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'SELECT * FROM employees WHERE id=?\'</span>,\n&nbsp; &nbsp; [employeeId],\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n<span class="hljs-comment">// where 구문 안에 조건에 맞는 데이터를 테이블로 부터 받아오는 것</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateEmployee</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span>;\n&nbsp; <span class="hljs-keyword">const</span> wage = req.<span class="hljs-property">body</span>.<span class="hljs-property">wage</span>;\n\n\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'UPDATE employees SET wage=? WHERE id=?\'</span>,\n&nbsp; &nbsp; [wage, id],\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">201</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n<span class="hljs-comment">// where 구문 조건에 맞는 테이블 안의 자료 데이터를 업데이트 하는 것</span>\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteEmployee</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> id = req.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>;\n&nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'DELETE FROM employees WHERE id=?\'</span>, [id], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">204</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'Delete it successfully\'</span>);\n&nbsp; &nbsp; }\n&nbsp; });\n};\n<span class="hljs-comment">// where 구문 조건에 맞는 데이터를 삭제하는 문구</span>\n</pre><p><br></p><p><br></p><h3>*tasks.ts (as controller)</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> { db } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../app\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createTask</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> taskName = req.<span class="hljs-property">body</span>.<span class="hljs-property">taskName</span>;\n&nbsp; <span class="hljs-keyword">const</span> hour = req.<span class="hljs-property">body</span>.<span class="hljs-property">hour</span>;\n&nbsp; <span class="hljs-keyword">const</span> userId = req.<span class="hljs-property">body</span>.<span class="hljs-property">userId</span>;\n\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'INSERT INTO tasks (taskName, hour, userId) VALUES (?,?,?)\'</span>,\n&nbsp; &nbsp; [taskName, hour, userId],\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">201</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTotalTasks</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'SELECT * FROM tasks\'</span>, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; }\n&nbsp; });\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTask</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> taskId = req.<span class="hljs-property">params</span>.<span class="hljs-property">taskId</span>;\n&nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'SELECT * FROM tasks WHERE taskId=?\'</span>, [taskId], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; }\n&nbsp; });\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateTask</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> taskId = req.<span class="hljs-property">body</span>.<span class="hljs-property">taskId</span>;\n&nbsp; <span class="hljs-keyword">const</span> taskName = req.<span class="hljs-property">body</span>.<span class="hljs-property">taskName</span>;\n&nbsp; <span class="hljs-keyword">const</span> hour = req.<span class="hljs-property">body</span>.<span class="hljs-property">hour</span>;\n&nbsp; <span class="hljs-keyword">const</span> userId = req.<span class="hljs-property">body</span>.<span class="hljs-property">userId</span>;\n\n\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'UPDATE tasks SET taskName=?, hour=?, userId=? WHERE taskId=?\'</span>,\n&nbsp; &nbsp; [taskName, hour, userId, taskId],\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">deleteTask</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> taskId = req.<span class="hljs-property">params</span>.<span class="hljs-property">taskId</span>;\n\n\n&nbsp; db.<span class="hljs-title function_">query</span>(<span class="hljs-string">\'DELETE FROM tasks WHERE taskId=?\'</span>, [taskId], <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">204</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; }\n&nbsp; });\n};\n</pre><p><br></p><p><br></p><h3>*join.ts (as controller)</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span>, <span class="hljs-title class_">Router</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> { db } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../app\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">innerJoin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'SELECT e.id, e.name, e.age, e.country, e.position, e.wage, t.taskName, t.hour, t.userId FROM employees AS e JOIN tasks AS t ON e.id=t.userId\'</span>,\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">leftJoin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'SELECT * FROM employees AS e LEFT JOIN tasks AS t ON e.id=t.userId\'</span>,\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">exclusiveLeftJoin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-comment">// 아래 조인한 t 테이블 값이 null만 출력하라는 것은 조인이 안된 e 테이블을 출력하라는 말임</span>\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'SELECT * FROM employees AS e LEFT JOIN tasks AS t ON e.id=t.userId WHERE t.userId IS NULL\'</span>,\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">groupbyHaving</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; <span class="hljs-string">\'SELECT e.age FROM employees AS e GROUP BY age HAVING age &lt; 30 ORDER BY age ASC\'</span>,\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(result);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; );\n};\n\n</pre><p><br></p><h3>1.JOIN ( INNER JOIN, CROSS JOIN )</h3><p><br></p><p><strong><em>SELECT a.id, a.text, a.createdAt, a.userId, a.username, a.name, a.url FROM agroup AS a JOIN bgroup AS b ON a.id=b.id</em></strong></p><p><br></p><p>inner join 은 어느 테이블 기준으로 조인하든 조인 관계에 부합되는 레코드를 모두 가지게 된다.&nbsp;</p><p>그리고 조인에 부합되지 않는 레코드는 모두 삭제 된다.&nbsp;</p><p><br></p><h3>2.LEFT JOIN</h3><p><br></p><p><strong><em>SELECT * FROM a LEFT JOIN b 0N a.id = b.id</em></strong></p><p><br></p><p>a 테이블 기준으로 두번째 테이블 조합</p><p>a 테이블 값 전체를 무조건 가져오고,</p><p>b 테이블 값은 on 절에서 a.id = b.id 인 값만 출력해서,</p><p>b 테이블을 재조합한다.</p><p>(MySQL 상의 테이블을 조합한다는 의미가 아님. 출력 결과를 재조합)</p><p><br></p><h3>3.LEFT JOIN ~ WHERE ~ IS NULL ( EXCLUSIVE LEFT JOIN )</h3><p><br></p><p><strong><em>SELECT * FROM agroup AS a LEFT JOIN bgroup AS b ON a.id = b.id </em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>WHERE b.id IS null</em></strong><strong><em> </em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>OREDER BY b.id ASC</em></strong></p><p><br></p><p>위의 기준 LEFT JOIN 값 결과 값에서 순수 a 테이블 값만 뽑을때 위와 같이 where 절을 써준다.</p><p>그리고 그 결과 테이블을 b.id 값의 오름차순( ASC )으로 정렬한다.</p><p><br></p><h3>4.GROUP BY, HAVING</h3><p><br></p><p>테이블 column 데이터 항목 별로 GROUP BY 로 그룹핑 한 다음 HAVING 문구로 조건을 주어서 필터링.</p><p>즉 GROUP BY로 지정된 데이터를 기준으로 HAVING 조건에 부합하는 데이터 행만 필터링 추출 하는 것임.</p><p><br></p><p>위의 소스 코드 결과 값을 아래 Postman 출력 사진으로 이해를 해보자</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-string">\'SELECT e.id, e.name, e.age, e.country, e.position, e.wage, t.taskName, t.hour, t.userId FROM employees AS e JOIN tasks AS t ON e.id=t.userId\'</span>\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658582769/myportfolioblogproject/zy8efsd5z7vdeeqo3mwp.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-string">\'SELECT * FROM employees AS e LEFT JOIN tasks AS t ON e.id=t.userId\'</span>,\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658582793/myportfolioblogproject/g5uyyni6hfk5trcyxln3.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-string">\'SELECT * FROM employees AS e LEFT JOIN tasks AS t ON e.id=t.userId WHERE t.userId IS NULL\'</span>,\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658582813/myportfolioblogproject/tei5prt1xxcqngzzxxuz.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-string">\'SELECT e.age FROM employees AS e GROUP BY age HAVING age &lt; 30 ORDER BY age ASC\'</span>,\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658582825/myportfolioblogproject/hggq19bf0du78hkhvv44.gif" crossorigin="anonymous"></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-07-23T13:27:34.198Z',
    updatedAt: '2022-11-29T09:42:35.623Z',
    __v: 0,
  },
  {
    _id: '62df639ab206fc9f7d73ae9c',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1658801165/myportfolioblogproject/s5fby8bsergjhpqpsmpk.gif',
    title: 'NodeJS (with TypeScript) - MySQL  Heroku 배포방법',
    text: '<h3><strong>*app.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">// import dotenv from \'dotenv\';</span>\n<span class="hljs-built_in">require</span>(<span class="hljs-string">\'dotenv\'</span>).<span class="hljs-title function_">config</span>();\n<span class="hljs-comment">// import { config } from \'dotenv\';</span>\n<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'express\'</span>);\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'cors\'</span>);\n<span class="hljs-comment">// import cors from \'cors\';</span>\n<span class="hljs-keyword">const</span> helmet = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'helmet\'</span>);\n<span class="hljs-comment">// import helmet from \'helmet\';</span>\n<span class="hljs-keyword">const</span> morgan = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'morgan\'</span>);\n<span class="hljs-comment">// import morgan from \'morgan\';</span>\n<span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'mysql\'</span>);\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">MysqlError</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'mysql\'</span>;\n\n<span class="hljs-comment">// 굳이 require로 해주는 이유는 heroku build 과정에서</span>\n<span class="hljs-comment">// es6 문법 import를 자바스크립트로 제대로 컴파일이 안해줌.</span>\n<span class="hljs-comment">// 그리도 필요한 메소드 함수는 { 메소드함수 } 이런식으로 호출!!</span>\n\n<span class="hljs-keyword">import</span> employeesRouter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/employees\'</span>;\n<span class="hljs-keyword">import</span> tasksRouter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/tasks\'</span>;\n<span class="hljs-keyword">import</span> joinRouter <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/join\'</span>;\n\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();\n\n<span class="hljs-keyword">let</span> config = {\n&nbsp; <span class="hljs-attr">host</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DB_HOST</span>,\n&nbsp; <span class="hljs-attr">user</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DB_USERNAME</span>,\n&nbsp; <span class="hljs-attr">password</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DB_PWD</span>,\n&nbsp; <span class="hljs-attr">database</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DB_DATABASE</span>,\n};\n\n<span class="hljs-comment">// 백엔스 설정 관련 .env 파일 이름 설정할때</span>\n<span class="hljs-comment">// 포트는 PORT</span>\n<span class="hljs-comment">// username, password, database는 앞에 DB_ 를 꼭 붙여준다.</span>\n<span class="hljs-comment">// 이렇게 안해주면 heroku 배포시 에러가 발생하는데</span>\n<span class="hljs-comment">// 이유는 모름</span>\n\n<span class="hljs-comment">// @ts-ignore</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> db;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">handleDisconnect</span>() {\n&nbsp; db = mysql.<span class="hljs-title function_">createConnection</span>(config);\n\n&nbsp; db.<span class="hljs-title function_">connect</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err: MysqlError</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'error when connecting to db:\'</span>, err);\n&nbsp; &nbsp; &nbsp; <span class="hljs-built_in">setTimeout</span>(handleDisconnect, <span class="hljs-number">2000</span>);\n&nbsp; &nbsp; }\n&nbsp; });\n\n&nbsp; db.<span class="hljs-title function_">on</span>(<span class="hljs-string">\'error\'</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err: MysqlError</span>) {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'db error\'</span>, err);\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (err.<span class="hljs-property">code</span> === <span class="hljs-string">\'PROTOCOL_CONNECTION_LOST\'</span>) {\n&nbsp; &nbsp; &nbsp; <span class="hljs-title function_">handleDisconnect</span>();\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">throw</span> err;\n&nbsp; &nbsp; }\n&nbsp; });\n}\n\n<span class="hljs-title function_">handleDisconnect</span>();\n<span class="hljs-comment">// heroku 빋르 배포, MySQL DB 배포 후 </span>\n<span class="hljs-comment">// 일정 시간 HTTP 요청이 없으면 MySQL DB에서 </span>\n<span class="hljs-comment">// 자동으로 끊는 문제 발생..</span>\n<span class="hljs-comment">// 위의 코드로 끊김시 재연결 코드 실행!!</span>\n\napp.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>());\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>());\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">morgan</span>(<span class="hljs-string">\'tiny\'</span>));\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/employees\'</span>, employeesRouter);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/tasks\'</span>, tasksRouter);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/join\'</span>, joinRouter);\n\napp.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/initemployeeid\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'ALTER TABLE employees AUTO_INCREMENT = 1\'</span>,\n&nbsp; &nbsp; &nbsp; [],\n&nbsp; &nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err: MysqlError | <span class="hljs-literal">null</span>, result: any</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'initialize the auto employees Increment!\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; );\n&nbsp; }\n);\n\napp.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/inittaskid\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; db.<span class="hljs-title function_">query</span>(\n&nbsp; &nbsp; &nbsp; <span class="hljs-string">\'ALTER TABLE tasks AUTO_INCREMENT = 1\'</span>,\n&nbsp; &nbsp; &nbsp; [],\n&nbsp; &nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err: MysqlError | <span class="hljs-literal">null</span>, result: any</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(err);\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'initialize the auto tasks Increment!\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; );\n&nbsp; }\n);\n\napp.<span class="hljs-title function_">listen</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> {\n<span class="hljs-comment">// heroku 설정에 또 자체적인 설정이 있기 때문에 포트 번호 동적으로 선정!!</span>\n<span class="hljs-comment">// process.env.PORT || 8080 으로 해야 빌드시 에러가 나지 않음.</span>\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'MySQL have been started!\'</span>);\n});\n</pre><p><br></p><p>일단 위와 같이 설정을 해주어야 에러가 나지 않음.</p><p>자세한 설정 방법은 위의 주석문 참고...</p><p><br></p><p><br></p><h3><strong>*tsconfig.json </strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false">{\n&nbsp; "compilerOptions": {\n&nbsp; &nbsp; <span class="hljs-comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span>\n\n&nbsp; &nbsp; <span class="hljs-comment">/* Projects */</span>\n&nbsp; &nbsp; // "incremental": true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"composite"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"tsBuildInfoFile"</span>: <span class="hljs-string">"./.tsbuildinfo"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"disableSourceOfProjectReferenceRedirect"</span>: true, &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"disableSolutionSearching"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"disableReferencedProjectLoad"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n\n&nbsp; &nbsp; <span class="hljs-comment">/* Language and Environment */</span>\n&nbsp; &nbsp; <span class="hljs-string">"target"</span>: <span class="hljs-string">"ES6"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"lib"</span>: [], &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"jsx"</span>: <span class="hljs-string">"preserve"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"experimentalDecorators"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"emitDecoratorMetadata"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"jsxFactory"</span>: <span class="hljs-string">""</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"jsxFragmentFactory"</span>: <span class="hljs-string">""</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"jsxImportSource"</span>: <span class="hljs-string">""</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"reactNamespace"</span>: <span class="hljs-string">""</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noLib"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"useDefineForClassFields"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"moduleDetection"</span>: <span class="hljs-string">"auto"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp; <span class="hljs-comment">/* Modules */</span>\n&nbsp; &nbsp; <span class="hljs-string">"module"</span>: <span class="hljs-string">"CommonJS"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"rootDir"</span>: <span class="hljs-string">"./"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"moduleResolution"</span>: <span class="hljs-string">"node"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"baseUrl"</span>: <span class="hljs-string">"./"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"paths"</span>: {}, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // "rootDirs": [], &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; <span class="hljs-string">"typeRoots"</span>: [<span class="hljs-string">"./types/index.d.ts"</span> ,<span class="hljs-string">"./node_modules/@types"</span>], &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"types"</span>: [], &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"allowUmdGlobalAccess"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"moduleSuffixes"</span>: [], &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"resolveJsonModule"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noResolve"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp; <span class="hljs-comment">/* JavaScript Support */</span>\n&nbsp; &nbsp; <span class="hljs-string">"allowJs"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"checkJs"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"maxNodeModuleJsDepth"</span>: <span class="hljs-number">1</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp; <span class="hljs-comment">/* Emit */</span>\n&nbsp; &nbsp; // <span class="hljs-string">"declaration"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"declarationMap"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"emitDeclarationOnly"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; <span class="hljs-string">"sourceMap"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"outFile"</span>: <span class="hljs-string">"./"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; <span class="hljs-string">"outDir"</span>: <span class="hljs-string">"dist"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"removeComments"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noEmit"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"importHelpers"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"importsNotUsedAsValues"</span>: <span class="hljs-string">"remove"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"downlevelIteration"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"sourceRoot"</span>: <span class="hljs-string">""</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"mapRoot"</span>: <span class="hljs-string">""</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"inlineSourceMap"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"inlineSources"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"emitBOM"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"newLine"</span>: <span class="hljs-string">"crlf"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"stripInternal"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noEmitHelpers"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noEmitOnError"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"preserveConstEnums"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"declarationDir"</span>: <span class="hljs-string">"./"</span>, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"preserveValueImports"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n\n&nbsp; &nbsp; <span class="hljs-comment">/* Interop Constraints */</span>\n&nbsp; &nbsp; // <span class="hljs-string">"isolatedModules"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; <span class="hljs-string">"allowSyntheticDefaultImports"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; <span class="hljs-string">"esModuleInterop"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"preserveSymlinks"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; <span class="hljs-string">"forceConsistentCasingInFileNames"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n\n&nbsp; &nbsp; <span class="hljs-comment">/* Type Checking */</span>\n&nbsp; &nbsp; <span class="hljs-string">"strict"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"noImplicitAny"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"strictNullChecks"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"strictFunctionTypes"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"strictBindCallApply"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"strictPropertyInitialization"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noImplicitThis"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"useUnknownInCatchVariables"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"alwaysStrict"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noUnusedLocals"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noUnusedParameters"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"exactOptionalPropertyTypes"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noImplicitReturns"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"noFallthroughCasesInSwitch"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noUncheckedIndexedAccess"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noImplicitOverride"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"noPropertyAccessFromIndexSignature"</span>: true, &nbsp; &nbsp; &nbsp; \n&nbsp; &nbsp; // <span class="hljs-string">"allowUnusedLabels"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; // <span class="hljs-string">"allowUnreachableCode"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n\n&nbsp; &nbsp; <span class="hljs-comment">/* Completeness */</span>\n&nbsp; &nbsp; // <span class="hljs-string">"skipDefaultLibCheck"</span>: true, &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\n&nbsp; &nbsp; <span class="hljs-string">"skipLibCheck"</span>: true &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \n&nbsp; }\n}\n</pre><p><br></p><p>타입스크립트 컴파일 환경설정은 위와 같이 구성!!</p><p><br></p><p><br></p><h3><strong>*package.json</strong></h3><h3><br></h3><pre class="ql-syntax" spellcheck="false"> {\n&nbsp; <span class="hljs-string">"name"</span>: <span class="hljs-string">"mysql-recap"</span>,\n&nbsp; <span class="hljs-string">"version"</span>: <span class="hljs-string">"1.0.0"</span>,\n&nbsp; <span class="hljs-string">"main"</span>: <span class="hljs-string">"app.js"</span>,\n&nbsp; <span class="hljs-string">"type"</span>: <span class="hljs-string">"commonjs"</span>,\n&nbsp; <span class="hljs-string">"scripts"</span>: {\n&nbsp; &nbsp; <span class="hljs-string">"start"</span>: <span class="hljs-string">"node app.js"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"build"</span>: <span class="hljs-string">"npx tsc app.ts"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"postinstall"</span>: <span class="hljs-string">"npm run build"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"test"</span>: <span class="hljs-string">"echo \\"Error: no test specified\\" &amp;&amp; exit 1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"dev"</span>: <span class="hljs-string">"concurrently \\"nodemon ./dist/app.js\\" \\"tsc -w\\""</span>\n&nbsp; },\n&nbsp; <span class="hljs-string">"engines"</span>: {\n&nbsp; &nbsp; <span class="hljs-string">"node"</span>: <span class="hljs-string">"16.14.0"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"npm"</span>: <span class="hljs-string">"8.3.1"</span>\n&nbsp; },\n&nbsp; <span class="hljs-string">"author"</span>: <span class="hljs-string">""</span>,\n&nbsp; <span class="hljs-string">"license"</span>: <span class="hljs-string">"ISC"</span>,\n&nbsp; <span class="hljs-string">"description"</span>: <span class="hljs-string">""</span>,\n&nbsp; <span class="hljs-string">"dependencies"</span>: {\n&nbsp; &nbsp; <span class="hljs-string">"@types/cors"</span>: <span class="hljs-string">"^2.8.12"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"@types/express"</span>: <span class="hljs-string">"^4.17.13"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"@types/morgan"</span>: <span class="hljs-string">"^1.9.3"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"@types/mysql"</span>: <span class="hljs-string">"^2.15.21"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"@types/node"</span>: <span class="hljs-string">"^18.0.4"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"@types/nodemon"</span>: <span class="hljs-string">"^1.19.1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"concurrently"</span>: <span class="hljs-string">"^7.2.2"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"cors"</span>: <span class="hljs-string">"^2.8.5"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"dotenv"</span>: <span class="hljs-string">"^16.0.1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"express"</span>: <span class="hljs-string">"^4.18.1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"express-async-errors"</span>: <span class="hljs-string">"^3.1.1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"helmet"</span>: <span class="hljs-string">"^5.1.0"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"morgan"</span>: <span class="hljs-string">"^1.10.0"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"mysql"</span>: <span class="hljs-string">"^2.18.1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"nodemon"</span>: <span class="hljs-string">"^2.0.19"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"ts-node"</span>: <span class="hljs-string">"^10.9.1"</span>,\n&nbsp; &nbsp; <span class="hljs-string">"typescript"</span>: <span class="hljs-string">"^4.7.4"</span>\n&nbsp; }\n}\n</pre><p><br></p><p><span style="color: rgb(0, 0, 0);">heroku는 devdependency를 인식하지 못해서 에러가 발생하기 때문에</span></p><p><span style="color: rgb(0, 0, 0);">전부 dependency로 옮겨주어서 재설치 해준다.</span></p><p><span style="color: rgb(0, 0, 0);">그리고 글로벌로 typescrip, ts-node를 설치 해주었다고 할지라도,</span></p><p><span style="color: rgb(0, 0, 0);">프로젝트 내부적으로도 설치를 해주어야 한다.</span></p><p>​</p><p><span style="color: rgb(0, 0, 0);">"dev" 는 npm run dev 로 콘솔 실행시 로컬 상으로 서버 구동할 수 있도록 설정.</span></p><p><span style="color: rgb(0, 0, 0);">"postinstall" 설정을 통해서 서버 배포 전 npm run build 가 진행되도록 하며,</span></p><p><span style="color: rgb(0, 0, 0);">"build" 설정을 해준다. 보통 tsc 만 입력하여 타입스크립트 파일이 자바스크립트로 컴파일 되게 하며,</span></p><p><span style="color: rgb(0, 0, 0);">만약 "build" 설정 tsc 만으로 tsc not found module 에러가 발생한다면,</span></p><p><span style="color: rgb(0, 0, 0);">아래와 같이 npx tsc app.ts 로 npx 가 강제적으로 실행하게끔 한다.</span></p><p>​</p><p><span style="color: rgb(0, 0, 0);">그리고 "start" 의 node app.js 로 build 후 컴파일된 app.js를 실행하게끔 한다.</span></p><p><br></p><p><br></p><h3><strong style="background-color: rgb(249, 250, 251);">*index.d.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n\n<span class="hljs-keyword">declare</span> <span class="hljs-variable language_">global</span> {\n&nbsp; <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">NodeJS</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProcessEnv</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">PORT</span>: <span class="hljs-built_in">any</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">USER</span>: <span class="hljs-built_in">any</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">HOST</span>: <span class="hljs-built_in">any</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">PWD</span>: <span class="hljs-built_in">any</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">DB</span>: <span class="hljs-built_in">any</span>;\n&nbsp; &nbsp; }\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Express</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Request</span> {\n&nbsp; &nbsp; &nbsp; user?: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">Object</span> | <span class="hljs-title class_">String</span>&gt;;\n&nbsp; &nbsp; }\n&nbsp; }\n}\n</pre><p><br></p><p>types 폴더(node_modules 아님!!) 안에 있는 자체적인 타입, 인터페이스 정의 한 곳이다.</p><p>만약 env 환경변수 타입, 인터페이스를 위와 같이 설정을 해서,</p><p>사용하고 있다면 배포시에는 모두 any로 바꾸어 주어야함..</p><p>그래야 빌드, 배포시 에러가 나지 않음..</p><p><br></p><p><br></p><h3><strong style="background-color: rgb(249, 250, 251);">*Procfile</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false">web: node app.js\n</pre><p><br></p><p><span style="color: rgb(0, 0, 0);">프로젝트 최상위 root 위치에 Procfile 을 설정해주어야 한다.</span></p><p><span style="color: rgb(0, 0, 0);">Heroku 서버가 node 실행 위치를 찾을 수 있게끔 아래와 같이 설정.</span></p><p><span style="color: rgb(0, 0, 0);">주의 사항은 반드시 프로젝트 최상위 위치에 Procfile을 만들어야 하며,</span></p><p><span style="color: rgb(0, 0, 0);">그리고 web : node app.js ~ 이렇게 띄어서 쓰면 안되고,</span></p><p><span style="color: rgb(0, 0, 0);">web: node app.js 이렇게 붙여서 써야한다.</span></p><p><span style="color: rgb(0, 0, 0);">아니면 에러가 발생함.</span></p><p><br></p><p><br></p><p><span style="color: rgb(0, 0, 0);">cf) 그리고 만약 배포시 build 설정을 여러번 하여 과도한 build 파일들이 저장되어,</span></p><p><strong style="color: rgb(0, 0, 0); background-color: inherit;">Heroku: Your account has reached its concurrent build limit</strong></p><p><span style="color: rgb(0, 0, 0);">위와 같은 에러 발생시...</span></p><p><br></p><pre class="ql-syntax" spellcheck="false">$ heroku plugins:install heroku-builds\n$ heroku builds:cancel\n$ heroku restart\n</pre><p><br></p><p><span style="color: rgb(0, 0, 0);">위 명령어를 콘솔에 입력하여 build 파일을 삭제해주면,</span></p><p><span style="color: rgb(0, 0, 0);">에러가 해결됨!!</span></p><p><br></p><p><br></p><p><span style="color: rgb(0, 0, 0);">위와 같이 다 설정을 해주었다면, heroku 아래 명령어로 배포를 시작해보자!!</span></p><p><span style="color: rgb(0, 0, 0);">먼저 헤로쿠에서 새로운 프로젝트를 생성하고..</span></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658803159/myportfolioblogproject/o35rjlqlddoougcewg8u.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false">$ heroku login\n\n$ cd my-project/\n$ git init\n$ heroku <span class="hljs-attr">git</span>:remote -a testmysql4\n\n$ git add .\n$ git commit -am <span class="hljs-string">"make it better"</span>\n$ git push heroku master\n</pre><p><br></p><p><br></p><p>위와 같이 설정을 하고 성공적으로 서버가 배포가 되었다면,</p><p>이제는 로컬상으로 구동하는 mysql 백엔드 database를 heroku에서</p><p>서비스하는 다른 db 배포 서비스로 배포를 해주어야 한다.</p><p>그 작업을 이제부터 시작을 해보자..</p><p><br></p><p>heroku 프로젝트 내에 Resources란 항목에 들어가서</p><p>mysql db 배포 서비스를 검색해보자.</p><p>그럼 clearDB MySQL이 뜰것임..</p><p>그것을 선택해준다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658803496/myportfolioblogproject/bg3fb2bza9fwzccpua4z.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>그런 아래와 같은 화면이 뜨는데 이것을 무료로 이용을 하려면</p><p>카드 정보를 등록해야한다.</p><p>Heroku에 별다른 결제없이 카드정보만 등록을 해두면,</p><p>한달 서버 무료 구동시간 500시간에서 1000시간으로 늘어나게 된다.</p><p>그래서 손해볼 장사는 아닌것 같아서 안쓰는 Master카드에 2000원을</p><p>넣어두고 그 카드 정보를 등록해주었다.</p><p>등록을 하게되면 heroku 측에서 500원 혹은 750원만 결제 요청을 하고</p><p>바로 취소시켜주는 절차를 통해 카드 정보가 등록되게됨..</p><p><br></p><p>그래도 보안상 이유로 내가 주로 쓰는 카드가 아닌 안 쓰는 카드에</p><p>2000원 넣어두고 카드정보만 등록해놓았음</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658803582/myportfolioblogproject/xb1ba8ys25r0pm2zpm3h.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>그럼 아래와 같이 등록이 되게 되고....</p><p>우리에게 api 키 값 같은 것을 주게 되는데...</p><p>확인을 해보자...</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658803818/myportfolioblogproject/r6eg2ldarkbsvgenlf8y.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>위와 같이 등록을 하게되고 config 환경변수 설정하는 곳으로 오게 되면,</p><p>아래와 같은 db 배포 key 값이 자동적으로 배정되어 있는데,</p><p>저것을 일단은 그대로 복사해놓자!!</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658803863/myportfolioblogproject/omrbnjjwbegkwlxek9ur.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><h2><br></h2><h3>mysql://b3c2a300ef5d0d:fb18b3c0@us-cdbr-east-06.cleardb.net/heroku_70155451da15260?reconnect=true</h3><p><br></p><p>위의 키 값을 배포 받으면 아래와 같이 .env 환경변수 설정 파일을 구성해준다 .</p><p>heroku .env 환경변수 설정하는 곳도 마찬가지로 위의 키 값에 따라 변경해준다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658804724/myportfolioblogproject/nyga5n2adomzwk3ktimp.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658804944/myportfolioblogproject/gxaeicmuct7hayxnmv3l.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>그리고 MySQL Workbench 에 들어가서...</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805440/myportfolioblogproject/j8inhcxtb2bfvjpac9te.gif" crossorigin="anonymous"></p><p><br></p><p>MySQL WORKBENCH에 들어가면 MySQL Connections 옆에 플러스 버튼을 클릭하면 아래와 같은 이미지가 뜰것이다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805448/myportfolioblogproject/ka7d4f2dgterui7dxuuw.gif" crossorigin="anonymous"></p><p><br></p><p>그럼 여기서 위에서 발급받은 db 배포 서비스 키값의 username, hostname, password를 위와 같이 설정을 해준다.</p><p>port 번호는 서버 port 랑 db port 랑 엄연히 다르게 운용되기 때문에 port 번호까지 바꿀필요는 없음.</p><p><br></p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805461/myportfolioblogproject/tzonbevv1olhwlspew6l.gif" crossorigin="anonymous"></p><p><br></p><p>store in Vault 를 클릭해서 발급받은 비밀번호 입력할것!!</p><p>아래와 같이 Test Connection을 클릭하면,</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805468/myportfolioblogproject/ruula14mmhl8acver4cz.gif" crossorigin="anonymous"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805476/myportfolioblogproject/hnazrvyjbsib8irwnlii.gif" crossorigin="anonymous"></p><p><br></p><p>위와 같은 문구가 뜨면서 test connection이 성공했음을 알려준다.</p><p>그리고 아래와 같이 ok 버튼을 눌러주면</p><p>db 배포가 완성이 된다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805482/myportfolioblogproject/wafquvdebpss9dipxknt.gif" crossorigin="anonymous"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805489/myportfolioblogproject/gcwrpr3qa5b2y4cwxpyj.gif" crossorigin="anonymous"></p><p>하지만 배포된 db 안에는 로컬상으로 구동하던</p><p>테이블 및 테이블 자료값이 하나도 존재하지 않는다.</p><p>지금부터는 그 작업을 시작해보도록 하겠다.</p><p><br></p><p>먼저 아래와 같이 처음 배포된 db를 Set as Default Schema를</p><p>클릭해서 기본 스키마를 배폰된 db로 지정을 해준다.</p><p>그럼 아래 사진과 같이 db 이름이 굵은 표시로 변할 것이다.</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805497/myportfolioblogproject/zqnhpafq480gepvixtki.gif" crossorigin="anonymous"></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658805503/myportfolioblogproject/oft6oppvopuok6heg3hr.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><p>copy 하려는 로컬상 mysql db에 들어가서</p><p>copy 하려고 하는 테이블에서 아래 사진과 같이</p><p>create statement를 클릭해서</p><p>table copy 하는 query 구문을 생성 복사한다.</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806489/myportfolioblogproject/h3nhx3rktxpnkzgyzzkb.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>그리고 배포된 db로 돌아와서 Tables Query 페이지 에서</p><p>생성 복사한 구문을 아래와 같이 붙여 넣는다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806535/myportfolioblogproject/anjjayqu2qmyk5ufwkze.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>그 중에서 아래와 같이 DEFAULT CHARSET ~~ 구문은 빼주도록 하자.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806547/myportfolioblogproject/uqmff8xq8jzomxs1aeje.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806557/myportfolioblogproject/piwpqjyhjswmprw9ximh.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>위와 같이 구문 설정 후 번개 모양처럼 된 버튼을 클릭하여 Query 문을 실행을 시켜주고</p><p>아래와 같이 db를 refresh 하게 되면...</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806567/myportfolioblogproject/ioh5f4lgyew4xekerajn.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806577/myportfolioblogproject/leh9gc82bndwciixwrk8.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>refresh가 된 후 위와 같은 테이블 구조가 나타나게 됨.</p><p>이제 로컬 db table에서 데이터 행을 복사해 오도록하자.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806589/myportfolioblogproject/m7oxu5q2n8ls0vrokpge.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>로컬 db에서 관련 데이터를 복사하고..</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806622/myportfolioblogproject/li28ds8s1efks4iclycl.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>배포된 db로 돌아와 붙여넣기를 실행하고,</p><p>테이블 refresh를 실행하면...</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806630/myportfolioblogproject/lcjgdbsso2v50woy6y3h.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1658806638/myportfolioblogproject/rzhngznrpmjfm4fiyw9y.gif" crossorigin="anonymous"></p><p><br></p><p>위와 같이 로컬상 테이블 구조와 똑같은 배포된 테이블 구조가 완성이 된다.</p><p><br></p><p><br></p><p>상기 항목 전부 정상적으로 실행 완료 후,</p><p><br></p><pre class="ql-syntax" spellcheck="false">$ git add .\n$ git commit -am <span class="hljs-string">"make it better"</span>\n$ git push heroku master\n</pre><p><br></p><p><br></p><p>다시 서버를 배포 명령어를 입력하게 되면,</p><p>배포된 db, 배포된 서버와 연동해서</p><p>서버, mysql db 배포가 완료된다..</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-07-26T03:46:34.714Z',
    updatedAt: '2022-07-26T04:19:19.378Z',
    __v: 0,
  },
  {
    _id: '62e9eab213d2fb007d7ed974',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1659493111/myportfolioblogproject/dniyrr7h6lhxid4sjelb.gif',
    title: '세션 관리 및 세션 하이재킹 공격 예방방법 (with TypeScript)',
    text: '<h3><strong>*app.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">// import { createError } from \'./error\';</span>\n<span class="hljs-keyword">import</span> dotenv <span class="hljs-keyword">from</span> <span class="hljs-string">\'dotenv\'</span>;\n<span class="hljs-keyword">import</span> express, { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> mongoose <span class="hljs-keyword">from</span> <span class="hljs-string">\'mongoose\'</span>;\n<span class="hljs-keyword">import</span> cookieParser <span class="hljs-keyword">from</span> <span class="hljs-string">\'cookie-parser\'</span>;\n\n<span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">\'express-session\'</span>;\n<span class="hljs-comment">// const fileStore = require(\'session-file-store\')(session);</span>\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">MongoStore</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'connect-mongo\'</span>;\n\n<span class="hljs-keyword">import</span> authRoutes <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/Auth\'</span>;\n<span class="hljs-keyword">import</span> commentRoutes <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/Comments\'</span>;\n<span class="hljs-keyword">import</span> videoRoutes <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/Videos\'</span>;\n<span class="hljs-keyword">import</span> userRoutes <span class="hljs-keyword">from</span> <span class="hljs-string">\'./routes/Users\'</span>;\n<span class="hljs-comment">// import { getUsersnum, removeUsersnum } from \'./session\';</span>\n<span class="hljs-keyword">import</span> cors <span class="hljs-keyword">from</span> <span class="hljs-string">\'cors\'</span>;\n\n<span class="hljs-keyword">const</span> corsOpt = {\n&nbsp; <span class="hljs-attr">origin</span>: [<span class="hljs-string">\'http://localhost:3000\'</span>, <span class="hljs-string">\'http://localhost:3001\'</span>],\n&nbsp; <span class="hljs-attr">optionsSuccessStatus</span>: <span class="hljs-number">200</span>,\n&nbsp; <span class="hljs-attr">credentials</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-comment">// 암호화된 세션 고유 아이드를 쿠키를 통해서 보내야 함으로 corsoption에 이 옵션을 주어야함</span>\n  <span class="hljs-comment">// 클라이언트 http 요창 사항에서도 credentials: "include" 옵션을 주어야 서버, 클라이언트 쿠키정보 교환이 가능함</span>\n  <span class="hljs-comment">// 대신 credentials 옵션을 주면 클라이언트 http 요청시 또 서버 corsOption 에도 명시적으로 지정을 위와 같이 해주어야함</span>\n};\n\ndotenv.<span class="hljs-title function_">config</span>();\n<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cors</span>(corsOpt));\n\nmongoose\n&nbsp; .<span class="hljs-title function_">connect</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">MONGO_DB_URL</span>, { <span class="hljs-attr">dbName</span>: <span class="hljs-string">\'leotube\'</span> })\n&nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Mongo DB has been Connected!!`</span>))\n&nbsp; .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">throw</span> error;\n&nbsp; });\n\n<span class="hljs-keyword">const</span> sess = {\n&nbsp; <span class="hljs-attr">secure</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// http 환경에서만 session 정보를 주고 받도록 처리</span>\n&nbsp; <span class="hljs-attr">secret</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">SESS</span>, <span class="hljs-comment">// 암호화하는 데 쓰이는 키 ( cookie-parser secret 설정과 동일하게 설정하는게 좋음 )</span>\n&nbsp; <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// session을 언제나 저장할지 설정</span>\n&nbsp; <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 세션에 저장할 내역이 없더라도 처음부터 세션 설정할지 설정</span>\n&nbsp; <span class="hljs-attr">cookie</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 클라이언트에서 자바스크립트를 통해서 쿠키 사용 못하게 방지</span>\n&nbsp; &nbsp; <span class="hljs-attr">maxAge</span>: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">12</span>, <span class="hljs-comment">// 쿠키 유효 기간 설정 ( 60초 60분 12시간 )</span>\n&nbsp; },\n&nbsp; <span class="hljs-attr">store</span>: <span class="hljs-title class_">MongoStore</span>.<span class="hljs-title function_">create</span>({\n&nbsp; &nbsp; <span class="hljs-attr">dbName</span>: <span class="hljs-string">\'session\'</span>,\n&nbsp; &nbsp; <span class="hljs-attr">mongoUrl</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">MONGO_DB_URL</span>,\n&nbsp; }),\n&nbsp; <span class="hljs-comment">// name: "session-cookie" 세션 쿠키명 디폴트값은 connect.sid지만 다른 이름을 줄수도 있음</span>\n};\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">SESS</span>));\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>(sess));\napp.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());\n\n<span class="hljs-comment">// app.post(\'/usersnum\', getUsersnum);</span>\n<span class="hljs-comment">// app.get(\'/removeusersnum\', removeUsersnum);</span>\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/api/auth\'</span>, authRoutes);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/api/users\'</span>, userRoutes);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/api/videos\'</span>, videoRoutes);\napp.<span class="hljs-title function_">use</span>(<span class="hljs-string">\'/api/comments\'</span>, commentRoutes);\n\napp.<span class="hljs-title function_">get</span>(<span class="hljs-string">\'/test\'</span>, <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'test\'</span>);\n&nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; <span class="hljs-title function_">next</span>(error);\n&nbsp; }\n});\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">error: ErrorType, req: Request, res: Response, next: NextFunction</span>) =&gt;</span> {\n&nbsp; <span class="hljs-keyword">const</span> status = error.<span class="hljs-property">status</span> || <span class="hljs-number">500</span>;\n&nbsp; <span class="hljs-keyword">const</span> message = error.<span class="hljs-property">message</span> || <span class="hljs-string">\'Something went wrong!\'</span>;\n&nbsp; <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(status).<span class="hljs-title function_">json</span>({\n&nbsp; &nbsp; <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,\n&nbsp; &nbsp; status,\n&nbsp; &nbsp; message,\n&nbsp; });\n});\n\napp.<span class="hljs-title function_">listen</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-number">8080</span>, <span class="hljs-function">() =&gt;</span> {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Hi Seong Eun Lee\'</span>);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Server is running\'</span>);\n});\n</pre><p><br></p><p><br></p><p>localstorage는 당연히 보안상 쓰면 안되는 것이고, 대용으로 cookie를 사용한다고 하고,</p><p>cookie 자체는 httponly 옵션을 주어서 클라이언트상 자바스크립트로 스크립팅하는게 불가능한지라도,</p><p>토큰정보가 그대로 노출이 되는 단점이 존재한다.</p><p><br></p><p>그래서 보안상 session을 많이 사용하는데 이는 사용자 최초 로그인시,</p><p>서버 상 (혹은 서버 메모리, 서버 폴더, DB) 에 세션 storage를 생성하여 그 곳에 저장을 한다.</p><p>최초 로그인을 하고 서버 혹은 DB 세션에 유저정보를 저장하고,</p><p>클라이언트에게 그 세션정보를 그대로 주는 것이 아니라,</p><p>세션 고유의 session id를 또 암호화한 값을  connect.sid 라는 곳에 담아,</p><p>쿠키로 보낸다.</p><p>그리고 maxAge를 통해서 유효기간을 설정함으로서,</p><p>이 기간이 지나면 자동적으로 세션이 폐기되게끔 설정!</p><p><br></p><p>이렇게 하면 쿠키 특성상 클라이언트 상에서 자바스크립트 코드로 </p><p>connect.sid라는 쿠키값을 스크립팅 하는 것이 불가능하고,</p><p>connect.sid라는 것 자체도 결국 session id를 암호화한 값 이므로,</p><p>노출이 되어도 그것 자체로는 활용이 불가능하다.</p><p><br></p><p>하지만 사용자가 서버와 로그인이 된 상태에서 성립이 되는 이 세션을 </p><p>사용자와 서버가 연결된 순간 동안 탈취해서 그 세션 자체를 통해서</p><p>로그인을 하여 해킹 조작하는 공격방법을 세션 하이재킹이라고 하는데,</p><p>이는 사용자 최초 로그인시 클라이언트와 서버 혹은 DB에 저장된 IP 주소를 값을</p><p>저장해두고 클라이언트 페이지가 바뀔때마다 그리고 HTTP 요청사항이 있을 때마다</p><p>이 세션과 클라이언트에 최초 저장된  IP 주소를 지속적 비교를 통해서,</p><p>세션 하이재킹 공격 예방이 가능하다.</p><p><br></p><p>그 대충의 방법은 아래에 또 소개하도록 하겠다.</p><p><br></p><p><br></p><h3><strong>*Auth.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Router</span>, <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'../models/User\'</span>;\n<span class="hljs-keyword">import</span> bcrypt <span class="hljs-keyword">from</span> <span class="hljs-string">\'bcryptjs\'</span>;\n<span class="hljs-keyword">import</span> { createError } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../error\'</span>;\n<span class="hljs-keyword">import</span> { sign } <span class="hljs-keyword">from</span> <span class="hljs-string">\'jsonwebtoken\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signup</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> salt = bcrypt.<span class="hljs-title function_">genSaltSync</span>(<span class="hljs-number">10</span>);\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> hash = bcrypt.<span class="hljs-title function_">hashSync</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>, salt);\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> newUser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>({ ...req.<span class="hljs-property">body</span>, <span class="hljs-attr">password</span>: hash });\n\n&nbsp; &nbsp; <span class="hljs-keyword">await</span> newUser.<span class="hljs-title function_">save</span>();\n&nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">\'User has been created!!\'</span>);\n&nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; <span class="hljs-title function_">next</span>(error);\n&nbsp; }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">signin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; <span class="hljs-comment">// prettier-ignore</span>\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-title class_">User</span>.<span class="hljs-title function_">findOne</span>({\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">name</span>: req.<span class="hljs-property">body</span>.<span class="hljs-property">name</span>,\n&nbsp; &nbsp; }) <span class="hljs-keyword">as</span> <span class="hljs-built_in">unknown</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">UserImpl</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (!user) {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">400</span>, <span class="hljs-string">\'Wrong Credentials!!\'</span>));\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> isPassword = <span class="hljs-keyword">await</span> bcrypt.<span class="hljs-title function_">compare</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>, user.<span class="hljs-property">password</span>);\n\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (!isPassword) {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">400</span>, <span class="hljs-string">\'Wrong Credentials!\'</span>));\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> token = <span class="hljs-title function_">sign</span>({ <span class="hljs-attr">id</span>: user.<span class="hljs-property">_id</span> }, process.<span class="hljs-property">env</span>.<span class="hljs-property">JWT</span>);\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> { password, ...others } = user.<span class="hljs-property">_doc</span>;\n\n&nbsp; &nbsp; req.<span class="hljs-property">session</span>.<span class="hljs-property">token</span> = token;\n&nbsp; &nbsp; req.<span class="hljs-property">session</span>.<span class="hljs-property">ip</span> = req.<span class="hljs-property">headers</span>.<span class="hljs-property">ip</span>;\n    <span class="hljs-comment">// 최초 로그인시 사용자 id 객체를 jsonwebtoken 으로 변환하고</span>\n    <span class="hljs-comment">// 이를 req.session을 통해서 세션을 생성하고 세션에 접근하여 </span>\n    <span class="hljs-comment">// 세션에 정해진 값을 넣는다.</span>\n\n&nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(others);\n&nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; <span class="hljs-title function_">next</span>(error);\n&nbsp; }\n};\n</pre><p><br></p><p><br></p><p>위의 주석문에 나와 있는 것처럼 req.session을 통해서 session을 최초 생성하고 session에 저장될 변수값을 지정하고 저장이 가능하다.</p><p>하지만 타입스크립트에선 아래와 같은 타입을 또 따로 지정을 더 해주어야 사용이 가능!!</p><p>아래 코드 맨 밑 참고할 것!!</p><p><br></p><p>그렇다면 로그아웃 시 세션 클라이언트 쿠키 상에 나타난 정보(connect.sid)와</p><p>서버 혹은 DB에 저장된 세션 정보는 어떻게 삭제할 것 인가?</p><p><br></p><p>먼저 로그아웃 시 verifyToken을 통해서 세션에 저장된 토큰 정보를 검증하고,</p><p>최초 클라이언트 로그인 시 서버 혹은 DB에 있는 세션에 저장된</p><p>최초 로그인 ip 주소와 현재 http 요청 header에 담긴 ip 주소를 비교하는 미들웨어를 만든다.</p><p>이렇게 ip 주소를 비교하는 이유는 세션 하이재킹 공격을 방지하기 위함이다.</p><p><br></p><p><br></p><h3><strong>*verifyToken.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> { verify, <span class="hljs-title class_">VerifyErrors</span>, <span class="hljs-title class_">Jwt</span>, <span class="hljs-title class_">JwtPayload</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'jsonwebtoken\'</span>;\n<span class="hljs-keyword">import</span> { createError } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./error\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">verifyToken</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> token = req.<span class="hljs-property">session</span>.<span class="hljs-property">token</span>;\n\n&nbsp; <span class="hljs-keyword">if</span> (!token) <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">401</span>, <span class="hljs-string">\'You are not authenticated!\'</span>));\n\n&nbsp; <span class="hljs-title function_">verify</span>(\n&nbsp; &nbsp; token,\n&nbsp; &nbsp; process.<span class="hljs-property">env</span>.<span class="hljs-property">JWT</span>,\n&nbsp; &nbsp; <span class="hljs-function">(<span class="hljs-params">err: VerifyErrors | <span class="hljs-literal">null</span>, user: Jwt | JwtPayload | <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span></span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">403</span>, <span class="hljs-string">\'Token is not valid!\'</span>));\n&nbsp; &nbsp; &nbsp; req.<span class="hljs-property">user</span> = user;\n&nbsp; &nbsp; &nbsp; <span class="hljs-title function_">next</span>();\n&nbsp; &nbsp; }\n&nbsp; );\n};\n</pre><p><br></p><p><br></p><h3><strong>*verifyIp.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { createError } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./error\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">NextFunction</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">verifyIp</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> ip = req.<span class="hljs-property">session</span>.<span class="hljs-property">ip</span>;\n\n&nbsp; <span class="hljs-keyword">if</span> (ip !== req.<span class="hljs-property">headers</span>.<span class="hljs-property">ip</span> || ip == <span class="hljs-literal">null</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">401</span>, <span class="hljs-string">\'You are not authenticated!\'</span>));\n&nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; <span class="hljs-title function_">next</span>();\n&nbsp; }\n};\n\n<span class="hljs-comment">// 먼저 클라이언트 상에서 최초 로그인시 ip 주소를 http 요청 당시 ip 주소를 비교하는 과정을 거치겠지만,</span>\n<span class="hljs-comment">// 백엔드 서버에서도 ip주소를 검사하는 미들웨어로 이중으로 검사할 수도 있음.</span>\n<span class="hljs-comment">// ( 본인 생각에는.... )</span>\n</pre><p><br></p><p><br></p><h3><strong>*Auth.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false">...\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">logoutUser</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">\n&nbsp; req: Request,\n&nbsp; res: Response,\n&nbsp; next: NextFunction\n</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">if</span> (req.<span class="hljs-property">body</span>.<span class="hljs-property">id</span> === req.<span class="hljs-property">user</span>.<span class="hljs-property">id</span>) {\n    <span class="hljs-comment">// 최초 로그인 생성된 세션에 저장된 ip, token을 검사하는 </span>\n    <span class="hljs-comment">// verifyIp 미들웨어를 통과하고 verifyToken 미들웨어를</span>\n    <span class="hljs-comment">// 통과하고 나온 jsonwebtoken 암호화 해제된 객체가 저장된 req.user의 아이디 정보값과</span>\n    <span class="hljs-comment">// req 로그아웃 요청한 아이디 정보값이 동일한지 비교!!!</span>\n \n&nbsp; &nbsp; <span class="hljs-comment">// 세션 서버, 브라우저 삭제 과정</span>\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; req.<span class="hljs-property">session</span>.<span class="hljs-title function_">destroy</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n       <span class="hljs-comment">// 로그아웃 시 DB, 서버에 저장된 세션 정보 삭제</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err) <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">400</span>, err));\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">204</span>).<span class="hljs-title function_">json</span>(<span class="hljs-string">\'delete login data session\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// &nbsp; res.redirect(302, \'/\');</span>\n&nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">clearCookie</span>(<span class="hljs-string">\'connect.sid\'</span>);\n      <span class="hljs-comment">// 클라이언트에 저장된 세션 쿠키 정보도 삭제</span>\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) { \n&nbsp; &nbsp; &nbsp; <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">400</span>, <span class="hljs-string">`<span class="hljs-subst">${error}</span>`</span>));\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class="hljs-comment">// 세션 서버, 브라우저 삭제 과정</span>\n&nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-title function_">next</span>(<span class="hljs-title function_">createError</span>(<span class="hljs-number">403</span>, <span class="hljs-string">\'You can update only your account\'</span>));\n&nbsp; }\n};\n\n...\n</pre><p><br></p><p><br></p><h3><strong>*index.d.ts</strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> session <span class="hljs-keyword">from</span> <span class="hljs-string">\'express-session\'</span>;\n\n<span class="hljs-keyword">declare</span> <span class="hljs-variable language_">global</span> {\n&nbsp; <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">NodeJS</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProcessEnv</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">TEST</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">MONGO_DB_URL</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">PORT</span>: <span class="hljs-number">8080</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">JWT</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">SESS</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; }\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Express</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Request</span> {\n&nbsp; &nbsp; &nbsp; user?: <span class="hljs-title class_">Record</span>&lt;<span class="hljs-title class_">Object</span> | <span class="hljs-title class_">String</span>&gt;;\n&nbsp; &nbsp; }\n&nbsp; }\n\n&nbsp; <span class="hljs-comment">// models interface</span>\n&nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DocumentResult</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Document</span> {\n&nbsp; &nbsp; <span class="hljs-attr">_doc</span>: T;\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DocumentResult</span>&lt;<span class="hljs-title class_">UserImpl</span>&gt; {\n&nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">email</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; img?: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; subscribers?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; subscribedUsers?: <span class="hljs-built_in">string</span>[];\n&nbsp; &nbsp; fromGoogle?: <span class="hljs-built_in">boolean</span>;\n&nbsp; &nbsp; createdAt?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; updatedAt?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; _v?: <span class="hljs-title class_">Int32List</span>;\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CommentImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DocumentResult</span>&lt;<span class="hljs-title class_">CommentImpl</span>&gt; {\n&nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">userId</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">videoId</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">desc</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; createdAt?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; updatedAt?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; _v?: <span class="hljs-title class_">Int32List</span>;\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">interface</span> <span class="hljs-title class_">VideoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DocumentResult</span>&lt;<span class="hljs-title class_">VideoImpl</span>&gt; {\n&nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">userId</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; desc?: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; imgUrl?: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">videoUrl</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; views?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; tags?: <span class="hljs-built_in">string</span>[];\n&nbsp; &nbsp; likes?: <span class="hljs-built_in">string</span>[];\n&nbsp; &nbsp; dislikes?: <span class="hljs-built_in">string</span>[];\n&nbsp; &nbsp; createdAt?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; updatedAt?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; _v?: <span class="hljs-title class_">Int32List</span>;\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">type</span> <span class="hljs-title class_">ErrorType</span> = {\n&nbsp; &nbsp; status?: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; message?: <span class="hljs-built_in">string</span>;\n&nbsp; };\n}\n\n<span class="hljs-comment">// session 타입 지정 이 부분임!!</span>\n<span class="hljs-keyword">declare</span> <span class="hljs-variable language_">module</span> <span class="hljs-string">\'express-session\'</span> {\n&nbsp; <span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SessionData</span> {\n&nbsp; &nbsp; token?: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; ip?: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">string</span>[];\n&nbsp; }\n}\n<span class="hljs-comment">// express session 타입을 지정을 해주어야</span>\n<span class="hljs-comment">// 타입스크립트에선 사용이 가능하다.</span>\n\n\n<span class="hljs-comment">// 내가 임의로 만든 정의.</span>\n<span class="hljs-comment">// declare global로 기존에 정의되어있던</span>\n<span class="hljs-comment">// 인터페이스를 확장했음.</span>\n</pre><p><br></p><p><br></p><h3><strong>*Client React 코드 App.ts</strong></h3><p><br></p><p>클라이언트 코드에서 세션 하이재킹 예방 방법을 같이 소개해보도록 하겠음.</p><p>세션 하이재킹 공격 자체가 사용자와 서버가 로그인 된 상태에서 성립이 되는 세션을</p><p>훔치는 과정이기 때문에...</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useEffect, useState } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./App.css\'</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>() {\n&nbsp; <span class="hljs-keyword">const</span> [name, setName] = useState&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">\'\'</span>);\n&nbsp; <span class="hljs-keyword">const</span> [pwd, setPwd] = useState&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">\'\'</span>);\n&nbsp; <span class="hljs-keyword">const</span> [ip, setIp] = useState&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">\'\'</span>);\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HOST</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">host</span>;\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">getIp</span> = <span class="hljs-keyword">async</span> () =&gt; {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> ipData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'https://geolocation-db.com/json/\'</span>);\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> locationIp = <span class="hljs-keyword">await</span> ipData.<span class="hljs-title function_">json</span>();\n&nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setIp</span>(locationIp.<span class="hljs-property">IPv4</span>);\n&nbsp; &nbsp; };\n&nbsp; &nbsp; <span class="hljs-title function_">getIp</span>();\n    <span class="hljs-comment">// 최초 로그인시 IP주소 저장</span>\n&nbsp; }, []);\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleLogin</span> = <span class="hljs-keyword">async</span> () =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'http://localhost:8080/api/auth/signin\'</span>, {\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">method</span>: <span class="hljs-string">\'POST\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">credentials</span>: <span class="hljs-string">\'include\'</span>, <span class="hljs-comment">// 세션 고유 id 암호화 정보가 포함된 쿠키정보 전달위해</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">mode</span>: <span class="hljs-string">\'cors\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">headers</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/json\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-title class_">Origin</span>: <span class="hljs-string">`http://<span class="hljs-subst">${HOST}</span>`</span>,  <span class="hljs-comment">// credentials include를 하면 명시적으로 작성해야하기에.. "*" 를 쓸순 없어서..</span>\n&nbsp; &nbsp; &nbsp; &nbsp; ip,  <span class="hljs-comment">// headers에 최초 로그인 ip 주소를 담아서 보낸다.</span>\n&nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({\n&nbsp; &nbsp; &nbsp; &nbsp; name,\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">password</span>: pwd,\n&nbsp; &nbsp; &nbsp; }),\n&nbsp; &nbsp; });\n\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);\n&nbsp; };\n\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ip);\n&nbsp; <span class="hljs-comment">// 세션 하이제킹을 예방하기 위해 처음 로그인했을 때</span>\n&nbsp; <span class="hljs-comment">// 원 ip주소를 클라이언트와 서버에 저장하고,</span>\n&nbsp; <span class="hljs-comment">// 페이지가 이동할 때마다 현재 ip와 세션에 저장된 ip주소가 같은지 검사해야함</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">\'App\'</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'text\'</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> setName(e.target.value)} /&gt;\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'password\'</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> setPwd(e.target.value)} /&gt;\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleLogin}</span>&gt;</span>App<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Remove<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n&nbsp; );\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</pre><p><br></p><p><br></p><p>일단 클라이언트 상에 로그인만 구현해서 해봄..</p><p>로그아웃은 위의 과정을 정확히 이해했다면 할수 있다고 생각함.</p><p>로그아웃은 다들 알아서 구현을 해보도록.. 이상 !!!</p><p><br></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-08-03T03:25:38.129Z',
    updatedAt: '2022-08-03T03:25:38.129Z',
    __v: 0,
  },
  {
    _id: '62f274cd593259b4b7ef1c1e',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1660056774/myportfolioblogproject/yu6kf9juhno16dxuwmip.gif',
    title: 'Svelte 개발, 빌드 툴 셋업 (with Vite)',
    text: '<h3><br></h3><h3>*Webpack?</h3><h3><br></h3><p>웹팩은 여러 자바스크립트 모듈 번들러 중 하나이며,</p><p>일반적으로 웹 어플리케이션을 만들 때, 협업 유지 보수를 위해서</p><p>코드를 모듈화하여 분할 관리하게 되어있다.</p><p><br></p><p>이렇게 모듈화 된 자바스크립트 코드를 하나의 파일 index.js 로</p><p>각 모듈을 합쳐서 (번들링!!) 실행하게 끔 하는 것이 webpack 같은</p><p>모듈 번들러의 역할이다.</p><h3><br></h3><p><br></p><h3>*Vite?</h3><p><br></p><p>Webpack을 기반으로 하는 React 개발, 빌드 툴인 CRA (Create React App) 과 다르게,</p><p>Vite는 원래 Vue 전용 개발, 빌드 툴이었음.</p><p><br></p><p>하지만 Vue 개발자가 번들 속도가 정말 빠른 차세대 모듈 번들러 Esbuild 위에</p><p>구축한 프론트엔드 개발, 빌드 도구이다.</p><p><br></p><p>기존 CRA 가 지원하는 모든 기능을 포함하고 있으며,</p><p>빌드 프로세스가 CRA 에 비해서 배로 빠른 장점을 가지고 있다.</p><p><br></p><p>이렇게 CRA 보다 빠른 이유는 최근에 개발된 속도가 빠른 차세대 모듈 번들러</p><p>Esbuild 위에서 개발된 빌드 툴인 이유도 있지만,</p><p><br></p><p>기존의 CRA 가 코드 변경이 되고 저장을 누르면</p><p>모든 자바스크립트 파일, 모듈을 처음부터 빌드하는 반면</p><p>Vite의 경우 저장 버튼을 눌렀을 때 모든 파일 빌드하는 것이 아닌,</p><p>변경된 부분만 빌드해서 실행을 시키기 때문에 빌드 속도가 배로 빠르다.</p><p><br></p><p>이 Vite 개발, 빌드 툴을 이용해서 React, Vue, Svelte... 등등 모든</p><p>개발, 빌드 템플릿 생성이 가능하다.</p><p><br></p><p>그럼 Vite 를 통해서 Svelte 개발, 빌드 템플릿을 생성해보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false">$ npm create vite<span class="hljs-meta">@latest</span>\n</pre><p><br></p><p><a href="https://vitejs.dev/guide/#scaffolding-your-first-vite-project" rel="noopener noreferrer" target="_blank">https://vitejs.dev/guide/#scaffolding-your-first-vite-project</a></p><p><br></p><p>그럼 아래와 같은 콘솔창이 뜰것이다.</p><p>그러면 생성하고자 하는 템플릿을 선택하여 생성한다.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1660056590/myportfolioblogproject/ex02vecp2wc3ry4gw8hd.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>생성이 완료되고 npm run dev 를 콘솔창에서 실행을 시켜보면</p><p>정상 작동하는 svelte 템플릿을 보게 될 것임.</p><p><br></p><p>그리고 추가적으로 svelte vscode 코드 가시성을 위해서</p><p>아래의 extension을 추가 설치해주도록 하자.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1660056696/myportfolioblogproject/ccvl9o5unwndhmotirzl.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>그리고 vscode 설정 json 파일에 위의 사진에 나와 있는 문구를</p><p>추가해주도록 하자.</p><p><br></p><p>이렇게 하면 기본 svelte 개발 툴 설정은 끝임.</p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-08-09T14:53:01.947Z',
    updatedAt: '2022-08-09T14:54:33.901Z',
    __v: 0,
  },
  {
    _id: '62f283d6593259b4b7ef1c33',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1660060626/myportfolioblogproject/bv9zxvsyvleippsaym30.gif',
    title: 'Svelte Todo Project 코드 및 배포',
    text: '<h3><br></h3><h3>*Svelte Todo Project 코드</h3><p><br></p><p>Svelte 프레임 워크와 가장 궁합이 잘 맞는 CSS 프레임 워크는 역시 Tailwind CSS 인 것 같다.</p><p>Tailwind CSS 를 적용하여 향후 Svelte와 함께할 프로젝트 대비를 위해 기본적인 Todo Project를 연습해보았음.</p><p><br></p><p>이 프로젝트 안에 Svelte의 writable 상태 관리 문법 ( React 의 Redux )</p><p>그리고 svelte routing ( React의 react-router-dom ) 하는 방법.</p><p>그리고 React의 useState, useEffect 와 비슷한 문법인</p><p>Svelte의 onMount, beforeUpdate, afterUpdate 그리고</p><p>Svelte 고유 문법인 "$"  reactive variables,</p><p>Svelte 고유 animation, transition 문법 등을 활용하여 </p><p>만들어 보았다.</p><p><br></p><p>이 모든 내용을 전부 다 블로그에 일괄적으로 </p><p>소개하기엔 어려움이 있어서,</p><p>본인의 기본적인 todo project와 소스코드를 공유하고,</p><p>Svelte 사이트에서 공식적으로 제공하는 tutorial </p><p>사이트를 공유하도록 하겠다. </p><p><br></p><p>아무쪼록 도움이 되길..</p><p><br></p><h3>1.Svelte todo project</h3><p><br></p><p>배포사이트</p><p><a href="https://sveltebasictodoproject.netlify.app/" rel="noopener noreferrer" target="_blank">https://sveltebasictodoproject.netlify.app/</a></p><p><br></p><p>소스코드</p><p><a href="https://github.com/BVBFD/Svelte-beginner-Project" rel="noopener noreferrer" target="_blank">https://github.com/BVBFD/Svelte-beginner-Project</a></p><p><br></p><h3>2.Svelte Official Tutorial Site</h3><p><br></p><p><a href="https://svelte.dev/tutorial/basics" rel="noopener noreferrer" target="_blank">https://svelte.dev/tutorial/basics</a></p><p> </p><p><br></p><p><br></p><p><br></p><h3>*Svelte Todo Project  배포</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1660060476/myportfolioblogproject/gaazylxcswyosjnmwehl.gif" crossorigin="anonymous"></p><p><br></p><p>React 프로젝트를 배포할 때처럼 똑같이 위의 코드를 입력해서,</p><p>netlify로 배포를 해서 배포 성공하였다.</p><p>역시 client 배포는 netlify로 하는 것이 가장 편하고,</p><p>에러도 적게 생기는 것 같음.</p><p><br></p><p>배포하는 과정에서 별다른 설정없이 간편하게 하였고,</p><p>에러도 발생하지 않은 것 같다. </p><p><br></p><p>아마 React 프로젝트를 이미 여러차례 배포한 경험이 있다면,</p><p>충분히 에러없이 배포 가능할 것이다.</p><p><br></p><p><a href="https://vitejs.dev/guide/static-deploy.html#gitlab-pages-and-gitlab-ci" rel="noopener noreferrer" target="_blank">https://vitejs.dev/guide/static-deploy.html#gitlab-pages-and-gitlab-ci</a></p><p><br></p><p><br></p><p><br></p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-08-09T15:57:10.968Z',
    updatedAt: '2022-08-09T15:57:10.968Z',
    __v: 0,
  },
  {
    _id: '6309cc3d15d6934e50567323',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1661581293/myportfolioblogproject/frrgklladexd6cqbyy6o.gif',
    title: 'useEffect 프로처럼 쓰기',
    text: '<h2>index.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom/client\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">BrowserRouter</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-router-dom\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./App\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./index.css\'</span>;\n\n<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">\'root\'</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-title function_">render</span>(\n&nbsp; <span class="hljs-comment">// &lt;React.StrictMode&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span>\n&nbsp; <span class="hljs-comment">// &lt;/React.StrictMode&gt;</span>\n);\n</pre><p><br></p><h3>&lt;React.Strict&gt; 모드에 대한 고찰</h3><p><br></p><p>리액트는 보통 렌더링 과정, 커밋 과정으로</p><p>돌아간다.</p><p><br></p><p>렌더링 과정에서는 새로운 가상의 dom을 렌더링하고</p><p>그 이전 가상의 dom과 비교를 수행하는 과정이며</p><p><br></p><p>커밋 과정은 이러한 비교의 결과를 통해 라이프 사이클</p><p>함수를 실행시키며 그에 따른 값을 dom 노드에 반영해주는 역할임.</p><p><br></p><p>이러한 렌더링, 커밋 과정에서 useEffect, useState 등과 같은</p><p>라이프 사이클 함수가 중복으로 실행될 수가 있는데</p><p>React Strict 모드는 개발 과정에서 인위적으로 double invoke</p><p>즉 2번 실행을 시켜서 그 결과 값이 같은지 확인토록 지원해주고 있음.</p><p><br></p><p>만약 같지 않다면 그 코드는 문제가 있는 코드임.</p><p>개발 과정에서만 적용되며 배포 빌드 시에는 자동으로</p><p>적용되지 않음.</p><p><br></p><p>일단 리액트 useEffect 기본원리 보여주기 위해 주석처리</p><p>나중에 예시 보여주겠음.</p><p><br></p><p><br></p><h1>1. useEffect 기본 동작 원리</h1><p><br></p><h2>App.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Route</span>, <span class="hljs-title class_">Routes</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-router-dom\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./App.css\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Form</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./pages/Form\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Post</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./pages/Post\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">App</span> = () =&gt; {\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">{</span>\'/\'}&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">index</span> <span class="hljs-attr">element</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">Form</span> /&gt;</span>} /&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">{</span>\'<span class="hljs-attr">post</span>\'} <span class="hljs-attr">element</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">Post</span> /&gt;</span>} /&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">{</span>\'<span class="hljs-attr">users</span>\'} <span class="hljs-attr">element</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">Post</span> /&gt;</span>}&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">{</span>\'<span class="hljs-attr">:id</span>\'} /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;\n</pre><p><br></p><p><br></p><h2>Post.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; height: 100vh;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Span</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 36px;\n`</span>;\n\n<span class="hljs-keyword">const</span> P = styled.<span class="hljs-property">p</span><span class="hljs-string">``</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 1. useEffect and dom rendering orders explained!!</span>\n&nbsp; <span class="hljs-keyword">const</span> [<span class="hljs-built_in">number</span>, setNumber] = useState&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>);\n&nbsp; <span class="hljs-keyword">const</span> [name, setName] = useState&lt;<span class="hljs-built_in">string</span>&gt;();\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">\'useEffect run!\'</span>);\n&nbsp; &nbsp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`You clicked <span class="hljs-subst">${<span class="hljs-built_in">number</span>}</span> times`</span>;\n&nbsp; }, [<span class="hljs-built_in">number</span>]);\n\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">\'Component Rendered!\'</span>);\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 1. useEffect and dom rendering orders explained!!</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Span</span>&gt;</span>You clicked {number} times<span class="hljs-tag">&lt;/<span class="hljs-name">Span</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> setName(e.target.value)} /&gt;\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setNumber((prev: number) =&gt; prev + 1)}&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; Increase\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> setNumber(0)}&gt;Reset<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; );\n};\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n</pre><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663511733/myportfolioblogproject/w9aknimd9ajqbttpsjo4.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>기본적으로 다 아는 useEffect 기본 동작 원리이다.</p><p>일단 React Strict 모드를 비활성화 시키고,</p><p>double invoke 안되게 방지한 상태에선,</p><p>useEffect가 두 번 실행되지 않는다.</p><p><br></p><p><br></p><p><br></p><h1>2. array, object 등 none-primitive type의 useEffect 중복 실행 문제 (배열, 오브젝트 타입 불변성 원칙!!)</h1><p><br></p><h2>Post.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect, useMemo } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; height: 100vh;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Span</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 36px;\n`</span>;\n\n<span class="hljs-keyword">const</span> P = styled.<span class="hljs-property">p</span><span class="hljs-string">``</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n  <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n&nbsp; <span class="hljs-keyword">const</span> [name, setName] = useState&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">\'\'</span>);\n&nbsp; <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>({\n&nbsp; &nbsp; <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>,\n&nbsp; &nbsp; <span class="hljs-attr">selected</span>: <span class="hljs-literal">false</span>,\n&nbsp; });\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'The state has changed, useEffect runs!\'</span>);\n&nbsp; }, [state]);\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> ({ ...prev, name }));\n&nbsp; };\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSelect</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> ({ ...prev, <span class="hljs-attr">selected</span>: <span class="hljs-literal">true</span> }));\n&nbsp; };\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleReset</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-title function_">setState</span>({\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">selected</span>: <span class="hljs-literal">false</span>,\n&nbsp; &nbsp; });\n&nbsp; };\n&nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n  <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n    <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'text\'</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> setName(e.target.value)} /&gt;\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleAdd}</span>&gt;</span>Add Name<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleSelect}</span>&gt;</span>Select<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleReset}</span>&gt;</span>Reset<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Span</span>&gt;</span>{`{\n&nbsp; &nbsp; &nbsp; &nbsp; name:${state.name},\n&nbsp; &nbsp; &nbsp; &nbsp; selected:${state.selected.toString()}\n&nbsp; &nbsp; &nbsp; }`}<span class="hljs-tag">&lt;/<span class="hljs-name">Span</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n    <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n\n</pre><p><br></p><p>위의 코드 useEffect deps 배열에 오브젝트 그 자체를 집어 넣어서 실험을 해보자.</p><p><br></p><p><img style="width:75%" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661582664/myportfolioblogproject/zy7csexanm5fvr0q0tl3.gif" crossorigin="anonymous"></p><p><br></p><p>컴포넌트가 처음 마운트 되었을때 이다.</p><p>예상대로 콘솔로그가 한번 찍히는 것을 볼수 있음.</p><p><br></p><p><img style="width:75%" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661582713/myportfolioblogproject/vf79mrcqvgcs9vn9hqbd.gif" crossorigin="anonymous"></p><p><br></p><p>input에 leo 라는 이름을 넣어서</p><p>state 값이 바꼈으므로 useEffect 재실행.</p><p>콘솔로그 출력.</p><p><br></p><p><img style="width:75%" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661582787/myportfolioblogproject/i8ivgfgaxitue5bkdxht.gif" crossorigin="anonymous"></p><p><br></p><p>select 버튼을 클릭하여 select 값을 변화시켜 주었으므로</p><p>state 값이 바뀌어 다시 콘솔이 찍힘</p><p><br></p><p>자 그럼 이제 같은 이름으로 Add Name 버튼을 클릭해보자</p><p>오브젝트 내의 값이 바뀌는 것이 아니므로</p><p>useEffect는 실행되지 않을 것이며,</p><p>useEffect안의 콘솔 내용도 출력되지 않을 것임..</p><p>확인해보자!!</p><p><br></p><p><img style="width:75%" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661582888/myportfolioblogproject/noid24tn6z9gkqi1gkph.gif" crossorigin="anonymous"></p><p><br></p><p>띠용~~!!! 하지만 출력이 되었다!!</p><p>왜 이런 현상이 생기는 걸까?</p><p>왜냐하면 같은 오브젝트, 배열이라도,</p><p>같은 내용의 오브젝트 배열로 값을 업데이트 했다고</p><p>하더라도 이 오브젝트, 배열이 저장된 메모리 상의 주소값</p><p>즉 참조값이 달라지기 때문에</p><p>같은 오브젝트 내용이지만 다른 값으로 인식을 하는 것임..</p><p>그래서 useEffect를 실행함..</p><p>아래 예시 참고..</p><p><br></p><p><img style="width:75%" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661583181/myportfolioblogproject/aev91yushxwak8eckkdq.gif" crossorigin="anonymous"></p><p><br></p><p>즉 배열, 오브젝트와 같은 none primitive 타입은 똑같은 값이더라도</p><p>참조값이 달라지기 때문에 같은 값이 아님!!</p><p>그럼 아래의 코드로 해결을 해보자!!</p><p><br></p><h2>Post.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect, useMemo } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; height: 100vh;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Span</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 36px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> P = styled.<span class="hljs-property">p</span><span class="hljs-string">``</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n  <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n&nbsp; <span class="hljs-keyword">const</span> [name, setName] = useState&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">\'\'</span>);\n&nbsp; <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>({\n&nbsp; &nbsp; <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>,\n&nbsp; &nbsp; <span class="hljs-attr">selected</span>: <span class="hljs-literal">false</span>,\n&nbsp; });\n\n\n&nbsp; <span class="hljs-keyword">const</span> user = <span class="hljs-title function_">useMemo</span>(\n&nbsp; &nbsp; <span class="hljs-function">() =&gt;</span> ({\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">name</span>: state.<span class="hljs-property">name</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">selected</span>: state.<span class="hljs-property">selected</span>,\n&nbsp; &nbsp; }),\n&nbsp; &nbsp; [state.<span class="hljs-property">name</span>, state.<span class="hljs-property">selected</span>]\n&nbsp; );\n&nbsp; <span class="hljs-comment">// 위와 같은 문제점 때문에 useMemo를 써주는 것임.</span>\n\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'The state has changed, useEffect runs!\'</span>);\n&nbsp; }, [user]);\n <span class="hljs-comment">// 아니면 deps 배열에 state.name, state.state 와</span>\n <span class="hljs-comment">// 같이 세부적으로 설정을 해주어야 두번 실행되는 것 막을 수 있음</span>\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAdd</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> ({ ...prev, name }));\n&nbsp; };\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSelect</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-title function_">setState</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> ({ ...prev, <span class="hljs-attr">selected</span>: <span class="hljs-literal">true</span> }));\n&nbsp; };\n\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleReset</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-title function_">setState</span>({\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">name</span>: <span class="hljs-string">\'\'</span>,\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">selected</span>: <span class="hljs-literal">false</span>,\n&nbsp; &nbsp; });\n&nbsp; };\n&nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n  <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n    <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'text\'</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{(e)</span> =&gt;</span> setName(e.target.value)} /&gt;\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleAdd}</span>&gt;</span>Add Name<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleSelect}</span>&gt;</span>Select<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{handleReset}</span>&gt;</span>Reset<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Span</span>&gt;</span>{`{\n&nbsp; &nbsp; &nbsp; &nbsp; name:${state.name},\n&nbsp; &nbsp; &nbsp; &nbsp; selected:${state.selected.toString()}\n&nbsp; &nbsp; &nbsp; }`}<span class="hljs-tag">&lt;/<span class="hljs-name">Span</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 2. useEffect about array, </span>\n    <span class="hljs-comment">// object non-premitive type non-changeable attributes relating re-rendering</span>\n&nbsp; );\n};\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n</pre><p><br></p><p><br></p><h1>3. setInterval Timer in useEffect (React Strict 모드)</h1><p><br></p><h2>Post.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; height: 100vh;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Span</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 36px;\n`</span>;\n\n<span class="hljs-keyword">const</span> P = styled.<span class="hljs-property">p</span><span class="hljs-string">``</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n&nbsp; <span class="hljs-keyword">const</span> [<span class="hljs-built_in">number</span>, setNumber] = useState&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>);\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'effect\'</span>);\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setNumber</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> prev + <span class="hljs-number">1</span>);\n&nbsp; &nbsp; }, <span class="hljs-number">1000</span>);\n&nbsp; }, []);\n&nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Span</span>&gt;</span>{number} cleaning<span class="hljs-tag">&lt;/<span class="hljs-name">Span</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n</pre><p><br></p><p>일단 React.Strict 모드가 활성화 되지 않은 상태에선</p><p>정상적으로 timer가 작동되는 것을 볼수 있을 것이다.</p><p><br></p><p>그렇다면 아래와 같이 React Strict 모드를 활용하여</p><p>인위적으로 두번 실행시키는 double invoke를 해보자.</p><p><br></p><p><br></p><h2>index.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom/client\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">BrowserRouter</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-router-dom\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'./App\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-string">\'./index.css\'</span>;\n\n<span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">createRoot</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">\'root\'</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-title function_">render</span>(\n&nbsp;<span class="hljs-tag">&lt;<span class="hljs-name">React.StrictMode</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span>\n&nbsp;<span class="hljs-tag">&lt;/<span class="hljs-name">React.StrictMode</span>&gt;</span>\n);\n</pre><p><br></p><p>위와 같이 React strict 모드를 활성화하고</p><p>타이머를 작동시키면 useEffect가 두번 실행되면서</p><p>2초씩 건너뛰어 타이머가 작동하는 것을 볼수 있을것이다.</p><p><br></p><p>문제가 있는 코드인 것이다..</p><p>즉, 메모리 누수....</p><p><br></p><p>아래와 같이 clean up 함수를 정의하여</p><p>메모리 누수를 막아주자</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n&nbsp; <span class="hljs-keyword">const</span> [<span class="hljs-built_in">number</span>, setNumber] = useState&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">0</span>);\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'effect\'</span>);\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> interval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setNumber</span>(<span class="hljs-function">(<span class="hljs-params">prev</span>) =&gt;</span> prev + <span class="hljs-number">1</span>);\n&nbsp; &nbsp; }, <span class="hljs-number">1000</span>);\n\n    <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-built_in">clearInterval</span>(interval);\n&nbsp; &nbsp; };\n&nbsp; }, []);\n&nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Span</span>&gt;</span>{number} cleaning<span class="hljs-tag">&lt;/<span class="hljs-name">Span</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 3. useEffect Timer</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n</pre><p><br></p><p><br></p><h1>4. Fetch datas with useEffect</h1><p><br></p><h2>Post.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Link</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-router-dom\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; height: 100vh;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Span</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 36px;\n`</span>;\n\n<span class="hljs-keyword">const</span> P = styled.<span class="hljs-property">p</span><span class="hljs-string">``</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 4. fetching datas 1 case</span>\n&nbsp; <span class="hljs-keyword">type</span> <span class="hljs-title class_">PostsType</span> = {\n&nbsp; &nbsp; <span class="hljs-attr">userId</span>: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;\n&nbsp; &nbsp; <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;\n&nbsp; &nbsp; <span class="hljs-attr">body</span>: <span class="hljs-built_in">string</span>;\n&nbsp; };\n\n&nbsp; <span class="hljs-keyword">const</span> [posts, setPosts] = useState&lt;<span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">PostsType</span>&gt;&gt;();\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'https://jsonplaceholder.typicode.com/posts\'</span>)\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'posts are ready, updating state!\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setPosts</span>(data);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);\n&nbsp; &nbsp; &nbsp; });\n&nbsp; }, []);\n&nbsp; <span class="hljs-comment">// 4. fetching datas 1 case</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 4. fetching datas 1 case</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Link</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">position:</span> \'<span class="hljs-attr">absolute</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">top:</span> \'<span class="hljs-attr">24px</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">left:</span> \'<span class="hljs-attr">24px</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">fontSize:</span> \'<span class="hljs-attr">24px</span>\',\n&nbsp; &nbsp; &nbsp; &nbsp; }}\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">to</span>=<span class="hljs-string">{</span>\'/\'}\n&nbsp; &nbsp; &nbsp; &gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; Go to Form\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; {posts?.map((p: any) =&gt; (\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{p.id}</span>&gt;</span>{p.title}<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; ))}\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 4. fetching datas 1 case</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n</pre><p><br></p><p>만약 네트워크 통신을 3G Slow 로 설정하고 위의 코드 실행시</p><p>아래와 같이 반응할 것이다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661584726/myportfolioblogproject/qqcuij3wtjepq4yeq9qo.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>정상적으로 작동하는 것처럼 보임..</p><p>하지만 네트워크 통신이 끝마치기 전에</p><p>해당 컴포넌트를 언마운트 시켜보자</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661584771/myportfolioblogproject/kwxuu8pwixol9ou3iqo2.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p>네트워크 통신이 끝마치기 전에 해당 컴포넌트를</p><p>언마운트 시켰음에도 불구하고</p><p>네트워크 통신이 지속됨을 볼수 있음.</p><p>이를 막기위해 아래와 같은 clean up 함수 코드를 추가해주자</p><p><br></p><pre class="ql-syntax" spellcheck="false">...\n&nbsp;<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> canceled = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'https://jsonplaceholder.typicode.com/posts\'</span>)\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (!canceled) {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'posts are ready, updating state!\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setPosts</span>(data);\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; });\n\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; canceled = <span class="hljs-literal">true</span>;\n&nbsp; &nbsp; };\n&nbsp; }, []);\n...\n</pre><p><br></p><p>위와 같은 clean up 함수를 추가해주면</p><p>네트워크 통신이 끝마치기 전에</p><p>해당 컴포넌트를 나간다고 하더라도</p><p>네트워크 통신이 지속되지 않고 중단됨을 알 수 있음.</p><p><br></p><p><br></p><h1>5. Fetch datas with useEffect 다른 경우</h1><p><br></p><h2>Post.tsx</h2><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState, useEffect, useMemo } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Link</span>, useLocation } <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-router-dom\'</span>;\n<span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">\'styled-components\'</span>;\n<span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">\'axios\'</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Container</span> = styled.<span class="hljs-property">div</span><span class="hljs-string">`\n&nbsp; display: flex;\n&nbsp; flex-direction: column;\n&nbsp; justify-content: center;\n&nbsp; align-items: center;\n&nbsp; height: 100vh;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Span</span> = styled.<span class="hljs-property">span</span><span class="hljs-string">`\n&nbsp; font-size: 36px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> P = styled.<span class="hljs-property">p</span><span class="hljs-string">``</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = styled.<span class="hljs-property">button</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Input</span> = styled.<span class="hljs-property">input</span><span class="hljs-string">`\n&nbsp; padding: 12px;\n&nbsp; margin-top: 18px;\n&nbsp; font-size: 24px;\n`</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Post</span> = () =&gt; {\n&nbsp; <span class="hljs-comment">// 5. fetching datas 2 case</span>\n&nbsp; <span class="hljs-keyword">const</span> [user, setUser] = useState&lt;<span class="hljs-built_in">any</span>&gt;({});\n&nbsp; <span class="hljs-keyword">const</span> id = <span class="hljs-title function_">useLocation</span>().<span class="hljs-property">pathname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">\'/\'</span>)[<span class="hljs-number">2</span>];\n\n&nbsp; <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'useEffect mounts!\'</span>);\n\n&nbsp; &nbsp; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://jsonplaceholder.typicode.com/users/<span class="hljs-subst">${id}</span>`</span>)\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setUser</span>(data);\n&nbsp; &nbsp; &nbsp; });\n&nbsp; }, [id]);\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user);\n&nbsp; <span class="hljs-comment">// 5. fetching datas 2 case</span>\n\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-comment">// 5. fetching datas 2 case</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span>Name: {user.name}<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span>Username: {user.username}<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">P</span>&gt;</span>Email: {user.email}<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">\'/users/1\'</span>&gt;</span>Fetch User 1<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">\'/users/2\'</span>&gt;</span>Fetch User 2<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">\'/users/3\'</span>&gt;</span>Fetch User 3<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Container</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 5. fetching datas 2 case</span>\n&nbsp; );\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Post</span>;\n</pre><p><br></p><p>만약 위의 코드를 그대로 실행하면 위와 같은 케이스가</p><p>똑같이 발생할 것이다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1661585703/myportfolioblogproject/opxq0kmwvlf2bcimdzzm.gif" crossorigin="anonymous"></p><p><br></p><p>나는 최종적으로 Fetch User 3 를 클릭했는데</p><p>클릭했었던 Fetch User 2 역시도 네트워크 통신이 취소</p><p>되지 않고 실행됨을 알 수 있음.</p><p><br></p><p>그래서 위의 케이스와 마찬가지로</p><p>아래와 같은 clean up 함수를 적용시켜야함</p><p><br></p><pre class="ql-syntax" spellcheck="false">...\n<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'useEffect mounts!\'</span>);\n\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> unsubscribed = <span class="hljs-literal">false</span>;\n&nbsp; &nbsp; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://jsonplaceholder.typicode.com/users/<span class="hljs-subst">${id}</span>`</span>)\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (!unsubscribed) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setUser</span>(data);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'cancelled\'</span>);\n&nbsp; &nbsp; &nbsp; unsubscribed = <span class="hljs-literal">true</span>;\n&nbsp; &nbsp; };\n&nbsp; }, [id]);\n...\n</pre><p><br></p><p>즉 다른 링크를 클릭해서 id값이 바뀌고 재렌더링이</p><p>되는 순간 컴포넌트가 다시 언마운트 되게 되고 clean up 함수를 수행하게됨</p><p>그렇게 unsubscribed 값이 true로 바뀌고 기존 클릭 데이트는 업데이트가 거절되고</p><p>다시 마운트되고 useEffect가 실행되어 새로 클릭한 값으로 네트워크 통신 수행하게 됨.</p><p><br></p><p>기존 fetch, axios 모듈 모두 이에 관한 간단한 APIs 들이 있음.</p><p><br></p><h3><strong><em>*fetch API</em></strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false">&nbsp;<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'useEffect mounts!\'</span>);\n\n&nbsp; &nbsp; <span class="hljs-comment">// fetch api 사용시</span>\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();\n\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> signal = controller.<span class="hljs-property">signal</span>;\n&nbsp; &nbsp; <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://jsonplaceholder.typicode.com/users/<span class="hljs-subst">${id}</span>`</span>, { signal })\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-title function_">setUser</span>(data);\n&nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (err.<span class="hljs-property">name</span> === <span class="hljs-string">\'AbortError\'</span>) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'cancelled\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// todo: handle error</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; });\n\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; controller.<span class="hljs-title function_">abort</span>();\n&nbsp; &nbsp; };\n&nbsp;}, [id]);\n</pre><p><br></p><p>fetch API 모듈의 AbortController 매서드가</p><p>위의 공식을 그대로 수행하게 해주는 메소드 함수이다.</p><p><br></p><h3><strong><em>*axios API</em></strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false">&nbsp;<span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'useEffect mounts!\'</span>);\n\n&nbsp; &nbsp; <span class="hljs-comment">// axios api 사용시</span>\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> cancelToken = axios.<span class="hljs-property">CancelToken</span>.<span class="hljs-title function_">source</span>();\n\n&nbsp; &nbsp; axios\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">get</span>(<span class="hljs-string">`https://jsonplaceholder.typicode.com/users/<span class="hljs-subst">${id}</span>`</span>, {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">cancelToken</span>: cancelToken.<span class="hljs-property">token</span>,\n&nbsp; &nbsp; &nbsp; })\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> <span class="hljs-title function_">setUser</span>(res.<span class="hljs-property">data</span>))\n&nbsp; &nbsp; &nbsp; .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (axios.<span class="hljs-title function_">isCancel</span>(err)) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'cancelled\'</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// todo: handle error</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'useEffect unmounts!\'</span>);\n&nbsp; &nbsp; &nbsp; cancelToken.<span class="hljs-title function_">cancel</span>();\n&nbsp; &nbsp; };\n&nbsp;}, [id]);\n</pre><p><br></p><p>axios API 모듈은 CancelToken 메서드 모듈이 앞선 코드와</p><p>똑같은 기능을 수행하게 해주는 함수 코드이다.</p><p><br></p><p><span style="background-color: rgb(230, 0, 0);">﻿</span></p><h2><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>위의 예제들을 명심해서 앞으로 useEffect를 프로답게 써보자!!!</em></strong></h2>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-08-27T07:48:13.286Z',
    updatedAt: '2022-09-18T15:05:49.128Z',
    __v: 0,
  },
  {
    _id: '6325e3f17d98005032092993',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1663427817/myportfolioblogproject/gkwpatdmcmgpxf7pttai.gif',
    title: '면접 - 개발기초 (1) - 좋은 코드란?',
    text: '<h1>좋은 코드란 무엇??</h1><p><br></p><p><br></p><blockquote><span class="ql-size-large">개인적인 생각으로 좋은 코드란 성능 구현에만 집착하지 말고, 코드 보수, 유지, 확장에 적합한 </span></blockquote><blockquote><span class="ql-size-large">깨끗한 코드를 아래의 대원칙을 지키면서 코드를 하는 것이라고 생각함.</span></blockquote><p><br></p><p><br></p><ul><li><strong class="ql-size-large"><em>DRY ( Don\'t Repeat Your Code )</em></strong></li><li><strong class="ql-size-large"><em>KISS ( Keep It Simple And Stupid )</em></strong></li><li><strong class="ql-size-large"><em>YAGNI ( You Ain\'t Gonna Need it )</em></strong></li></ul><p><br></p><p><br></p><p><strong class="ql-size-large">1. DRY</strong></p><p><br></p><p>당연히 중복되는 코드를 적절한 객체화를 시켜서 반복해서 코드를 작성해선 안된다.</p><p>2번 이상 공통적으로 사용되는 코드에 한해서는 적절히 객체화시켜 재사용토록 하자</p><p><br></p><p><strong class="ql-size-large">2. KISS</strong></p><p><br></p><p>최대한 단순한 코드를 읽기 쉬운 STUPID한 쉬운 코드를 작성해야함.</p><p>즉 코드의 추상레벨을 일정 수준 지켜주어야 한다는 의미임.</p><p>이때 추상레벨이란 코드의 세부 정보를 어디까지 보여주는지를 말함.</p><p><br></p><p>이렇게 코드 기능의 세세한 부분을 보여주는 것 보다는...</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">signUp</span> = () =&gt; {\n   <span class="hljs-keyword">if</span> (email) {\n      <span class="hljs-title function_">sendEmail</span>();\n   }\n\n   <span class="hljs-keyword">if</span> (blackList) {\n      <span class="hljs-keyword">const</span> checkAgain = process.<span class="hljs-property">env</span>.<span class="hljs-property">checkNum</span>;\n      <span class="hljs-keyword">if</span> (checkAgain) {\n         <span class="hljs-keyword">if</span> (pass) {\n           <span class="hljs-title function_">sendAltPwd</span>();\n         } <span class="hljs-keyword">else</span> {\n           <span class="hljs-title function_">forbidAccess</span>();\n         }\n      }\n   }\n};\n</pre><p><br></p><p>아래와 같이 코드 세세한 부분을 숨기고 보여주는 것이 보기가 훨씬 더 쉬울 것이다.</p><p>만약 세부 코드 기능들을 확인하고 싶다면 각 함수 별로 코드 기능이 정의 된 곳으로 가서 확인 가능함.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">signUp</span> = () =&gt; {\n   <span class="hljs-title function_">sendSignUpEmail</span>(email);\n   <span class="hljs-title function_">sendSignUpBlackList</span>(blackList);\n};\n</pre><p><br></p><p><strong class="ql-size-large">3. YAGNI</strong></p><p><br></p><p>필요 없는 기능을 구현한 코드는 과감하게 지울 것!</p><p>버전이 업데이트 되면서 이미 구현했던 기능 중 필요 없는 기능 구현 사항은 과감하게 지울 것!</p><p>필요 없는 코드가 있어봤자 프로그램만 무거워지고 성능 상 도움이 되지 않음.</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-09-17T15:12:49.256Z',
    updatedAt: '2022-09-17T15:17:55.044Z',
    __v: 0,
  },
  {
    _id: '6325f1897d980050320929a7',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1663464732/myportfolioblogproject/antsobets7ecaijj4gyg.gif',
    title: '면접 - 네트워크 (1) - OSI 7계층, TCP/IP',
    text: '<h1>1. 데이터란?</h1><p><br></p><p>네트워크를 통해서 컴퓨터끼리 주고 받는 데이터는 컴퓨터 화면을 보면 여러 동영상, 이미지, 텍스트로 구성된 듯 보인다.</p><p>하지만, 이 모든 것은 2진법 즉, 0, 1로 이루어진 숫자일 뿐이다.</p><p>우리가 인터넷 네트워크를 통해서 보는 것은 단지 2진법으로 이루어진 아주 긴 전기신호일 뿐이다.</p><p>그렇다면 데이터를 주고 받는데 물리적인 케이블과 다른 무엇이 필요할까?</p><p><br></p><p><br></p><h1>2. 프로토콜</h1><p><br></p><p>컴퓨터 간의 원활한 통신을 위해선 물리적인 케이블과 더불어, 통신규약인 프로토콜이 필요하다.</p><p>프로토콜이란 컴퓨터 간의 원활한 데이터 통신을 위해 약속된 규약을 의미한다.</p><p>프로토콜에는 신호 처리법, 오류처리, 암호, 인증, 주소 등이 포함된다.</p><p><br></p><p>즉, 전세계적으로 원활한 통신을 위해 UN 산하 ITU라는 기관에서 프로토콜을 통합시킨 국제 표준 통신규약에 따라,</p><p>우리가 지금 인터넷을 통해 데이터를 주고 받고 있는 것이다.</p><p><br></p><p>데이터를 안전, 신속, 정확하게 포장하여 전달하고 또 그것을 받는 입장에선 안전, 신속, 정확하게 해석하는 하나의 방법인 것이다.</p><p><br></p><p><br></p><h1>3. OSI 7계층 모델</h1><p><br></p><p>OSI 7계층 모델은 네트워크 통신 과정을 7개 계층으로 구분한 산업 표준 모델이다.</p><p>초창기 네트워크가 등장할 때 컴퓨터마다 시스템이 통일되지 않고 달랐기 때문에,</p><p>통일된 통신 과정 표준 모델이 필요함에 따라 나오게 됨.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663430577/myportfolioblogproject/bpbsejgkigkkfrydnmce.gif" crossorigin="anonymous"></p><p><br></p><blockquote>PDU 란?</blockquote><blockquote>OSI 7계층에서 PDU( Process Data Unit ) 이란 각 계층에서 전송되는 단위이다.</blockquote><blockquote>1계층에서 PDU가 비트(Bit) 라고 생각하기 쉽지만, PDU라고 하지 않고 여기서 비트는 단위라기 보다 전기 신호의 흐름일 뿐이다.</blockquote><blockquote><br></blockquote><blockquote>PDU는 2계층의 프레임(Frame), 3계층의 패킷(Packet), 4계층의 세그먼트(Segment) 만 생각하면 된다.</blockquote><blockquote>네트워크 통신과정을 깊게 이해하기 위해서는 왜 각각의 계층의 PDU가 다른지 알아야하고, 역할에 대해 알고 있어야함.</blockquote><p><br></p><h2><br></h2><h2>1계층: 물리계층 (Physical Layer)</h2><p><br></p><p>물리계층은 OSI 모델의 최하위 계층에 속하며, 상위 계층에서 전송된 데이터를 물리 매체(허브, 라우터, 케이블 등)를 통해서</p><p>다른 시스템에 전기적 신호를 전송하는 역할을 한다.</p><p><br></p><p>기계어를 전기적 신호로 바꿔서 케이블 와이어에 실어주는 역할을 한다.</p><p><br></p><ul><li><strong><em>PDU: 비트( Bit )</em></strong></li><li><strong><em>프로토콜: Modem, Cable, Fiber, RS-232C</em></strong></li><li><strong><em>장비: 허브, 리피터</em></strong></li></ul><p><br></p><p><br></p><h2>2계층: 링크계층 (Link Layer)</h2><p><br></p><p>링크계층은 네트워크 기기들 사이의 데이터 전송을 하는 역할을 한다.</p><p>시스템 간의 오류 없는 데이터 전송을 위해 패킷을 <strong>프레임</strong>으로 구성하여 물리계층으로 전송한다.</p><p>3계층에서 정보를 받아 주소와 제어정보를 헤더와 테일에 아래와 같이 추가한다.</p><p><br></p><p><strong><em>( Data + HTTP Header + TCP Header + IP Header + </em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>Ethernet Frame Header</em></strong><strong><em> )</em></strong></p><p><br></p><p><br></p><ul><li><strong><em>PDU: 프레임( Frame )</em></strong></li><li><strong><em>프로토콜: 이더넷, MAX, PPP, ATM, LAN, Wifi</em></strong></li><li><strong><em>장비: 브릿지, 스위치</em></strong></li></ul><p><br></p><p><br></p><h2>3계층: 네트워크계층 (Network Layer)</h2><p><br></p><p>IP( Internet Protocol ) 이 활용되는 부분으로, 어떠한 데이터그램( Datagram )이 가는 최적의 경로를 설정해주는 역할을 하는 곳임.</p><p>어떠한 데이터가 송신자로부터 수신자로 가기 위해선 서로 대역폭이 다른 IP들이 목적지를 제대로 찾아갈 수 있도록 경로 설정을 수행하는 곳.</p><p>이를 라우팅( Routing ) 이라고 한다.</p><p><br></p><p>이렇게 라우팅을 설정을 해주면 주고 받을 데이터를 2계층으로 패킷 단위로 분할하여 전송한 후, 2계층 링크계층에서 프레임으로 다시 포장되어</p><p>전송하게 된다.<strong><em> </em></strong></p><p><br></p><p>최적의 경로가 설정되면 4계층에서 추가된 TCP Header에 더불어 송수신자 관련 IP 주소 정보인 헤더가 추가되어, 아래의 데이터가 전달됨.</p><p><br></p><p><strong><em>( Data + HTTP Header + TCP Header + </em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>IP Header</em></strong><strong><em> )</em></strong></p><p><br></p><ul><li><strong><em>PDU: 패킷( Packet )</em></strong></li><li><strong><em>프로토콜: IP, ICMP 등</em></strong></li><li><strong><em>장비: 라우터, L3 스위치</em></strong></li></ul><p><br></p><p><br></p><h2>4계층: 전송계층 (Transport Layer)</h2><p><br></p><p>데이터를 주고 받을 송신자와 수신사의 논리적 연결( Connection )을 담당하는 부분으로, 신뢰성 있는 연결을 유지할 수 있도록 도와줍니다.</p><p>즉, Endpoint( 사용자 ) 간의 연결을 생성하고 난수를 생성하여 패킷으로 연결 테스트 용으로 전달, 수신사 확인!! 패킷 전송 유효성 확인!!</p><p>이러한 TCP 연결 확인 방식을 \'3-Way Handshake\' 라고 한다.</p><p>( 연결을 끊을 때에는 \'4-Way Handshake\' 를 쓴다. 이에 대해서는 추후 포스트에 정리할 예정 )</p><p><br></p><p><strong><em>&lt;TCP 연결 방법&gt;</em></strong></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663464246/myportfolioblogproject/q62yu8oucmlgei0iaw7b.gif" crossorigin="anonymous"></p><p>상호 확인 절차를 거쳐서 패킷 유효성 검사.</p><p><br></p><p><br></p><p><strong><em>&lt;UDP 연결 방법&gt;</em></strong></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663464328/myportfolioblogproject/buf8sprlmajtjeoxkidr.gif" crossorigin="anonymous"></p><p>상호 확인 절차 거치지 않고 패킹 일방적으로 전달.</p><p><br></p><p>TCP, UDP 네트워크 통신 방법이 다르고, 이에 따라 각자의 쓰임이 다름.</p><p>TCP 같은 경우 일반적인 인터넷 연결 방법이며 신뢰성, 보안성이 높은 대신 느림.</p><p>UDP는 신뢰성, 보안성이 떨어지는 대신에 빠름. 그래서 실시간 통신 등에 주로 UDP 방식이 활용됨.</p><p><br></p><p>이러한 확인 과정을 거친 후, TCP 연결 결과를 아래와 같이 주고 받을 데이터 헤더로서 담는다.</p><p><br></p><p><strong><em>( Data + HTTP Header + </em></strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>TCP Header</em></strong><strong><em> )</em></strong></p><p><br></p><p>그 헤더에는 세그먼트(Segment) 도 포함되며, 보내어진 패킷 전송이 유효한지 확인하며,</p><p>실패 시 다시 보내는 등의 오류 및 흐름제어, 다중화, 주소 설정 등등 수행한다.</p><p><br></p><ul><li><strong><em>PDU: 세그먼트( Segment )</em></strong></li><li><strong><em>프로토콜: TCP, UDP, ARP, RTP</em></strong></li><li><strong><em>장비: 게이트웨이, L4 스위치</em></strong></li></ul><p><br></p><p><br></p><h2>5계층: 세션계층 (Session Layer)</h2><p><br></p><p>통신 세션을 구성하는 계층으로, 송수신자 간의 포트(Port) 연결이라고 볼 수 있음.</p><p>송수신자 컴퓨터 네트워크 간의 상호작용을 설정하고 (포트를 연결) 유지하며 동기화 한다.</p><p>포트 연결이 성공적이라면 관련 인증으로 세션을 생성하고, 송수신자 간에 데이터를 주고 받을 때마다,</p><p>포트 연결 (세션) 이 유효한지 확인하며 네트워크 통신을 한다.</p><p><br></p><ul><li><strong><em>프로토콜: NetBIOS, SSH, TLS</em></strong></li></ul><p><br></p><p><br></p><h2>6계층: 표현계층 (Presentation Layer)</h2><p><br></p><p>표현계층은 송신측과 수신측 사이에서 데이터의 형식(png, jpg, jpeg ...) 을 정해준다.</p><p>받은 데이터를 코드 변환, 구문 검색, 암호화, 압축의 과정을 통해 올바른 표준방식으로 변환해주는 역할.</p><p>쉽게 말해서 파일의 \'확장자\' 라고 생각하면 편함.</p><p><br></p><ul><li><strong><em>프로토콜: JPG, MPEG, SMB, AFP</em></strong></li></ul><p><br></p><p><br></p><h2>7계층: 응용계층 (Application Layer)</h2><p><br></p><p>사용자와 바로 연결되어 있으며, 사용자가 네트워크를 이용하여 데이터를 주고 받을 수 있도록 도와주는 계층.</p><p>간단히 말해서 그냥 우리가 평상시 쓰는 모바일 앱, 인터넷 웹페이지라고 생각하면 편함.</p><p>파일 전송, DB, 메일 전송 등등 우리가 일상적으로 쓰는 응용 소프트웨어 서비스를 네트워크에 연결해주는 계층.</p><p><br></p><p>웹 개발 코딩을 할 때, Fetch, Axios 네트워크 소통 모듈에는 아래와 같이 헤더와 데이터가 구성되어서 네트워크 소통함.</p><p><br></p><p><strong><em>( </em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>Data</em></strong><strong><em> + </em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>HTTP Header</em></strong><strong><em> )</em></strong></p><p><br></p><ul><li><strong><em>프로토콜: DHCP, DNS, FTP, HTTP, HTTPS</em></strong></li></ul><p><br></p><p><br></p><h1>4. TCP/IP 모델</h1><p><br></p><p>위의 OSI 7 계층 참고 모델이 존재하지만 엄연히 참고 모델, 권고 사항일 뿐 실제 사용되는 인터넷 프로토콜은</p><p>7계층 구조를 완전히 따르진 않는다. 인터넷 프로토콜 스택( Internet Protocol Stack )은 현재 대부분 TCP/IP를 따름.</p><p><br></p><p>TCP/IP 는 하나의 프로토콜이 아닌 TCP와 IP를 합쳐서 부르는 말임.</p><p>이를 사용하겠다는 것은 IP 주소 체계를 따르고, IP Routing을 이용해 송수신자의 네트워크 주소를 설정.</p><p>그리고 TCP의 특성 즉 패킷을 통해서 IP 간의 논리적 연결을 생성하고 신뢰할 수 있는 데이터 교환을 하겠다는 의미임.</p><p><br></p><p>즉, TCP/IP를 사용한다는 것은 송신자가 수신자에게 IP 주소를 사용하여 데이터를 전달하고,</p><p>그 데이터가 제대로 갔는지, 너무 빠르지는 않는지, 제대로 받았다고 연락은 오는지에 대해서는 TCP가 그 역할을 수행하는</p><p>네트워크 통신 방법을 사용하고 있다는 의미임.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663464151/myportfolioblogproject/kli2tmq4tmffatjrzbqk.gif" crossorigin="anonymous"><span class="ql-cursor">﻿</span></p><p><br></p><p>OSI 7 계층과 비교하면 TCP/IP의 구조는 위와 같음.</p><p>우리가 흔히 쓰고 있는 방식이라고 생각하면 됨.</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong style="background-color: inherit; color: rgb(0, 0, 0);">&lt;참고 출처&gt;</strong></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">https://madplay.github.io/post/network-osi-7-layer</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&amp;blogId=demonicws&amp;logNo=40117378644</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">https://aws-hyoh.tistory.com/entry/OSI-7-Layer-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0</span></p><p><span style="background-color: inherit; color: rgb(0, 0, 0);">https://swalloow.tistory.com/56?category=676173</span></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-09-17T16:10:49.933Z',
    updatedAt: '2022-09-18T13:39:15.181Z',
    __v: 0,
  },
  {
    _id: '6327e20a7d98005032092b7d',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1663558148/myportfolioblogproject/wffq924qsx6r6eeojtvz.gif',
    title: '면접 - 프론트엔드 (1) - 브라우저 동작 원리',
    text: '<h1>최적화란 무엇인가?</h1><p><br></p><p>요즘 인터넷 브라우저, 게임이든지 간에 <strong>1초</strong>에<strong> 60fps(frame per second)</strong> 을 유지해야 화면이 매끄러워 보인다.</p><p>라는 말을 종종한다. 즉, 이 말은 1초에 화면을 60번 그릴 수 있는 성능이 되어야 한다는 것이다.</p><p><br></p><p>달리 말하면 하나의 화면 <strong>1번</strong> 그리는데 <strong>0.016초 (16ms)</strong> 가 아래로 사용해야 화면이 버벅이지 않고,</p><p>매끄럽게 우리에게 보여질 것이다. 이를 <strong>최적화</strong>라고 한다.</p><p><br></p><p><br></p><h1>브라우저에서 최적화란?</h1><p><br></p><p>그렇다면 게임은 그렇다 치고, 우리가 집중하고자 하는 웹사이트를 시각화하고 이용할 수 있게끔하는 브라우저에서</p><p>최적화는 어떻게 해야할까?</p><p><br></p><h2><br></h2><h2>중요 렌더링 경로 ( Critical Rendering Path )</h2><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663553472/myportfolioblogproject/kkryampyjdwxpzxohio8.gif" crossorigin="anonymous"></p><p><br></p><p>우리가 만약 일상적으로 접하는 웹페이지 url을 주소창에 입력하고 엔터키를 누르면, 브라우저는 네트워크 망을 통해서 해당 서버(해당 ip 주소)에</p><p>HTML, CSS, JavaScript 파일을 요청(request)을 하게 됩니다.</p><p><br></p><p>요청을 받은 해당 서버에서는 요청자 컴퓨터 ip 주소를 목표로 해당 브라우저에게 HTML, CSS, JavaScript 파일을 응답(response) 해주게 됩니다.</p><p>파일 데이터를 받은 브라우저는 위와 같은 단계를 거쳐 화면에 우리 눈으로 볼 수 있게끔 작업을 진행합니다.</p><p><br></p><p>이러한 단계를 빠르고 효율적으로 진행될 수 있게 하는 것이 브라우저 상의 최적화입니다.</p><p>물론 브라우저 개발자들이 당연히 최적화에 신경 써야겠지만,</p><p>개발하는 개개인들도 효율적이고 깨끗한 코드 구현을 통해서 최적화에 간접적으로 기여할 수 있을 것입니다.</p><p><br></p><p>순서를 요약하자면,</p><p><br></p><p><br></p><p><strong><em>1. 서버에서 응답으로 받은 HTML 데이터를 파싱한다.</em></strong></p><p><strong><em>2. HTML을 파싱한 결과로 DOM Tree를 만든다.</em></strong></p><p><strong><em>3. 파싱하는 중 CSS 파일 링크를 만나면 CSS 파일을 요청해서 받아온다.</em></strong></p><p><strong><em>4. CSS 파일을 읽어서 CSSOM( CSS Object Model )을 만든다.</em></strong></p><p><strong><em>5. DOM Tree와 CSSOM이 만들어지면, 이 둘을 사용해 Render Tree를 만든다.</em></strong></p><p><strong><em>6. Render Tree에 있는 각각의 노드들이 화면의 어디에 어떻게 위치하는지 계산하는 Layout 과정을 거친다.</em></strong></p><p><strong><em>7. 화면에 실제 픽셀을 Paint 한다.</em></strong></p><p><br></p><p><br></p><h3>첫 단계, 서버에서 응답받은 HTML 데이터를 파싱한다.</h3><p><br></p><p>-서버에서 응답받은 HTML 데이터를 파싱(parsing) 하기 시작하면서 브라우저의 그리기 과정은 시작됩니다.</p><p><br></p><p>-중간에 미디어 파일을 만나면 추가적으로 요청해서 받아오고,</p><p><br></p><p>-JavaScript 파일을 만나면 해당 파일을 받아와서 실행할 때까지 파싱이 멈춤.</p><p><br></p><p><br></p><h3>두 단계, HTML을 파싱한 결과로 DOM Tree를 만든다.</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663555842/myportfolioblogproject/k8ordonm4subru4hkrxe.gif" crossorigin="anonymous"></p><p><br></p><p>-읽어들인 HTML 바이트 데이터를, 해당 파일에 지정된 인코딩 ( ex. UTF-8 ) 스타일에 따라 문자열로 바꿈.</p><p><br></p><p>-바꾼 문자열을 다시 읽어서 HTML 표준에 따라 Token으로 변환.</p><p><br></p><p>-위와 같이 &lt;html&gt;은 StartTag: html, &lt;/html&gt;은 EndTag: html로 변환.</p><p><br></p><p>-Token화된 HTML 표준 문자열이 다시 해당 Node로 변환되는 과정을 거침.</p><p><br></p><p>-StartTag에 들어오면 EndTag 만나기 전까지 들어오는 노드는 자식 노드로서 포함됨.</p><p><br></p><p>-그에 따라 위와 같은 DOM Tree 모양이 완성되어지게 됨.</p><p><br></p><p><br></p><h3>세 번째, CSS에서 CSSOM 으로 변환.</h3><p><br></p><p>-HTML 파싱하다가 CSS 파일 만나면 CSS 요청 받아옴.</p><p><br></p><p>-CSS파일 파싱도 HTML의 DOM Tree 형식으로 CSSOM이 만들어짐.</p><p><br></p><p>-다만 CSSOM은 CSS 부모 노드의 특성을 자식 노드가 그대로 이어받는 규칙이 추가됨.</p><p>이를 cascading 규칙이라고 함.</p><p><br></p><p><br></p><h3>네 번째, Render Tree 형성.</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1663556721/myportfolioblogproject/ts8dbe0wrbshbkhnyiln.gif" crossorigin="anonymous"></p><p><br></p><p>-HTML DOM Tree와 CSSOM Tree가 합쳐져서 Render Tree 형성되어짐.</p><p><br></p><p>-이때 Render Tree는 화면 상으로 <strong>\'보이는 노드\' </strong>만으로 구성되어짐.</p><p><br></p><p>-위와 같이 \'display:none;\' 이라고 정의된 노드는 Render Tree에서 제외된 것을 볼 수 있다.</p><p><br></p><p>-기본적으로 Render Object Tree가 형성되면서 div는 Block element, span은 Inline element로 정의</p><p><br></p><p>-기본적으로는 Render Layer가 만들어지지만, GPU가 처리해야할 그래픽적 요소는 Graphic Layer가 생성되어짐.</p><p>예를 들면 &lt;video&gt;, &lt;canvas&gt;, 3d CSS Effect, z-index ... 등등</p><p><br></p><p><br></p><h3>다섯째, Layout 지정.</h3><p><br></p><p>-화면에 보이는 Render Object Tree가 만들어지면 각각의 보이는 노드가 어디에 위치하는지 지정하는 Layout 과정 거침.</p><p><br></p><p>-실제 사용하는 사용자의 화면 뷰포트에 따라 계산되어 위치가 지정되어지는 과정을 거침.</p><p><br></p><p>-Responsive 하게 스크린을 움직이면, 이 Layout 과정부터 다시 시작하여 브라우저가 Paint 과정을 거침.</p><p><br></p><p><br></p><h3>여섯째, Paint 하기.</h3><p><br></p><p>-이제 Layout 각 노드의 위치 지정이 끝나면, 실제로 브라우저는 pixel을 화면에 그리게 된다.</p><p>예를 들면 backgroud-color, color, visibility, outline... 등등의 css 특성을 실제 pixel에 그리게 된다는 것이다.</p><p><br></p><p>-이렇게 브라우저는 마지막으로 화면에 우리들에게 필요한 시각적 데이터를 보여주게 된다.</p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong>&lt;출처 자료&gt;</strong></p><p><br></p><p>https://web.dev/critical-rendering-path-constructing-the-object-model/</p><p>https://d2.naver.com/helloworld/59361</p><p>https://web.dev/howbrowserswork/</p><p>https://www.youtube.com/watch?v=SmE4OwHztCc</p><p>https://www.udacity.com/course/website-performance-optimization--ud884</p><p>https://velog.io/@thyoondev/%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-09-19T03:29:14.591Z',
    updatedAt: '2022-09-19T03:43:20.923Z',
    __v: 0,
  },
  {
    _id: '6331b15f7d98005032092c22',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1664198443/myportfolioblogproject/eifd7uzutlmpfc2iz9m7.gif',
    title: '면접 - 프론트엔드 (2) - Document Object Model',
    text: '<h1>DOM 이란?</h1><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>DOM ( The Document Object Model ) 즉, 문서 객체 모델은 HTML, XML 문서의 프로그래밍 인터페이스( Interface, 방법, 수단, 도구 ) 이다. </em></strong></p><p>컴퓨터 메모리에 웹 페이지 문서 구조를 Node 객체로 논리 트리 ( Tree ) 표현함으로써, 스크립트 및 프로그래밍 언어 ( 대표적으로 JavaScript )와 페이지를 연결하는 역할을 수행한다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664198434/myportfolioblogproject/clh2kyxhgfcn8hb1ry85.gif" crossorigin="anonymous"></p><p><br></p><p> <a href="https://www.lsevina126.asia/post/6327e20a7d98005032092b7d" rel="noopener noreferrer" target="_blank">https://www.lsevina126.asia/post/6327e20a7d98005032092b7d</a></p><p><br></p><p>앞선 블로그 포스트 \'브라우저 동작원리\' 에서 보여준 위 사진과 같이 서버로 부터 받은 HTML 바이트 데이터로부터,</p><p>노드 객체를 생성하고, 이를 논리적 Tree로 DOM ( 문서 객체 모델 )로 만들어 메모리에 저장함으로써 브라우저 상으로 페이지를 볼 수 있으며,</p><p>우리가 Script 언어인 JavaScript로 각각의 노드에 접근하여 데이터를 변경하고, 심지어 새로운 노드 객체를 생성하여 추가할 수 있는 것이다.</p><p><br></p><p>예를 들어, document 와 window objects 는 DOM 프로그래밍에서 가장 자주 사용하는 objects 이다. 간단하게 설명하자면,</p><p>window object는 브라우저와 같다고 생각하면 된다. document object는 페이지  root document 그 자체라고 볼 수 있는 것이다.</p><p>( 아래 예시 코드 참조 )</p><p><br></p><p>아래와 같이 window 객체. 즉, 브라우저 상에서 alert message를 표시하는 간단한 것일 수도 있지만...</p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">"window.alert(\'welcome to my home page!\');"</span>&gt;</span>\n</pre><p><br></p><p>아래와 같이 h1 element node를 생성하고, 그 element node에 text node를 추가해주는 방식이 있을 것이다.</p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>\n       <span class="hljs-comment">// run this function when the document is loaded</span>\n       <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>() {\n\n         <span class="hljs-comment">// create a couple of elements in an otherwise empty HTML page</span>\n         <span class="hljs-keyword">var</span> heading = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">"h1"</span>);\n         <span class="hljs-keyword">var</span> heading_text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-string">"Big Head!"</span>);\n         heading.<span class="hljs-title function_">appendChild</span>(heading_text);\n         <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(heading);\n      }\n    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</pre><p><br></p><p>그리고 window 객체 (브라우저, 컴퓨터 메모리) 안의 document 객체 안에 들어있는 DOM Tree 안에 표현된 각각의 노드 객체는</p><p>웹 페이지에 표시되는 이미지, 동영상, 텍스트 노드가 될 수도 있고 , 위와 같이 HTML 태그로 표현되는 &lt;div&gt;, &lt;p&gt;, &lt;span&gt;... 등등 과</p><p>같이 표현되어 DOM Tree를 형성한다. 이런 HTML 태그를 elements 라고도 표현을 한다. 즉, node 객체와 elements 의 관계는 아래와 같다 할 수 있다.</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664200094/myportfolioblogproject/ybjinxmucuangzksgsg0.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><h1>그렇다면 HTML DOM 과 CSSOM 조합 결과 생기는 Render Tree는 DOM 인가?</h1><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664200581/myportfolioblogproject/tr29fjqayxo9kujrzaqa.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p>앞서 \'브라우저 동작 원리\' 포스트에서 소개한 바와 같이, HTML DOM Tree와 CSSOM Tree가 합쳐져서 Render Tree가 형성되어지는데..</p><p>이 때의 Render Tree는 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>보이는 노드</em></strong>로만 구성되어 진다.</p><p><br></p><p>앞선 포스트에서 설명한 바와 같이 \'display: none;\' 이라고 정의 되어진 dom의 node 요소는 완전히 제외되어지는 것이기 때문에</p><p>원초적 의미의 HTML DOM 그 자체는 아닌 것이다.</p><p><br></p><p>그리고 CSS 트리는 만드는 과정에서 생기는 ::before, ::after 와 같은 CSSOM, Render Tree의 한 축을 이루는 가상 요소 또한 </p><p>원초적 의미의 HTML DOM은 아닌 것입니다.</p><p><br></p><p>즉 우리가 화면, 브라우저 상으로 실제로 보는 페이지는 HTML DOM 그 자체가 아니라, </p><p>HTML DOM 과 CSSOM 의 조합 결과 탄생한 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>보이는 노드</em></strong>로만 구성된 Render Tree 인 것입니다. </p><p><br></p><p><br></p><p><br></p><p><br></p><p>&lt;출처&gt;</p><p>https://wit.nts-corp.com/2019/02/14/5522</p><p>https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model/Introduction</p><p>https://bitsofco.de/what-exactly-is-the-dom/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-341&amp;utm_medium=email</p><p>https://www.w3schools.com/js/js_htmldom.asp</p><p>https://hianna.tistory.com/711#:~:text=%EC%9C%84%20%EA%B7%B8%EB%A6%BC%EA%B3%BC%20%EA%B0%99%EC%9D%B4%20element,node%EB%9D%BC%EA%B3%A0%20%ED%95%A0%20%EC%88%98%20%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4.</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-09-26T14:04:15.244Z',
    updatedAt: '2022-09-26T14:04:15.244Z',
    __v: 0,
  },
  {
    _id: '633409607d98005032092c76',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1664354649/myportfolioblogproject/bae1qamqw8o9b69seaxj.gif',
    title: '면접 - 프론트엔드 (3) - CORS',
    text: '<p><a href="https://www.lsevina126.asia/post/623ebd5b25066ac1eb074c84" rel="noopener noreferrer" target="_blank" class="ql-size-large"><strong>https://www.lsevina126.asia/post/623ebd5b25066ac1eb074c84</strong></a></p><p><br></p><p>이미 그전 포스트에서 CORS를 상세하게 설명한 포스트가 있음.</p><p>이 부분 읽어보고 올 것.</p><p>해당 포스트는 요약 사항임.</p><p><br></p><p><br></p><h1>CORS ( Cross-Origin-Resource-Sharing ) - 교차 출처 공유 허용</h1><p><br></p><p>브라우저가 다른 도메인으로 어떤 리소스를 요청할 경우, 교차 출처 공유 허용 HTTP 헤더를 사용하여 요청해야 하며,</p><p>서버 역시 해당 브라우저로 리소스를 허용할지 말지 관련 설정을 따로 해주어야함.</p><p><br></p><p>브라우저들은 보안 상의 이유로 스크립트에서 Cross-Origin HTTP 요청을 제한한다.</p><p>리소스를 주고 받는 네트워크 HTTP 통신은 무조건 동일 출처 ( 똑같은 프로토콜, 호스트, 포트 ) 간에만 성립이 되는 것이 원칙.</p><p>이를 Same-Origin-Policy (동일 출처 정책 ) 이라고 한다.</p><p>( 이 때, 서브 도메인 네임은 상관이 없다. )</p><p><br></p><p>즉, CORS는 타 도메인 간에 리소스를 공유할 수 있게 끔 하는 HTTP 네트워크 통신의 표준인 것이다.</p><p><br></p><p><br></p><h1>Preflight Request</h1><p><br></p><p>브라우저에서 HTTP 실제 요청을 보내기 전에 해당 출처가 안전한지, HTTP 요청이 정상적으로 되는지</p><p>Preflight Request ( 일종의 예비 요청 )을 보내는 것을 말함.</p><p><br></p><p>실제 HTTP 요청 전에 요청 관련 헤더를 보내서, 서버에서 CORS (교차 출처 허용) 을 하는지, 안하는지,</p><p>관련 헤더들이 서버에서 정상적으로 인증되고 브라우저로 돌아오는지 확인하는 것을 말함.</p><p><br></p><p>이런 예비 요청 과정이 끝나고 실제 요청인 본요청이 들어가게 되는 것이다.</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-09-28T08:44:16.434Z',
    updatedAt: '2022-09-29T01:44:47.910Z',
    __v: 0,
  },
  {
    _id: '63366f2c7d98005032092cda',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1664502345/myportfolioblogproject/xkczebpyjmgwnr1wfzfr.gif',
    title: 'NodeJS의 helmet 모듈',
    text: '<h1>1. helmet 모듈 이란?</h1><p><br></p><p>helmet 모듈은 서버에서 다양한 HTTP 헤더를 자동 설정을 통해 서버 어플리케이션의 보안을 강화해주는 NodeJS 보안 모듈이다.</p><p>헬멧을 써서 내 머리를 보호하듯이, 내 웹 서버를 외부 공격으로부터 보호해주는 역할을 수행한다.</p><p><br></p><p>지금까지 웹 어플리케이션을 개발할 때 hemet 모듈 보안 헤더 설정을 하나 하나 뜯어보지 못했는데,</p><p>어느 정도 공부가 끝난 지금 해보고자 한다.</p><p><br></p><p><br></p><h1>2. helmet 사용법</h1><p><br></p><p>npm을 통해서 모듈을 설치한다.</p><p><br></p><pre class="ql-syntax" spellcheck="false">npm install helmet\n</pre><p><br></p><p>helmet은 개발환경에서는 필요없는 모듈이며, 배포환경에서만 활성화 한다.</p><p>contentSecurityPolicy는 꽤나 복잡한 설정이라서,</p><p>개발을 배우는 초보자들은 false를 놓고 공부하길 추천하며,</p><p>추후에 HTTP 보안 헤더를 깊이 공부할 때 설정을 해보길 바람.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">\'production\'</span>) {\n  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">morgan</span>(<span class="hljs-string">"combined"</span>));\n  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>({ <span class="hljs-attr">contentSecurityPolicy</span>: <span class="hljs-literal">false</span> }));\n} <span class="hljs-keyword">else</span> {\n  app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">morgan</span>(<span class="hljs-string">"dev"</span>));\n}\n</pre><p><br></p><p><br></p><h1>3. helmet 미들웨어</h1><p><br></p><p>Helmet은 Express 미들웨어 모듈이며, Helmet 또한 여러 미들웨어 모듈을 합쳐 놓은 미들웨어 패키지 모듈이다.</p><p>Express 기반 백엔드 서버에서 여러 Response header 보안 관련해서 설정해주는 미들웨어 함수의 모음인 것이다.</p><p>그래서 이 미들웨어 header 설정 함수만 공부하고 마스터해도 HTTP 보안 관련해서 어느 정도 공부가 될 것이다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> express, { <span class="hljs-title class_">NextFunction</span>, <span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'express\'</span>;\n<span class="hljs-keyword">import</span> helmet <span class="hljs-keyword">from</span> <span class="hljs-string">\'helmet\'</span>;\n\n<span class="hljs-comment">// helmet 기본 설정 사용. default 설정시 사용.</span>\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>());\n\n<span class="hljs-comment">// helmet 특정 기능만 사용할 때 사용</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">contentSecurityPolicy</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">crossOriginEmbedderPolicy</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">crossOriginOpenerPolicy</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">crossOriginResourcePolicy</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">dnsPrefetchControl</span>()); <span class="hljs-comment">// default 설정</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">expectCt</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">frameguard</span>()); <span class="hljs-comment">// default 설정</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">hidePoweredBy</span>()); <span class="hljs-comment">// default 설정</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">hsts</span>()); <span class="hljs-comment">// default 설정</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">ieNoOpen</span>()); <span class="hljs-comment">// default 설정</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">noSniff</span>()); <span class="hljs-comment">// default 설정</span>\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">originAgentCluster</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">permittedCrossDomainPolicies</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">referrerPolicy</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">xssFilter</span>()); <span class="hljs-comment">// default 설정</span>\n</pre><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">// helmet() 이렇게만 사용하여 default 값으로만 사용할 경우, 적용되는 default 값은 아래와 같다.</span>\n<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Security</span>-<span class="hljs-title class_">Policy</span>: <span class="hljs-keyword">default</span>-src <span class="hljs-string">\'self\'</span>;base-uri <span class="hljs-string">\'self\'</span>;font-src <span class="hljs-string">\'self\'</span> <span class="hljs-attr">https</span>: <span class="hljs-attr">data</span>:;form-action <span class="hljs-string">\'self\'</span>;frame-ancestors <span class="hljs-string">\'self\'</span>;img-src <span class="hljs-string">\'self\'</span> <span class="hljs-attr">data</span>:;<span class="hljs-built_in">object</span>-src <span class="hljs-string">\'none\'</span>;script-src <span class="hljs-string">\'self\'</span>;script-src-attr <span class="hljs-string">\'none\'</span>;style-src <span class="hljs-string">\'self\'</span> <span class="hljs-attr">https</span>: <span class="hljs-string">\'unsafe-inline\'</span>;upgrade-insecure-requests\n<span class="hljs-title class_">Cross</span>-<span class="hljs-title class_">Origin</span>-<span class="hljs-title class_">Embedder</span>-<span class="hljs-title class_">Policy</span>: <span class="hljs-built_in">require</span>-corp\n<span class="hljs-title class_">Cross</span>-<span class="hljs-title class_">Origin</span>-<span class="hljs-title class_">Opener</span>-<span class="hljs-title class_">Policy</span>: same-origin\n<span class="hljs-title class_">Cross</span>-<span class="hljs-title class_">Origin</span>-<span class="hljs-title class_">Resource</span>-<span class="hljs-title class_">Policy</span>: same-origin\n<span class="hljs-title class_">Origin</span>-<span class="hljs-title class_">Agent</span>-<span class="hljs-title class_">Cluster</span>: ?<span class="hljs-number">1</span>\n<span class="hljs-title class_">Referrer</span>-<span class="hljs-title class_">Policy</span>: no-referrer\n<span class="hljs-title class_">Strict</span>-<span class="hljs-title class_">Transport</span>-<span class="hljs-title class_">Security</span>: max-age=<span class="hljs-number">15552000</span>; includeSubDomains\nX-<span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span>-<span class="hljs-title class_">Options</span>: nosniff\nX-<span class="hljs-variable constant_">DNS</span>-<span class="hljs-title class_">Prefetch</span>-<span class="hljs-title class_">Control</span>: off\nX-<span class="hljs-title class_">Download</span>-<span class="hljs-title class_">Options</span>: noopen\nX-<span class="hljs-title class_">Frame</span>-<span class="hljs-title class_">Options</span>: <span class="hljs-variable constant_">SAMEORIGIN</span>\nX-<span class="hljs-title class_">Permitted</span>-<span class="hljs-title class_">Cross</span>-<span class="hljs-title class_">Domain</span>-<span class="hljs-title class_">Policies</span>: none\nX-<span class="hljs-variable constant_">XSS</span>-<span class="hljs-title class_">Protection</span>: <span class="hljs-number">0</span>\n</pre><p><br></p><p>그냥 기본 모듈만 사용할 때 적용되는 것은 위의 주석문의 default 함수는 위와 같다.</p><p>\'helmet()\' 이것만 사용하고, default 미들웨어 함수 중 몇 개만 비활성화 시키기 싶다면 아래와 같이 설정한다.</p><p><br></p><pre class="ql-syntax" spellcheck="false">app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>({\n  <span class="hljs-attr">frameguard</span>: <span class="hljs-literal">false</span>\n}));\n</pre><h3><br></h3><p><br></p><h3>1. app.use(helmet.contentSecurityPolicy());</h3><p><br></p><p>일명 CSP, 콘텐츠 보안 정책 설정을 통해서 의도치 않은 내용이 브라우저 페이지에 삽입되는 것을 방지함.</p><p><br></p><p>콘텐츠 보안 정책 설정 및 구성을 통해 의도하지 않은 내용이 페이지에 삽입되는 것을 방지.</p><p>Content-Security-Policy 헤더를 설정해서 XSS나 교차사이트 인젝션등을 방지함.</p><p>다만, 다른 사이트의 script를 불러오는 것도 막는 경우가 있어서 별도설정이 필요함.</p><p>초보자는 앞서 설명한 바와 같이 비활성화하고 개발공부 함을 추천함.</p><p><br></p><p>CSP를 사용하면 웹사이트의 HTTP 응답에 CSP 헤더가 추가된다.</p><p>CSP 헤더가 존재할 경우, 브라우저는 CSP 헤더에 언급되지 않은 리소스들을 다음과 같이 로드하지 않는다.</p><p><strong><em>helmet의 CSP 기본설정은 \'self\'.</em></strong> 즉, 자신의 웹사이트에 존재하는 리소스들만을 허용한다. </p><p><br></p><p><strong>CDN 등의 외부사이트 소스, 다른 웹사이트에서 이미지를 로드하는 경우, 심지어 인라인 자바스크립트 코드</strong></p><p>모두 아래와 같이 에러를 발생시킨다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664533997/myportfolioblogproject/w3jnzrbzdybtopwsx4cf.gif" crossorigin="anonymous"></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> cspOptions = {\n&nbsp; <span class="hljs-attr">directives</span>: {\n&nbsp; &nbsp; <span class="hljs-comment">// 헬멧 기본 옵션 가져오기</span>\n&nbsp; &nbsp; ...helmet.<span class="hljs-property">contentSecurityPolicy</span>.<span class="hljs-title function_">getDefaultDirectives</span>(), <span class="hljs-comment">// 기본 헬멧 설정 객체를 리턴하는 함수를 받아 전개 연산자로 삽입</span>\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; <span class="hljs-comment">/*&nbsp;\n&nbsp; &nbsp; none : 어떳 것도 허용하지 않음\n\tself : 현재 출처에서는 허용하지만 하위 도메인에서는 허용되지 않음\n\tunsafe-inline : 인라인 자바스크립트, 인라인 스타일을 허용\n\tunsafe-eval\t: eval과 같은 텍스트 자바스크립트 메커니즘을 허용&nbsp;\n&nbsp; &nbsp; */</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 구글 API 도메인과 인라인 스크립트, eval 스크립트를 허용</span>\n&nbsp; &nbsp; <span class="hljs-string">"script-src"</span>: [<span class="hljs-string">"\'self\'"</span>, <span class="hljs-string">"*.googleapis.com"</span>, <span class="hljs-string">"\'unsafe-inline\'"</span>, <span class="hljs-string">"\'unsafe-eval\'"</span>],\n&nbsp;\n&nbsp; &nbsp; <span class="hljs-comment">// 다음과 카카오에서 이미지 소스를 허용</span>\n&nbsp; &nbsp; <span class="hljs-string">\'img-src\'</span>: [<span class="hljs-string">"\'self\'"</span>, <span class="hljs-string">\'data:\'</span>, <span class="hljs-string">\'*.daumcdn.net\'</span>, <span class="hljs-string">\'*.kakaocdn.net\'</span>],\n&nbsp; &nbsp;&nbsp;\n&nbsp; &nbsp; <span class="hljs-comment">// 소스에 https와 http 허용</span>\n&nbsp; &nbsp; <span class="hljs-string">"base-uri"</span> : [<span class="hljs-string">"/"</span>, <span class="hljs-string">"http:"</span>],\n&nbsp; }\n}\n&nbsp;\n<span class="hljs-comment">// Helmet의 모든 기능 사용. (contentSecurityPolicy에는 custom option 적용)</span>\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>({\n&nbsp; <span class="hljs-attr">contentSecurityPolicy</span>: cspOptions,\n}));\n</pre><p><br></p><p>아래 CSP 세부사항 확인하기</p><p><br></p><p><a href="https://hangem-study.readthedocs.io/en/latest/nodeJS/helmet/#content-security-policy" rel="noopener noreferrer" target="_blank"><strong>https://hangem-study.readthedocs.io/en/latest/nodeJS/helmet/#content-security-policy</strong></a></p><p><br></p><p><br></p><h3>2. app.use(helmet.crossOriginEmbedderPolicy());</h3><p><br></p><p>COEP 헤더는 CORS 프로토콜, Cross-Origin-Resource-Policy 헤더 설정을 통해서 승인 받지 않은</p><p>페이지의 리소스 로딩을 금지함. <strong><em>helmet default 값으로, require-corp로 설정함.</em></strong></p><p><br></p><p><strong><em>unsafe-none</em></strong> : <em>기본값임(helmet 기본값 아님!!). 브라우저 페이지가 교차출처 (cross-origin resources) 리소스 활용을 </em></p><p><em> CORS 프로토콜, Cross-Origin-Resource-Policy 헤더 고려 없이 리소스 허용.</em></p><p><br></p><p><strong><em>require-corp</em></strong> : <em>무조건 SOP(Same-Origin-Policy) 정책에 따라 동일 출처에서만 리소스 활용 허용.</em></p><p><em> 교차출처는 CORS 프로토콜, Cross-Origin-Resource-Policy 헤더 설정을 통해서 활용 허용.</em></p><p><br></p><p><a href="https://www.lsevina126.asia/post/623ebd5b25066ac1eb074c84" rel="noopener noreferrer" target="_blank">https://www.lsevina126.asia/post/623ebd5b25066ac1eb074c84</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy" rel="noopener noreferrer" target="_blank">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy</a></p><p><br></p><p>참고할 것!!</p><p><br></p><p>이렇게 위의 포스트처럼 cors 출처 origin 설정을 하고,</p><p>helmet의 COEP 설정을 활성화 하고,</p><p>브라우저에서 교차출처 이미지를 넣는다고 가정하면,</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://third-party.example.com/image.jpg"</span> <span class="hljs-attr">crossorigin</span>&gt;</span>\n</pre><p><br></p><p>이미지 태그에 위와 같이 \'crossorigin\' 을 추가해주면,</p><p>교차출처 이미지 로드가 활용이 가능하다.</p><p><br></p><p><br></p><h3>3. app.use(helmet.crossOriginOpenerPolicy());</h3><p><br></p><p>COOP 설정 헤더를 사용하면 최상위 창이 다른 최상위 창과 직접 상호작용할 수 없도록,</p><p>다른 문서를 다른 탐색 컨텍스트 그룹( Browsing Context Group )에 배치하여 다른 문서와 격리되도록 할 수 있음.</p><p><br></p><p>만약 \'app.use(helmet.crossOriginOpenerPolicy());\' 그냥 쓰게된다면,</p><p><strong><em>helmet은 default 값으로 \'same-origin\' 으로 설정</em></strong>을 하게됨.</p><p><br></p><p>예를 들면, COOP가 있는 문서에서 팝업이 열리면 해당 window.opener 속성은 null 임.</p><p>또한, 오프너 참조 .closed 속성이 true를 반환합니다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664509954/myportfolioblogproject/czuupp5i96jnedzk2mkd.gif" crossorigin="anonymous"></p><p><br></p><p>helmet 기존 default 값인 same-origin을 아래와 같이 설정을 하게 된다면,</p><p><br></p><pre class="ql-syntax" spellcheck="false">Cross-Origin-Opener-Policy: same-origin\n</pre><p><br></p><p>same-origin 으로 표시된 문서는 동일한 탐색 컨텍스트 그룹에서</p><p>명시적으로 same-origin으로 표시된 동일 출처 문서와는 공유할 수 있음.</p><p>아래 사진과 같이...</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664509967/myportfolioblogproject/o3wkb9lxmcqyrku6vwun.gif" crossorigin="anonymous"></p><p><br></p><p>만약 아래와 같이 COOP 설정 헤더를 하게 된다면,</p><p><br></p><pre class="ql-syntax" spellcheck="false">Cross-Origin-Opener-Policy: same-origin-allow-popups\n</pre><p><br></p><p>same-origin-allow-popups 가 있는 최상위 문서는 COOP를 설정하지 않았거나,</p><p>COOP를 unsafe-none으로 설정한 문서에 한해서 동일한 탐색 컨텍스트 그룹에서 공유할 수 있게끔함.</p><p>너무 철저하게 same-origin 원칙을 지키다 보니, 결제 API 와 같은 팝업창을 막는 문제가 발생하여,</p><p>후에 등장한 옵션임.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664509978/myportfolioblogproject/tukuh6ai85osxjdubjze.gif" crossorigin="anonymous"></p><p><br></p><p>만약 아래와 같이 기본값(helmet 기본값 아님!!) 설정하게 된다면,</p><p><br></p><pre class="ql-syntax" spellcheck="false">Cross-Origin-Opener-Policy: unsafe-none\n</pre><p><br></p><p>unsafe-none가 기본값이며 다른 창과 same-origin인 경우가 아니면,</p><p>해당 창을 같은 탐색 컨텍스트 그룹에 추가하여 공유가능.</p><p><br></p><p><br></p><h3>4. app.use(helmet.crossOriginResourcePolicy());</h3><p><br></p><p>무차별적인 다른 출처간의 리소스 공유를 제한하기 위한 CORP 헤더임.</p><p><strong><em>helmet의 default 값은 same-origin</em></strong> 이며, default 값인 same-origin 상태에서,</p><p><br></p><p>NodeJS의 경우, cors 모듈을 통해서 어떤 교차출처에 대해서</p><p>리소스를 허용할지 설정해야함.</p><p>즉, cors 모듈은 브라우저 기본 정책인 same-origin, 동일출처 원칙하에</p><p>어떤 교차출처리소스들을 허용할지 정해주는 것임.</p><p><br></p><p>이렇게 설정하고 나서, 위에서 언급한, COEP, COOP 헤더 설정 해야함..</p><p><br></p><p><br></p><h3>5. app.use(helmet.dnsPrefetchControl());</h3><p><br></p><p>도메인이 미리 로딩되는 Prefetch에 대한 설정을 하기 위해 X-DNS-Prefetch-Control 헤더를 설정.</p><p><strong><em>helmet의 default 값은 off. 즉, 비활성화 상태이다.</em></strong></p><p><br></p><p>대부분 브라우저가 성능을 향상시키기 위해서 페이지 링크에 대한 DNS 정보를 미리 추출(prefetch) 한다.</p><p>즉, 사용자가 브라우저에서 어떠한 링크를 클릭을 할때 이미 해당 ip 주소는 알려져 있는 상태인 것임.</p><p><br></p><p>다만, 사용자가 많이 방문하는 큰 웹사이트인 경우 과도한 DNS 정보 추출로 인한 개인정보 보호 문제,</p><p>페이지 통계 관련 문제 (방문 하지도 않았는데 방문한 것으로 처리) 등으로 인해 이를 비활성화 할 수 있음.</p><p><br></p><p><br></p><h3>6. app.use(helmet.expectCt());</h3><p><br></p><p>Expect-CT 헤더를 설정하여  SSL 인증서 오발급 예방</p><p><br></p><p><br></p><h3>7. app.use(helmet.frameguard());</h3><p><br></p><p>X-Frame-Options 헤더를 설정하여 클릭재킹 공격 방지</p><p><strong><em>helmet의 default 값은 \'sameorigin\' 이다.</em></strong></p><p><br></p><p>클릭재킹이란 사용자가 자신이 클릭하고 있다고 인지하는 것과 다른 것을 클릭하도록 하여 속이는 해킹 기법이다.</p><p>속이기 위해 보이지 않는 레이어에 보이지 않는 버튼을 만드는 방법이 있다.</p><p><br></p><p>서버가 제공한 페이지에 서버의 허락없이 악의적인 페이지를 로드한 frame 혹은 iframe 태그를 넣을 수 있기 때문에,</p><p>악의적인 context에서 페이지에 클릭재킹을 실행할 수 있기 때문이다.</p><p><br></p><p>이러한 context에서, 해커는 서버가 최초에 제공한 페이지 위에다가 숨겨진 레이어를 넣을 수 있음.</p><p>그래서, 숨겨진 버튼을 사용하여 나쁜 스크립트를 실행할 수도 있는 것이다.</p><p><br></p><p><strong>X-Frame-Options: DENY</strong> : 누구도 이 페이지를 iframe에 넣지 못합니다.</p><p><strong>X-Frame-Options: SAMEORIGIN</strong> : 같은 출처를 제외한, 누구도 이 페이지를 iframe에 넣지 못합니다.</p><p><strong>X-Frame-options:  ALLOW-FROM http://example.com</strong> : 해당 사이트를 제외한 누구도 이 페이지를 iframe에 넣지 못합니다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> frameguard = <span class="hljs-built_in">require</span>(<span class="hljs-string">"frameguard"</span>);\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">frameguard</span>({ <span class="hljs-attr">action</span>: <span class="hljs-string">"deny"</span> }));\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">frameguard</span>({ <span class="hljs-attr">action</span>: <span class="hljs-string">"sameorigin"</span> }));\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">frameguard</span>()); <span class="hljs-comment">// defaults to sameorigin</span>\n\napp.<span class="hljs-title function_">use</span>(\n  <span class="hljs-title function_">frameguard</span>({\n    <span class="hljs-attr">action</span>: <span class="hljs-string">"allow-from"</span>,\n    <span class="hljs-attr">domain</span>: <span class="hljs-string">"http://example.com"</span>,\n  })\n);\n</pre><p><br></p><p><br></p><h3>8. app.use(helmet.hidePoweredBy());</h3><p><br></p><p>응답 헤더에 있는 X-Powered-By에 서버 소프트웨어가 표기되는데 이를 숨겨준다.</p><p>이 정보는 악의적으로 활용될 가능성이 높기 때문에 헬멧을 통해서 제거해 주는 것이 좋다.</p><p><br></p><pre class="ql-syntax" spellcheck="false">app.<span class="hljs-title function_">disable</span>(<span class="hljs-string">"x-powered-by"</span>);\n</pre><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> hidePoweredBy = <span class="hljs-built_in">require</span>(<span class="hljs-string">"hide-powered-by"</span>);\n\napp.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">hidePoweredBy</span>());\napp.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">hidePoweredBy</span>({ <span class="hljs-attr">setTo</span>: <span class="hljs-string">"PHP 4.2.0"</span> })); <span class="hljs-comment">// 가짜 정보를 X-Powered-By에 설정 ( 일명 낚시 )</span>\n</pre><p><br></p><p><br></p><h3>9. app.use(helmet.hsts());</h3><p><br></p><p>서버에 대한 안전한(SSL/TLS을 통한) HTTP 연결을 적용하는 Strict-Transport-Security 헤더를 설정.</p><p>브라우저에게 HTTPS만을 통해서 사이트에 액세스 할 수 있도록 요청 ( <strong><em>helmet default 설정은 당연히 false 임</em></strong> )</p><p><br></p><p>사용자가 특정 사이트에 접속할 때 해당 사이트가 HTTPS를 지원하는지, 하지 않는지를 미리 모르는 경우가 대부분.</p><p>그렇기에 브라우저는 디폴트로 HTTP로 먼저 접속을 시도한다.</p><p>이때 HTTPS로 지원되는 사이트였다면 301 Redirect나 302 Redirect를 응답하여 HTTPS로 다시 접속하도록 한다.</p><p><br></p><p>하지만 이때 해커가 중간자 공격을 하여, 중간에 프록시 서버를 두고, </p><p>[나] &lt;-&gt; [해커] 사이에서는 HTTP 통신을 하고 [해커] &lt;-&gt; [웹사이트] 사이에선 HTTPS 통신을 한다면,</p><p>개인정보가 HTTP 프로토콜을 통해 해커에게로 전해지는 참사가 일어난다.</p><p><br></p><p>이러한 공격을 SSL Stripping이라고 하며, 이런 공격을 방지하기 위해 HSTS를 설정한다.</p><p><br></p><pre class="ql-syntax" spellcheck="false">app.<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">hsts</span>({\n&nbsp; &nbsp; <span class="hljs-attr">maxAge</span>: <span class="hljs-number">90</span>*<span class="hljs-number">24</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>, <span class="hljs-comment">// 90일동안 https 사용하도록&nbsp;</span>\n&nbsp; &nbsp; <span class="hljs-attr">force</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 기본 설정을 무시</span>\n&nbsp; &nbsp; <span class="hljs-attr">includeSubDomains</span>: <span class="hljs-literal">true</span>,&nbsp;\n&nbsp; &nbsp; <span class="hljs-attr">preload</span>: <span class="hljs-literal">true</span>\n}));\n</pre><p><br></p><p>브라우저에게 지정된 시간 내에 향후 요청에 대해 HTTPS를 사용하도록 지시.</p><p>즉, 이것은 초기 요청 이후에 오는 요청에 적용되므로, 이후 요청에 대해서만 효과가 있다.</p><p><br></p><p><br></p><h3>10. app.use(helmet.isNoOpen());</h3><p><br></p><p>IE8 이상의 브라우저부터 X-Download-Options를 설정한다. </p><p>이 옵션은 8 버전 이상의 인터넷 익스플로러에서 다운로드 된것들을 바로 열지않고,</p><p>저장부터 하는 옵션임.  <strong><em>helmet default 설정은 당연이 noopen.</em></strong></p><p><br></p><p><br></p><h3>11. app.use(helmet.noSniff());</h3><p><br></p><p>X-Content-Type-Options 를 설정하여 선언된 콘텐츠 유형으로부터 벗어난 응답에 대한 브라우저의 MIME 스니핑을 방지.</p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">MIME이란 Multipurpose Internet Mail Extensions의 약자로 클라이언트에게 전송된 문서의 다양성을 알려주기 위한 포맷이다. </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">브라우저는 리소스를 내려받을 때 MIME 타입을 보고 동작하기에 정확한 설정이 중요하다.</span></p><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">MIME 스니핑이란 브라우저가 특정 파일을 읽을 때 파일의 실제 내용과 Content-Type에 설정된 내용이 다르면 파일로부터 형식을 추측하여 실행하는 것인데, </span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">편리함을 위한 기능이지만 공격자에게 악용될 가능성이 있다. </span><strong style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);"><em>helmet default 설정은 당연히 nosniff.</em></strong></p><p><br></p><p><br></p><h3>12. app.use(helmet.<span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">originAgentCluster</span>());</h3><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">Origin-Agent-Cluster 헤더를 설정하여 오리진간 문서를 별도 에이전트 클러스터로 분리</span></p><p><br></p><p><br></p><h3>13. app.use(helmet.<span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">permittedCrossDomainPolicies</span>());</h3><p><br></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">X-Permitted-Cross-Domain-Policies 헤더를 설정하여 크로스도메인 컨텐츠 정책을 설정.</span></p><p>헬멧의 crossdomain 디들웨어는 Adobe Flash와 Adove Acrobat이 콘텐츠를 사이트에 업로드 한는 것을 막습니다.</p><p>Adove Flash나 Adobe Acrobat에서 사이트가 다르더라도 당신의 도메인을 콘텐츠로 로드할 수 있습니다. </p><p>이것은 드문 경우로 예상치 못한 데이터 공개나 대역폭 사용의 원인이 될 수 있습니다.</p><p><span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">X-Permitted-Cross-Domain-Policies 헤더는 일부 클라이언트(대부분 Adobe 제품)에 도메인 간 콘텐츠 로드에 대한 도메인 정책을 처리한다.</span></p><p><strong style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);"><em>helmet default 설정은 당연히 none.</em></strong></p><p><br></p><p><br></p><h3>14. app.use(helmet.<span style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);">referrerPolicy</span>());</h3><p><br></p><p><span style="background-color: rgb(255, 255, 255);">참조&nbsp;referrer 헤더를 숨김</span></p><p><strong style="color: rgb(46, 52, 60); background-color: rgb(255, 255, 255);"><em>helmet default 설정은 당연히 no-referrer.</em></strong></p><p><br></p><p><br></p><h3>15. app.use(helmet.<span style="color: rgb(46, 52, 60); background-color: rgb(255, 255, 255);">xssFilter</span>());</h3><p><br></p><p><span style="background-color: rgb(255, 255, 255);">X-XSS-Protection 헤더를 0으로 설정하여&nbsp;XSS(Cross Site Scripting) 공격 스크립트를 비활성화여 예방</span></p><p><strong style="background-color: rgb(255, 255, 255); color: rgb(46, 52, 60);"><em>helmet default 설정은 당연히 0.</em></strong></p><p><br></p><p><br></p><p><br></p><p><strong>&lt;참고사이트&gt;</strong></p><p>https://hangem-study.readthedocs.io/en/latest/nodeJS/helmet/#frameguard</p><p>https://inpa.tistory.com/entry/NODE-%EB%B3%B4%EC%95%88-%F0%9F%93%9A-helmet-%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%9B%B9-%EB%B3%B4%EC%95%88%EC%9D%80-%EB%82%B4%EA%B0%80-%F0%9F%91%AE#helmet_%EC%82%AC%EC%9A%A9%EB%B2%95</p><p>https://llshl.tistory.com/39</p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-09-30T04:23:08.725Z',
    updatedAt: '2022-09-30T11:52:35.742Z',
    __v: 0,
  },
  {
    _id: '6338de2a7d98005032092e1a',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1664671269/myportfolioblogproject/ay8bye5vqknuwlojvxkb.gif',
    title: '면접 - 프론트엔드 (4) - Cross Browsing (크로스 브라우징)',
    text: '<h1>브라우저 엔진?</h1><p><br></p><p>웹 브라우저가 HTML, CSS 문서를 문자열 바이트 데이터로 받아 이를 DOM, CSSOM 등등..</p><p>브라우저가 이해할 수 있는 논리 문서 트리 구조로 변환시키고 ( 이를 <strong><em>parsing</em></strong> 이라고 표현을 함 ),</p><p>이를 화면 상으로 시각화하는 역할을 수행하는 것을 브라우저 엔진이라고 한다.</p><p><br></p><p>즉, 브라우저가 역할을 수행하는 핵심적인 부품인 셈이다.</p><p>앞선 포스트에서 브라우저 동작 원리 설명할 때 이미 상세하게 설명했음.</p><p>아래 포스트 참고 할 것!!</p><p><br></p><p><a href="https://www.lsevina126.asia/post/6327e20a7d98005032092b7d" rel="noopener noreferrer" target="_blank"><strong><em> https://www.lsevina126.asia/post/6327e20a7d98005032092b7d</em></strong></a></p><p><br></p><p>브라우저 엔진은 렌더링 엔진과 레이아웃 엔진으로 보통 구성되어 있음.</p><p>하지만 브라우저 종류에 따라 렌더링 엔진과 레이아웃 엔진이 하나의 엔진으로 관리 될 수도 있고,</p><p>각각 별도의 엔진으로 관리 되는 브라우저도 있음.</p><p><br></p><p>렌더링 엔진은 말 그래도 화면상에 DOM Tree, CSSOM Tree에 따라 그리는 역할을 수행.</p><p>레이아웃 엔진은 그려진 각 컴포넌트들의 위치를 개개인의 화면에 따라 조정해주는 역할을 수행.</p><p><br></p><p>그래서 브라우저 엔진이라고 하면 이 둘을 묶어서 의미하는 경우가 많음.</p><p><br></p><p><br></p><h1>브라우저 엔진의 종류</h1><h3><br></h3><h3>1. 게코( Gecko )</h3><p>모질라 재단에서 후원하며 오픈소스로 개발되는 엔진. 넷스케이프에서 갈라져 나왔음.</p><p>현재 모질라의 파이어폭스, 썬더버드 등이 사용 중임.</p><p><br></p><h3>2. 웹킷( Webkit )</h3><p>애플에서 개발한 오픈소스 엔진이다. 사파리와 크롬이 이 엔진을 쓰면서 한때는 시장을 지배했다.</p><p>하지만, 이후 애플은 웹킷2로 구글은 블링크로 갈라졌음.</p><p><br></p><p><strong><em>여담) 사용자가 접속한 브라우저 확인하는 방법 ( JavaScript 코드 2022년 10월 02일 기준 )</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isBrowserCheck</span>() {\n&nbsp; <span class="hljs-keyword">const</span> agt = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>();\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(agt);\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'edg\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Edge\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'whale\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Whale\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'chrome\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Chrome\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'opera\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Opera\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'staroffice\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Star Office\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'webtv\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'WebTV\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'beonex\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Beonex\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'chimera\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Chimera\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'netpositive\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'NetPositive\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'phoenix\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Phoenix\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'firefox\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Firefox\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'safari\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Safari\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'skipstone\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'SkipStone\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'netscape\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Netscape\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'mozilla/5.0\'</span>) != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">\'Mozilla\'</span>;\n&nbsp; <span class="hljs-keyword">if</span> (agt.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">\'msie\'</span>) != -<span class="hljs-number">1</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">let</span> rv = -<span class="hljs-number">1</span>;\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">appName</span> == <span class="hljs-string">\'Microsoft Internet Explorer\'</span>) {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">let</span> ua = navigator.<span class="hljs-property">userAgent</span>;\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">\'MSIE ([0-9]{1,}[.0-9]{0,})\'</span>);\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (re.<span class="hljs-title function_">exec</span>(ua) != <span class="hljs-literal">null</span>) rv = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>);\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">\'Internet Explorer \'</span> + rv;\n&nbsp; }\n}\n\n<span class="hljs-keyword">const</span> browser = <span class="hljs-title function_">isBrowserCheck</span>();\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(browser);\n</pre><p><br></p><p><br></p><h1>크로스 브라우징 (Cross Browsing)</h1><p><br></p><p>웹 페이지 제작 시에 모든 브라우저에서 깨지지 않고 의도한 대로 올바르게 나오게 하는 작업을 말함.</p><p>즉, 브라우저의 렌더링 엔진이 다른 경우에 인터넷이 이상 없이 구현되도록 하는 기술이다. </p><p>웹 사이트를 서로 비슷하게 만들어 어떤 환경 에서도 이상 없이 작동되게 하는데 그 목적이 있다. </p><p>즉, 어느 한쪽에 최적화되어 치우치지 않도록 공통 요소를 사용하여 웹 페이지를 제작하는 방법을 말한다.</p><p><br></p><p><br></p><h2>벤더 프리픽스 (Vendor Prefix)</h2><p><br></p><p>벤더 프리픽스는 브라우저마다 따로 놀던 CSS3의 속성을 각각의 브라우저들이 인식할 수 있게 해주기 위해 만들어짐.</p><p>CSS 표준안으로 확정되지 않았거나 특정 브라우저에서만 지원되는 CSS 속성을 사용하고싶을 때, </p><p>벤더 프리픽스를 사용하면 그 기능이 포함되어 있지 않은 브라우저에서도 사용할 수 있게 해준다.</p><p><br></p><p>어떤 CSS 기능이 어떤 브라우저에 적용가능한지 확인할 수 있는 사이트</p><p><a href="https://caniuse.com/?search=white-space" rel="noopener noreferrer" target="_blank"><strong>https://caniuse.com/?search=white-space</strong></a></p><p><br></p><p><span style="color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);">웹 브라우저 시장의 경쟁이 구글 크롬 중심으로 정리가 되고, 주요 웹 브라우저들이 최신 CSS 표준을 빠르게 지원하면서 벤더 프리픽스의 필요성이 점점 줄어들고있음.</span></p><p><span style="color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);">옛날 각 브라우저마다 따로 놀던 CSS 기능들을 크로스 브라우징 할때에는 벤더프리픽스가 중요했지만,</span></p><p><span style="color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);">지금은 구글 크롬 위주로 정리가 되고, 보통 많이 쓰이는 CSS 기능들은 통일이 되었기 때문에 많이 필요없지만,</span></p><p><span style="color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);">( 만약 구글 크롬 위주로 정리가 안되고 통일이 되지 않았다면 아래와 같이 프리픽스를 써주어야 하지만, 지금은 그럴 필요가 없음 )</span></p><p><span style="color: rgb(51, 51, 51); background-color: rgb(255, 255, 255);">하지만 CSS는 HTML과 달리 아직 웹 표준이 정해지지 않았고, 브라우저 마다 새로운 실험적인 CSS 기능을 테스트 해보고 싶을 때에 벤더 프리픽스가 필요함,</span></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1664680356/myportfolioblogproject/zsdoapns9mowtaejkkpz.gif"></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>\n&nbsp; &nbsp; .button&nbsp;{\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;background:&nbsp;red; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">&lt;!--&nbsp;gradient 속성을 지원하지 않는 모든 브라우저를 위한 코드&nbsp;--&gt;</span>\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;background:&nbsp;-webkit-linear-gradient(red,&nbsp;yellow);&nbsp;<span class="hljs-comment">&lt;!-- 크롬과&nbsp;사파리&nbsp;4.0 이상을 위한 코드&nbsp;--&gt;</span>\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;background:&nbsp;-moz-linear-gradient(red,&nbsp;yellow);&nbsp; &nbsp; <span class="hljs-comment">&lt;!-- 파이어폭스 3.6 이상을 위한 코드&nbsp;--&gt;</span>\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;background:&nbsp;-ms-linear-gradient(red,&nbsp;yellow); &nbsp; &nbsp;&nbsp;<span class="hljs-comment">&lt;!-- 익스플로러 10.0 이상을 위한 코드 --&gt;</span>\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;background:&nbsp;-o-linear-gradient(red,&nbsp;yellow);&nbsp; &nbsp; &nbsp; <span class="hljs-comment">&lt;!-- 오페라 10.0 이상을 위한 코드&nbsp;--&gt;</span>\n&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;background:&nbsp;linear-gradient(red,&nbsp;yellow); &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">&lt;!-- CSS 표준 문법&nbsp;코드&nbsp;--&gt;</span>\n&nbsp; &nbsp;&nbsp;}\n<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</pre><p><br></p><p>크롬과 사파리는 같은 웹킷 계열 브라우저이므로 같은 벤더 프리픽스를 사용함.</p><p><br></p><p>위의 예제에서 가장 먼저 나오는 background 속성은 gradient 속성을 지원하지 않는 모든 브라우저를 위한 것.</p><p>또한, 맨 마지막에 나오는 background 속성은 CSS 표준 문법으로 작성된 코드임.</p><p>CSS 표준 문법 코드는 벤더 프리픽스 (vendor prefix)로 작성된 코드가 모두 나오고 난 후에 나와야만,</p><p>벤더 프리픽스가 포함된 코드가 정상적으로 동작 할 수 있음.</p><p><br></p><p>벤더 프리픽스 자동 완성 사이트</p><p><a href="https://autoprefixer.github.io/" rel="noopener noreferrer" target="_blank"><strong>https://autoprefixer.github.io/</strong></a></p><p>그 외</p><p><a href="https://projects.verou.me/prefixfree/" rel="noopener noreferrer" target="_blank"><strong>https://projects.verou.me/prefixfree/</strong></a></p><p><br></p><h2>Reset CSS 와 Normalize CSS</h2><p><br></p><p>하지만, 웹 브라우저마다 각 HTML 태그 default CSS 스타일이 다르게 지정되어 있는 경우가 있음.</p><p>이 상태에서 웹 페이지 개발을 하면, 어느 한쪽 브라우저에서만 최적화가 되는 결과가 일어남.</p><p><br></p><h3><em>Reset CSS</em></h3><p><a href="https://meyerweb.com/eric/tools/css/reset/index.html" rel="noopener noreferrer" target="_blank"><strong>https://meyerweb.com/eric/tools/css/reset/index.html</strong></a></p><p><br></p><h3><strong><em>Normalize CSS ( 권장 )</em></strong></h3><p><a href="https://cdnjs.com/libraries/normalize" rel="noopener noreferrer" target="_blank"><strong>https://cdnjs.com/libraries/normalize</strong></a></p><p><br></p><p>Normalize CSS는 브라우저( 모바일 브라우저 포함 ) 광범위하게 지원하며, </p><p>다른 CSS Reset과 달리 사용하기 좋은 기본 값들을 유지함.</p><p><br></p><p>CDN 기법으로 &lt;head&gt; 태그 안에 간단하게 아래와 같이 적용가능. </p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Normalize CSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span> <span class="hljs-attr">defer</span>&gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Normalize CSS 적용 --&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">href</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css"</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">integrity</span>=<span class="hljs-string">"sha512-NhSC1YmyruXifcj/KFRWoC561YpHpc5Jtzgvbuzx5VozKpWvQ+4nXhPdFgmx8xqexRcpAglTj9sIBWINXa8x5w=="</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">"anonymous"</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">referrerpolicy</span>=<span class="hljs-string">"no-referrer"</span>\n&nbsp; &nbsp; /&gt;</span>\n    <span class="hljs-comment">&lt;!-- Normalize CSS 적용 --&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</pre><p><br></p><p><br></p><h2>어떤 브라우저에 초첨을??</h2><p><br></p><p>당연히 점유률이 가장 놓은 브라우저부터 맞추는 것이 맞음.</p><p>의뢰를 받은 고객의 브라우저 및 해당 지역 브라우저 시장 지배율 환경에 맞춰서 개발.</p><p>하지만 최근엔 구글 크롬이 거의 브라우저 시장을 지배하고 있음.</p><p><br></p><p><strong><em>세계 브라우저 점유률</em></strong></p><p><a href="https://gs.statcounter.com/" rel="noopener noreferrer" target="_blank"><strong>https://gs.statcounter.com/</strong></a></p><p><br></p><p><strong><em>한국 브라우저 점유률</em></strong></p><p><a href="https://gs.statcounter.com/browser-market-share/desktop/south-korea/#monthly-201805-201903" rel="noopener noreferrer" target="_blank"><strong>https://gs.statcounter.com/browser-market-share/desktop/south-korea/#monthly-201805-201903</strong></a></p><p>( 인터넷 익스플로서 후신 Edge 사용하는 것은 어느정도 이해 되는데... 익스플로러 아직까지 사용하고 있는 곳은 도대체 어디일까?? ㅋㅋㅋㅋ )</p><p>( 2022년 10월 2일 기준 ㅋㅋㅋㅋ )</p><p><br></p><p><br></p><p><br></p><p><strong>&lt;참고 출처&gt;</strong></p><p>https://codechasseur.tistory.com/105#:~:text=%EC%97%AC%EA%B8%B0%EC%84%9C%2C%20Reset%20CSS%2C%20Normalize%20CSS,%EB%A5%BC%20%EC%97%86%EC%95%A0%EB%8A%94%20%EB%8D%B0%20%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4.</p><p>https://intrepidgeeks.com/tutorial/what-is-vendor-fix</p><p>https://blogpack.tistory.com/771</p><p>http://www.tcpschool.com/css/css3_module_vendorPrefix</p><p>https://sgcomputer.tistory.com/169</p><p>https://okayoon.tistory.com/entry/%ED%81%AC%EB%A1%9C%EC%8A%A4-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95cross-browsing</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-02T00:41:14.459Z',
    updatedAt: '2022-10-02T04:06:35.528Z',
    __v: 0,
  },
  {
    _id: '633adbc57d98005032092f82',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1664795228/myportfolioblogproject/grrkdg6to97amd9cxo1n.gif',
    title: '면접 - JavaScript (1) - Event Loop',
    text: '<h1>문제 1.</h1><p>아래의 코드는 콘솔창에 어떤 순서로 어떻게 찍힐까?</p><p>이것에 대한 해답을 100% 잘 설명할 줄 아는 사람은 자바스크립트 동작 원리에 대해서 깊이 이해하고 있는 사람일 것이다.</p><p><br></p><h3><a href="https://www.lsevina126.asia/post/623aa660e30b40a8d7ff1f26" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/623aa660e30b40a8d7ff1f26</em></strong></a></h3><h3><a href="https://www.lsevina126.asia/post/623dc058738dcca69b6d60b3" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/623dc058738dcca69b6d60b3</em></strong></a></h3><p><br></p><p>앞선 포스트에서 설명한 자바스크립트 동작 원리 및 환경을 읽고,</p><p>해당 포스트의 자바스크립트 동작 원리 gif 그림을 참고하면서 문제를 이해해볼 것!!</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Start!\'</span>);\n\n<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Timeout!\'</span>);  \n}, <span class="hljs-number">0</span>);\n\n<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">\'Promise!\'</span>)\n   .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res));\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'End!\'</span>);\n</pre><p><br></p><h2>해답</h2><p>먼저 해답은 아래와 같음.</p><p><br></p><p>1. 먼저 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">console.log(\'Start!\') </strong>이 콜스택으로 바로 호출이 되고 실행.</p><p><em> (실행완료뒤 콜스택에서 </em><strong><em>pop()</em></strong><em> 없어짐).</em></p><p>2. 그 다음 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">setTimeout()</strong> 함수가 콜스택으로 호출이 되고, 실행이 되는 것이 아닌 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">WebApi</strong> 에게 setTimeout() 작업을 요청하게 됨</p><p>(이 때 setTimeout 안에 존재하는<strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> console.log(\'Timeout!\') 콜백함수</strong>도 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">WebApi</strong>에게 전달)</p><p>3. 그리고 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">Promise.resolve() </strong>비동기 함수가 콜스택에 호출이 되고 마찬가지로 실행되는 것이 아닌 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">WebApi</strong>에게 비동기 작업 요청함. 물론 비동기 함수,콜백함수도 같이 전달.</p><p>(이 때 WebApi에서 setTimeout 작업이 끝나게 된다면 setTimeout 콜백함수인 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'Timeout!\')</strong><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> </span>은 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">매크로 태스크 큐(Macrotask Queue)</strong>로 전달함)</p><p>4. <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'End!\')</strong>가 콜스택으로 호출이 되고, 실행되어짐.</p><p>(이 때 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">WebApi</strong>에서 비동기 작업이 끝나면, 그 안의 콜백함수 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">res =&gt; console.log(res)</strong>를 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">마이크로 태스크 큐(Microtask Queue)</strong>로 전달함)</p><p>5. 이 때 주의할 점은 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>콜스택은 매크로 태스크 큐 보다 마이크로 태스크 큐의 작업을 우선시함.</em></strong></p><p>(왜냐하면 비동기 작업의 콜백함수를 저장하는 곳이 마이크로 태스크 큐 그럼으로 마이크로 태스크 큐안의 콜백함수를 콜스택은 우선 호출한다.)</p><p>6. <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">마이크로 태스크 큐</strong> 안에 저장되어 있던 비동기 함수 콜백함수인 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">res =&gt; console.log(res)</strong>를 먼저 실행함.</p><p>7. 그 후, <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">매크로 태스크 큐</strong> 안에 저장되어 있던 setTimoue 작업의 결과물인 콜백함수 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'Timeout!\')</strong>을 실행함.</p><p><br></p><p>이런 과정을 통해서 아래와 같이 콘솔이 출력되어짐.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-title class_">Start</span>!\n<span class="hljs-title class_">End</span>!\n<span class="hljs-title class_">Promise</span>!\n<span class="hljs-title class_">Timeout</span>!\n</pre><p><br></p><p><br></p><h1>문제 2.</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">one</span> = () =&gt; <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">\'One!\'</span>);\n\n<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>() {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'In function!\'</span>);\n  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">one</span>();\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);\n};\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Before function!\'</span>);\n<span class="hljs-title function_">myFunc</span>();\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'After function!\'</span>);\n</pre><p><br></p><h2>해답</h2><p>위에서 설명한 바와 같이 똑같이 생각을 해보면 될 것이다.</p><p><br></p><p>1. 먼저 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'Before function!\')</strong> 이 콜스택에 호출되고 실행되어진다.</p><p>2. 그리고 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">myFunc()</strong> 이 콜스택에 호출이 되어지고, 그 다음 그 안에 있던 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'In function!\')</strong> 실행되어 지고, 비동기 함수인<strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> const res = await one()</strong>이 호출된다.</p><p>3. 콜스택은 이 비동기함수를 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">WebApi에게 비동기 함수 작업 요청</strong>을 하게됨. 물론 비동기 함수, 그 안의 콜백함수도 같이 전달함.</p><p>(이 때, 실행이 끝나지 않은 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">myFunc()</strong> 의 경우 콜스택 제일 하단에서 대기, 문법이 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>await</em></strong>인 이유임).</p><p>4. WebApi에게 비동기함수 작업 요청을 하고, 그 다음 바로 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'After function!\') </strong>을 콜스택에 호출, 실행하게됨.</p><p>5. 그리고 WebApi에서 비동기 작업이 끝난 다음 해당 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">비동기 함수 콜백을 마이크로 태스크 큐로 이동</strong>시키고, 해당 콜백함수, <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(res)를 마지막으로 콜스택에서 호출 실행</strong>한다.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-title class_">Before</span> <span class="hljs-keyword">function</span>!\n<span class="hljs-title class_">In</span> <span class="hljs-keyword">function</span>!\n<span class="hljs-title class_">After</span> <span class="hljs-keyword">function</span>!\n<span class="hljs-title class_">One</span>!\n</pre><p><br></p><p><br></p><h1>문제 3.</h1><p>그렇다면 <strong style="color: rgb(255, 255, 255); background-color: rgb(107, 36, 178);"><em>console.log(\'In function!\');</em></strong><span style="color: rgb(255, 255, 255); background-color: rgb(107, 36, 178);"> </span>부분을 <strong style="color: rgb(255, 255, 255); background-color: rgb(107, 36, 178);"><em>myFunc() 제일 하단</em></strong>에 위치 시키면 순서가 달라질까?</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">one</span> = () =&gt; <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">\'One!\'</span>);\n\n<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>() {\n  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">one</span>();\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'In function!\'</span>);\n};\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Before function!\'</span>);\n<span class="hljs-title function_">myFunc</span>();\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'After function!\'</span>);\n</pre><p><br></p><h2>해답</h2><p>지금까지 생각해왔던 것을 토대로 다시 답을 맞춰보자.</p><p><br></p><p>1. 먼저 콜스택에서 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'Before function!\');</strong> 호출 실행한다.</p><p>(물론 콜스택은 하나의 함수만 불러오고, 실행완료 뒤 pop 사라지게 해야함. 하나의 함수가 완료 뒤 다른 하나를 불러오게 되어 있음.)</p><p>2. 그리고<span style="color: rgb(255, 255, 0);"> </span><strong style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">myFunc()</strong>을 콜스택에서 호출하고 실행.</p><p>3. <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">const res = await one() 비동기 함수를 WebApi에게 작업요청(함수 및 콜백함수 전달)을 함.</strong></p><p>4. 완료되지 않은 <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">myFunc() 함수는 콜스택 제일 하단에서 대기</span><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> ( </span><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">await </strong><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">)</span></p><p>(원래 콜스택은 하나의 함수만 불러오고 처리하는 원칙이지만 비동기 함수는 예외)</p><p>5. 그 다음 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'After function!\')</strong>은 이 콜스택에서 myFunc() 함수 <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">상단에 호출되고 먼저 실행되어짐</span>.</p><p>6. WebApi에서 <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">비동기 작업이 끝나고 해당 콜백함수가 마이크로태스크큐 안에 들어오면</span>, 그때 콜스택은 해당 콜백함수를 불러와<strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> console.log(res)</strong>를 실행시킴.</p><p>7. 그 다음, <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log(\'In function!\');</strong> 을 실행하고<span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"> myFunc() 함수를 실행 종료</span>시키고 끝남.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-title class_">Before</span> <span class="hljs-keyword">function</span>!\n<span class="hljs-title class_">After</span> <span class="hljs-keyword">function</span>!\n<span class="hljs-title class_">One</span>!\n<span class="hljs-title class_">In</span> <span class="hljs-keyword">function</span>!\n</pre><p><br></p><p><br></p><h1>문제 4.</h1><p>이제는 자바스크립트 엔진이 아닌 브라우저 엔진 (rendering engine, layout engine)이 신경써야할 requestAnimationFrame(() =&gt; {}) 까지 들어가게 되면,</p><p>그리고 then()이 저렇게 이어져 있으면... 어떤 순서로 콘솔로그에 찍히게 될까?</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'script start\'</span>);\n\n<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>() {\n   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"setTimeout"</span>);\n}, <span class="hljs-number">0</span>);\n\n<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"promise1"</span>);\n}).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"promise2"</span>);\n});\n\n<span class="hljs-title function_">requestAnimationFrame</span>(<span class="hljs-keyword">function</span>() {\n  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"requestAnimationFrame"</span>);\n});\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">"script end"</span>);\n</pre><p><br></p><h2>해답</h2><p>탐구해보자.</p><p><br></p><p>1. 먼저 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log("script start");</strong> 가 콜스택에 호출되고 실행되어짐.</p><p>2. 그 뒤, <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">setTimeout 함수</strong>가 호출되고 실행되어지며, <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">WebApi에게 함수 작업요청 전달 및 콜백함수를 전달</strong>하게 됨.</p><p>3. <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">Promise.resolve()</strong> 비동기 함수가 콜스택에 호출, WebApi에게 <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">Promise.resolve() 비동기 함수 작업요청, 함수 전달 및 콜백함수도 WebApi에게 전달</span>.</p><p>(이 때<span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"> setTimeout이 WebApi에서 완료</span>되면 해당 콜백함수<span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"> console.log("setTimeout")은 매크로 태스크 큐에 전달 및 저장</span>)</p><p>4. 그리고 나서, <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">requestAnimationFrame 함수를 콜스택에 호출 및 실행. 마찬가지로 WebApi에게 함수 작업 요청 및 전달, 해당 콜백함수도 전달.</span></p><p>(이 때 <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">Promise 비동기 함수 작업이 끝나면, 해당 콜백함수인 console.log("promise1")을 마이크로 태스크 큐</span>에 전달 및 저장)</p><p>5. 그리고 마지막 줄에 있는<strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> console.log("script end")</strong>를 호출 및 실행.</p><p>(이 때 <span style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);">requestAnimationFrame 콜백함수를 브라우저 엔진 render engine 및 layout engine이 관리하는 Render Animation Tree Queue</span>에 저장 )</p><p>6. 큐에서 가장 우선적으로 실행되어지는 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">비동기함수 콜백이 저장된 마이크로 태스크 큐</strong>에 있는 콜백함수 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log("promise1");</strong> 호출 및 실행.</p><p>7. 마이크로 태스크 큐가 가장 우선적으로 실행됨. 게다가 뒤에 따라오는 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">console.log("promise2"); </strong>가 뒤이어 실행됨.</p><p>8. 그 다음 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">Render Animation Tree Queue 에 저장된 콜백이 우선적으로 호출되고 실행</strong>됨.</p><p>9. 마지막으로 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">매크로 태스크 큐안에 저장되어 있던 setTimeout 콜백이 실행되어지고 종료 </strong>되어짐.</p><p><br></p><p>결국 위와 같이 실행되어 실행 순서는 아래와 같아짐</p><p><br></p><pre class="ql-syntax" spellcheck="false">script start\nscript end\npromise1\npromise2\nrequestAnimationFrame\n<span class="hljs-built_in">setTimeout</span> \n</pre><p><br></p><p><br></p><p><br></p><p><strong>&lt;참고 출처&gt;</strong></p><p>https://sculove.github.io/post/javascriptflow/</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-03T12:55:33.230Z',
    updatedAt: '2022-10-03T12:56:31.167Z',
    __v: 0,
  },
  {
    _id: '6340fa2c7d98005032092fdf',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665198501/myportfolioblogproject/zxumhg2biyk69odgbz9a.gif',
    title: 'MongoDB Aggregation Framework (1)',
    text: '<h1>MongoDB Aggregation Framework 란?</h1><p><br></p><p><br></p><p>Aggregation 이라는 영어 의미 그대로 총합, 종합. 즉, 한 테이블에 있는 데이터를 가공하여,</p><p>필요한 데이터만 뽑고, 필요 시 이를 연산해주는 역할을 해주는 것이 <strong><em>Aggregation Framework</em></strong> 인 것이다.</p><p><br></p><p>MonoDB의 find() 메서드만으로는 필요한 데이터를 뽑고, 가공하는 것이 어려움.</p><p>MySQL 처럼 Query 문을 자유 자재로 조합하여 필요한 데이터만 뽑을 수 있게 만든 것이 <strong><em>Aggregation Framework </em></strong>라고 생각하면 된다.</p><p><br></p><p>대용량 데이터를 가공하고 필요한 것만 추출하여 연산하고 가공하는 것.</p><p>MySQL 처럼 Query문을 조작하여 필요한 데이터만 추출하고 연산, 가공하는 것인 만큼,</p><p>MySQL Query 문법과 비교하면서 MongoDB Aggregation 을 연구 공부하면 이해가 쉬움.</p><p><br></p><p>먼저 아래의 비교표를 살펴보자.</p><p>대충 MySQL 쿼리문과 비교하면 아래와 같다고 할 수 있으며,</p><p>아래의 MongoDB Aggregation 문법을 먼저 이해하고 다른 데이터 가공 문법을 이해하면 편하게 공부를 할 수 있을 것이다.</p><p><br></p><h3><a href="https://www.lsevina126.asia/post/62dbf746dae85b0fd5ac861f" rel="noopener noreferrer" target="_blank"><strong>https://www.lsevina126.asia/post/62dbf746dae85b0fd5ac861f</strong></a></h3><p><br></p><p>이미 MySQL 쿼리 문법에 대해서 상세히 설명한 바 있음.</p><p>이 글을 보고 MySQL 쿼리 문법에 대해서 이해를 하면서, 이것을 공부해볼것!!</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665199423/myportfolioblogproject/g7kfc3v6d6fhn5dsvdxj.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><h1>첫 번째 예시.</h1><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>첫째,</em></strong> 아래의 예시 코드는 지금까지 이루어졌던 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>쇼핑몰 주문 내역</em></strong>을 뽑아 본 것이다.</p><p>이 데이터를 토대로 Aggregation 문법을 공부해보자.</p><p><br></p><p><br></p><h3><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665199784/myportfolioblogproject/uf1zl8bf4gcgkz1tyxun.gif" crossorigin="anonymous"></h3><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>둘째,</em></strong> 나는 이 많은 주문 내역 중에서 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>상품번호( productId ) - 62c27941c0fb46e52421d319</em></strong><span style="background-color: rgb(255, 255, 255); color: rgb(33, 33, 33);"> 를 가지고 있는 상품 주문 내역만 뽑고 싶다.</span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(33, 33, 33);">Aggregation 문법 어떻게 만들어야 할까?</span></p><p><span style="background-color: rgb(255, 255, 255); color: rgb(33, 33, 33);">아래의 코드를 보자!! </span></p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p>제일 상단의 MySQL 비교 문법에서 $match는 where, having 과 같은 조건문과 비슷한 역할을 수행한다고 생각하면 됨.</p><p>$elemMatch는 객체 안의 데이터 값 중에 원하는 값에 해당하는 데이터를 필터링을 수행하는 데에 쓰임.</p><p>이런 세부적인 가공 문법은 MongoDB 공식 문서 Aggregation 문법 파트에서 확인이 가능함.</p><p>공식 문서 보면서 공부를 하자.</p><p><br></p><p>저렇게 작성하면 결과는 어떻게 나올까?</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665200814/myportfolioblogproject/rfej3vasx2aoelt9x2sq.gif" crossorigin="anonymous"></p><p><br></p><p>상품번호( productId ) - <span style="color: rgb(33, 33, 33); background-color: rgb(255, 255, 255);">62c27941c0fb46e52421d319 를 가지고 있는 상품 주문 내역만 위와 같이 뽑힌 것을 알수 있음.</span></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>셋째,</em></strong> 그리고 이 상태에서 나는<strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em> 주문내역이 생성된 날짜( createdAt )</em></strong>의 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>달</em></strong> 데이터와 그 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>상품의 가격( amount )</em></strong>만</p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>새로운 항목( 제목은 각각 month와 sales )</em></strong>을 만들어서 가지고 오고 싶다면?</p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">month</span>: { <span class="hljs-attr">$month</span>: <span class="hljs-string">\'$createdAt\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$amount\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>$project</em></strong>는 MySQL 문법과 굳이 비교하자면 Select 라지만, 좀 억지 같고,</p><p>위에서 뽑아낸 데이터에서 또다시 필요한 데이터만 연산 추출하고,</p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>위와 같이 새로운 항목으로 정의</em></strong>하여 데이터를 넣을 수 있음.</p><p><br></p><p>위의 경우 month라는 새로운 항목을 정의하고 그 안에 데이터 createdAt에서 월 데이터만 뽑은 숫자만 넣음. ( $month 연산, docs에서 확인!! )</p><p>그리고 sales라는 새로운 항목으로 가격을 정의하여 데이터의 amount ( 가격 ) 값을 넣음.</p><p><br></p><p>이렇게 하면 아래와 같이 나오는 것을 확인할 수 있음.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665201375/myportfolioblogproject/mihe8w7p3n73raqm8n4i.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>넷째,</em></strong><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 0);"> </span><span style="color: rgb(0, 0, 0);">여기서 또</span><span style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 0);"> </span><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>_id 값에 "total sales" 라는 제목</em></strong><span style="color: rgb(0, 0, 0);">을 넣고, </span><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>새로운 total 항목</em></strong><span style="color: rgb(0, 0, 0);">에 </span><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>전체 상품 가격을 합한 값</em></strong><span style="color: rgb(0, 0, 0);">을 집어 넣고 싶다면??</span></p><p><span style="color: rgb(0, 0, 0);">​</span></p><p><span style="color: rgb(0, 0, 0);">아래 코드와 같이</span><strong style="background-color: inherit; color: rgb(230, 0, 0);"><em> </em></strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>$group</em></strong><span style="color: rgb(0, 0, 0);">을 쓸 수 있음. 물론 $project를 써서 해볼 수도 있지만, $group을 써서 할 수도 있음.</span></p><p><span style="color: rgb(0, 0, 0);">​</span></p><p><span style="color: rgb(0, 0, 0);">$group은 MySQL의 Group By 쿼리 문법과 비슷한 기능을 수행함.</span></p><p><span style="color: rgb(0, 0, 0);">지정된 조건에 맞게 그룹핑을 한 후, 카운트나 합계, 평균 등의 계산을 처리할 수 있음.</span></p><p><span style="color: rgb(0, 0, 0);">( $project도 $group과 마찬가지로 연산을 수행할 수 있어서 아직까지는 큰 차이를 못느끼겠음 )</span></p><p><br></p><p><strong style="color: rgb(230, 0, 0);"><em>구별을 위해!!!</em></strong></p><p><span style="color: rgb(0, 0, 0);">( $project 는 기존 필드 네임을 삭제 혹은 새로운 필드 네임을 정의하여 다음 스테이지로 넘겨주는데에 사용!!)</span></p><p><span style="color: rgb(0, 0, 0);">( $group은 지정된 조건에 맞게 그룹핑을 한 후, 카운트나 합계, 평균 등의 계산을 처리하는데에 사용!)</span></p><p><span style="color: rgb(0, 0, 0);">​</span></p><p><span style="color: rgb(0, 0, 0);">모두 가지고 와서 아래 코드와 같이 $sum 등과 같은 연산문법을 사용할 수도 있음.</span></p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">month</span>: { <span class="hljs-attr">$month</span>: <span class="hljs-string">\'$createdAt\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$amount\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$group</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'total sales\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">total</span>: { <span class="hljs-attr">$sum</span>: <span class="hljs-string">\'$sales\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665575410/myportfolioblogproject/znfccklgmrwikojfbt84.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong>&lt;참고 출처&gt;</strong></p><p>https://www.fun-coding.org/mongodb_advanced1.html</p><p><br></p><p><br></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-10-08T04:18:52.376Z',
    updatedAt: '2022-10-12T11:51:51.795Z',
    __v: 0,
  },
  {
    _id: '634112017d98005032092ff5',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665207388/myportfolioblogproject/qtzv5bu3hod4d2u8ye1a.gif',
    title: 'MongoDB Aggregation Framework (2)',
    text: '<h3><a href="https://www.lsevina126.asia/post/6340fa2c7d98005032092fdf" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/6340fa2c7d98005032092fdf</em></strong></a></h3><p><br></p><p>MongoDB Aggregation Framework (1) 포스트에 이어서 작성...</p><p>앞선 포스트 참고하고 이 포스트 볼 것!!!</p><p><br></p><p><br></p><h1>두 번째 예시.</h1><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>첫째,</em></strong> 앞선 포스트 첫 번째 예시와 마찬가지로 아래 코드로 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>상품번호 : 62c27941c0fb46e52421d319</em></strong><span style="background-color: rgb(255, 255, 255); color: rgb(33, 33, 33);"> 의 주문내역만 뽑은 상태에서 시작해보자.</span></p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665207762/myportfolioblogproject/bjuw8hzbjyh5rbk4zduu.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>둘째</em></strong>,<strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em> $project </em></strong>연산자를 이용해서 이번에도 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>필드네임을 재정의</em></strong>하고 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>필요한 데이터를 아래와 같이 넣어주자</em></strong>.</p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">month</span>: { <span class="hljs-attr">$month</span>: <span class="hljs-string">\'$createdAt\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$amount\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-string">\'$products.quantity\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665207995/myportfolioblogproject/r2q5xf2e0t0eoopbkegx.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>셋째</em></strong>, quantity 배열 안에 있는 첫 번째 값만 빼오고 싶다.. 어떻게 할까?</p><p>아래 코드와 같이 해보자. ( <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>$arrayElemAt</em></strong> - docs 참고할 것!! ) </p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">month</span>: { <span class="hljs-attr">$month</span>: <span class="hljs-string">\'$createdAt\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$amount\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-string">\'$products.quantity\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'$month\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$sales\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: { <span class="hljs-attr">$arrayElemAt</span>: [<span class="hljs-string">\'$quantity\'</span>, <span class="hljs-number">0</span>] },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665208200/myportfolioblogproject/wuca47e9sx8zj0xj3mcv.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>넷째</em></strong>, 여기서 수량 ( quantity ) 과 가격 ( sales ) 을 곱해서, 총 매출을 다시 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>$project로 재정의</em></strong> 해보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">month</span>: { <span class="hljs-attr">$month</span>: <span class="hljs-string">\'$createdAt\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$amount\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-string">\'$products.quantity\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'$month\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$sales\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: { <span class="hljs-attr">$arrayElemAt</span>: [<span class="hljs-string">\'$quantity\'</span>, <span class="hljs-number">0</span>] },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'$_id\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: { <span class="hljs-attr">$multiply</span>: [<span class="hljs-string">\'$sales\'</span>, <span class="hljs-string">\'$quantity\'</span>] },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665208383/myportfolioblogproject/thsqwngxdi5wwkczhp1v.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>다섯째</em></strong>, 여기서 이제 sales 필드 속성 값만 뽑아와서 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>$group, $avg </em></strong>통해 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>주문 매출 평균 값</em></strong>을 구해보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false">router.<span class="hljs-title function_">get</span>(\n&nbsp; <span class="hljs-string">\'/income\'</span>,\n&nbsp; <span class="hljs-keyword">async</span> (<span class="hljs-attr">req</span>: <span class="hljs-title class_">Request</span>, <span class="hljs-attr">res</span>: <span class="hljs-title class_">Response</span>, <span class="hljs-attr">next</span>: <span class="hljs-title class_">NextFunction</span>) =&gt; {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> productId = req.<span class="hljs-property">query</span>.<span class="hljs-property">pid</span>;\n\n&nbsp; &nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">const</span> income = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Order</span>.<span class="hljs-title function_">aggregate</span>([\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;{\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$match</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">products</span>: { <span class="hljs-attr">$elemMatch</span>: { <span class="hljs-attr">productId</span>: productId } },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp;   },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">month</span>: { <span class="hljs-attr">$month</span>: <span class="hljs-string">\'$createdAt\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$amount\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: <span class="hljs-string">\'$products.quantity\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'$month\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: <span class="hljs-string">\'$sales\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">quantity</span>: { <span class="hljs-attr">$arrayElemAt</span>: [<span class="hljs-string">\'$quantity\'</span>, <span class="hljs-number">0</span>] },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$project</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'$_id\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">sales</span>: { <span class="hljs-attr">$multiply</span>: [<span class="hljs-string">\'$sales\'</span>, <span class="hljs-string">\'$quantity\'</span>] },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n        {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">$group</span>: {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">_id</span>: <span class="hljs-string">\'Total Sales Average Last Year\'</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">salesAvg</span>: { <span class="hljs-attr">$avg</span>: <span class="hljs-string">\'$sales\'</span> },\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; &nbsp; },\n&nbsp; &nbsp; &nbsp; ]);\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">json</span>(income);\n&nbsp; &nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; &nbsp; res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(error);\n&nbsp; &nbsp; }\n&nbsp; }\n);\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665208584/myportfolioblogproject/epp8ocjuy2qalr9lwm6f.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><em>일단 큰 틀에서만 MongoDB Aggregation Framework에 대해서 다루어 보았다.</em></p><p><em>일단 처음 공부를 관련해서 시작할 때, SQL 쿼리문 조작에 대해서 아는 상태라면,</em></p><p><em>SQL과 비교해서 </em><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>대략적으로 아래 Aggregation 명령문 위주로 큰틀을 먼저 공부</em></strong><em>하고,</em></p><p><em>세부적인 사항은 MongoDB docs 문서를 살펴보면서 적용하는게 좋을 것이다.</em></p><p> </p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665208670/myportfolioblogproject/mfhlmylaj8okp65x1vkh.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong>&lt;참고 출처&gt;</strong></p><p>https://www.fun-coding.org/mongodb_advanced1.html</p><p><br></p><p><br></p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-10-08T06:00:33.889Z',
    updatedAt: '2022-10-08T06:00:33.889Z',
    __v: 0,
  },
  {
    _id: '6343e05c7d98005032093052',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665390756/myportfolioblogproject/db6gugqttpgdbccdmlb0.gif',
    title: '면접 - JavaScript (2) - Hoisting',
    text: '<h1>Hoisting</h1><p><br></p><p>자바스크립트 인터프리터가 코드를 해석하고 실행 콘텍스트를 만들 때, 변수 및 함수를 선언 ( <strong><em>ex: var name;</em></strong> ), 할당 ( <strong><em>ex: var name = "Lee";</em></strong> ) 하는 부분 중</p><p>선언하는 부분을 제일 상단으로 끌어올려서 코드를 실행시키는 것을 말함.</p><p><br></p><p>이를 컴퓨터 구조적으로 분석을 해보자면, ES6 이전의 기존 자바스크립트 변수 선언 var 키워드와 함수 선언 function 키워드로 선언을 하게 되면,</p><p>자바스크립트 인터프리터는 선언하는 코드가 호출하는 코드 보다 뒷줄에 있다고 하더라도 해석할 땐 최상단으로 끌어올려와 선언을 먼저하고,</p><p><strong><em>메모리에 저장하고 해당 참조값을 가지게</em></strong> 해주는 것이다.</p><p><br></p><p>하지만 이는 편리하기도 한 기능이지만, 코드 작성 순서와 실제 코드 작동 순서에 혼동 때문에 개발자들을 혼란스럽게 하며,</p><p>ES6 등장 이전까지 예상치 못한 버그를 만나게 되는 주범이었다.</p><p><br></p><p>아래의 코드를 살펴보자.</p><p><br></p><p><br></p><h3> 1. 함수의 경우</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>));\n<span class="hljs-comment">// console 에 9 가 찍힘.</span>\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">x, y</span>) {\n  <span class="hljs-keyword">return</span> x + y;\n}\n</pre><p><br></p><p>sum 함수 선언이 뒷 줄에 되었음에도 불구하고, 자바스크립트 인터프리터는 해당 선언 코드를 먼저 실행하고 메모리에 저장하고 참조값 ( 주소값 ) 을 가진다. </p><p>함수 선언은 전체 함수에 대한 참조값과 함께 메모리에 저장이 됨으로 함수를 만든 이전에 호출이 가능함.</p><p><br></p><p>이러한 호이스팅을 막기 위해 ES6 부터는 Arrow Function ( 화살표 함수 ) 선언 방식이 등장하게 됨.</p><p><br></p><p><br></p><h3>2. 화살표 함수의 경우</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));\n<span class="hljs-comment">// Reference Error가 발생하게 됨!</span>\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">x, y</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">return</span> x + y;\n};\n</pre><p><br></p><p>이러한 호이스팅을 막기 위해 const, let 선언을 가장한 화살표 함수 선언 방식이 ES6 부터 등장함.</p><p>const, let, arrow function 선언이 var, function 선언과 다른 점은 선언하는 코드를 자바스크립트 인터프리터가 해석을 할 때,</p><p><strong>둘 다 똑같이 호이스팅. 즉, 선언하는 코드를 최상단에 먼저 실행</strong>시키지만, <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>var, function의 경우 메모리에 저장하고 참조값을 가지지만,</em></strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>const, let, arrow function 선언의 경우 실행 콘텍스트에 변수 객체만 등록하고, 메모리에 저장하지 않고 참조값을 가지지 않는다.  </em></strong></p><p><br></p><p>그렇기 때문에 위와 같이 Reference Error 참조값 에러가 발생하게 됨.</p><p>메모리에 저장되지 않았고, 참조값을 할당하지도 않았기 때문에....</p><p><br></p><p>아래 메모리 구조를 보면서 더 깊이 이해를 해보도록 하자...</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665391888/myportfolioblogproject/qprym7bgfr86rxmmp36v.gif" crossorigin="anonymous"><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665391906/myportfolioblogproject/w89p1va0bpen3dc5debi.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><h3><br></h3><h3><br></h3><h3>3. var 의 경우</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c); \n<span class="hljs-comment">// undefined</span>\n\n<span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;\n</pre><p><br></p><p>var 의 경우 호이스팅이 되고 선언과 동시에 메모리에 특별한 값 없이 저장되어 </p><p>참조값을 가지게 됨에 따라  undefined 가 찍히게 된다.</p><p><br></p><p><br></p><p><br></p><h3>4. let, const 의 경우</h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); \n<span class="hljs-comment">// Reference Error</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); \n<span class="hljs-comment">// Reference Error</span>\n\n<span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;\n<span class="hljs-keyword">let</span> b = <span class="hljs-number">2</span>;\n</pre><p><br></p><p>위의 var 키워드와 같은 호이스팅 현상을 막기 위해서 ES6 부터 let, const 변수 선언 방식이 등장하게 되었다.</p><p><br></p><p>앞서서도 언급했지만, <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>var, function의 경우 메모리에 저장하고 참조값을 가지지만, const, let, arrow function 선언의 경우 실행 콘텍스트에 변수 객체만 등록하고, 메모리에 저장하지 않고 참조값을 가지지 않는다. </em></strong></p><p>그렇기 때문에 var 키워드와는 달리 원치않는 undefined를 생성하는 호이스팅 부작용을 막고자, Reference Error를 던져주는 const, let 이 많이 쓰이게 됨.</p><p><br></p><p><br></p><p><strong><em>ES6 이후로 실제 현업에서는 var, function 키워드는 왠만하면 쓰지 않는다. </em></strong></p><p><strong><em>99% 경우 모두 const, let, arrow function 키워드를 사용하여 주로 선언하기 때문에, </em></strong></p><p><strong><em>최근 들어서는 크게 신경 쓰지 않아도 되는 부분이 되었음.</em></strong></p><p><strong><em>그냥 옛날에는 이랬다 정도만 알고 있으면 됨.</em></strong></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong><em>&lt;참고 출처&gt;</em></strong></p><p>https://namu.wiki/w/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85</p><p>https://nuhends.tistory.com/111</p><p>https://velog.io/@taero30/%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-Hoisting</p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><p> </p><p><br></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-10T09:05:32.140Z',
    updatedAt: '2022-10-10T09:05:32.140Z',
    __v: 0,
  },
  {
    _id: '6343f9ea7d98005032093066',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665397456/myportfolioblogproject/asqdrrdetay3jd2tyjwb.gif',
    title: '프론트엔드 유용한 사이트 정리',
    text: '<p>[ 구글 폰트 ]</p><p><a href="https://fonts.google.com/" rel="noopener noreferrer" target="_blank">https://fonts.google.com/</a></p><p><br></p><p>[ 무료 아이콘 ]</p><p><a href="https://fontawesome.com/icons?d=gallery" rel="noopener noreferrer" target="_blank">https://fontawesome.com/icons?d=gallery</a></p><p><br></p><p>[ 무료 아이콘 ]</p><p><a href="https://ionic.io/ionicons" rel="noopener noreferrer" target="_blank">https://ionic.io/ionicons</a></p><p><br></p><p>[ 무료 아이콘 ]</p><p><a href="https://thenounproject.com/" rel="noopener noreferrer" target="_blank">https://thenounproject.com/</a></p><p><br></p><p>[ 무료 음악 ]</p><p><a href="https://www.bensound.com/" rel="noopener noreferrer" target="_blank">https://www.bensound.com/</a></p><p><br></p><p>[ Canva - 로고, 디자인 제작 ]</p><p><a href="https://www.canva.com/ko_kr/" rel="noopener noreferrer" target="_blank">https://www.canva.com/ko_kr/</a></p><p><br></p><p>[ 딥러닝 기반 스케치 그림 HTML 코드로 자동 변환 ]</p><p><a href="https://sketch2code.azurewebsites.net/" rel="noopener noreferrer" target="_blank">https://sketch2code.azurewebsites.net/</a></p><p><br></p><p>[ CSS default 기본값 초기화 ]</p><p><a href="https://meyerweb.com/eric/tools/css/reset/" rel="noopener noreferrer" target="_blank">https://meyerweb.com/eric/tools/css/reset/</a></p><p><br></p><p>[ 배경 화면 ]</p><p><a href="https://coolbackgrounds.io/" rel="noopener noreferrer" target="_blank">https://coolbackgrounds.io/</a></p><p><br></p><p>[ 배경 지우기 ]</p><p><a href="https://www.remove.bg/ko" rel="noopener noreferrer" target="_blank">https://www.remove.bg/ko</a></p><p><br></p><p>[ 무료 이미지 ]</p><p><a href="https://unsplash.com/" rel="noopener noreferrer" target="_blank">https://unsplash.com/</a></p><p><br></p><p>[ 무료 이미지 ]</p><p><a href="https://www.pexels.com/ko-kr/" rel="noopener noreferrer" target="_blank">https://www.pexels.com/ko-kr/</a></p><p><br></p><p>[ 무료 이미지 - 배경 잘린 이미지 많음 ]</p><p><a href="https://www.pngegg.com/" rel="noopener noreferrer" target="_blank">https://www.pngegg.com/</a></p><p><br></p><p>[ 디자인 참고 ]</p><p><a href="https://dribbble.com/" rel="noopener noreferrer" target="_blank">https://dribbble.com/</a></p><p><br></p><p>[ 디자인 참고 ]</p><p><a href="https://www.awwwards.com/" rel="noopener noreferrer" target="_blank">https://www.awwwards.com/</a></p><p><br></p><p>[ 디자인 참고 ]</p><p><a href="http://koreawebdesign.com/site/" rel="noopener noreferrer" target="_blank">http://koreawebdesign.com/site/</a></p><p><br></p><p>[ 디자인 참고 ]</p><p><a href="https://www.cssdesignawards.com/" rel="noopener noreferrer" target="_blank">https://www.cssdesignawards.com/</a></p><p><br></p><p>[ .gitignore 파일 자동 생성 ]</p><p><a href="https://www.toptal.com/developers/gitignore" rel="noopener noreferrer" target="_blank">https://www.toptal.com/developers/gitignore</a></p><p><br></p><p>[ 말풍선 자동 생성 CSS 사이트 ]</p><p><a href="https://www.ilikepixels.co.uk/bubbler/" rel="noopener noreferrer" target="_blank">https://www.ilikepixels.co.uk/bubbler/</a></p><p><br></p><p>[ 테이블 자동 생성 CSS 사이트 ]</p><p><a href="https://www.tablesgenerator.com/html_tables#" rel="noopener noreferrer" target="_blank">https://www.tablesgenerator.com/html_tables#</a></p><p><br></p><p>[ 자동 CSS Gradient 생성 사이트 ]</p><p><a href="https://cssgradient.io/" rel="noopener noreferrer" target="_blank">https://cssgradient.io/</a></p><p><br></p><p>[ 자동 CSS clip-path 생성 사이트 ]</p><p><a href="https://bennettfeely.com/clippy/" rel="noopener noreferrer" target="_blank">https://bennettfeely.com/clippy/</a></p><p><br></p><p>[ React에 최적화된 다양한 UI 및 그래프, 표 제공 사이트 ]</p><p><a href="https://mui.com/" rel="noopener noreferrer" target="_blank">https://mui.com/</a></p><p><br></p><p>[ gif 파일 생성 사이트 ]</p><p><a href="https://ezgif.com/gif-to-mp4" rel="noopener noreferrer" target="_blank">https://ezgif.com/gif-to-mp4</a></p><p><br></p><p>[ gif 파일 용량 낮추는 사이트 ]</p><p><a href="https://gifcompressor.com/ko/" rel="noopener noreferrer" target="_blank">https://gifcompressor.com/ko/</a></p><p><br></p><p>[무료 이미지 에디터 - 포토샵과 비슷 ( 이미지 부분 모양대로 자르기 가능 )]</p><p><a href="https://pixlr.com/kr/e/" rel="noopener noreferrer" target="_blank">https://pixlr.com/kr/e/</a></p><p><br></p><p>[ 포트폴리오 디자인 참고 사이트 ]</p><p><a href="https://themewagon.com/theme-category/admin-dashboard/" rel="noopener noreferrer" target="_blank">https://themewagon.com/theme-category/admin-dashboard/</a></p><p><br></p><p>[ 자바스크립트 중요 개념 공부 유용한 사이트 ]</p><p><a href="https://ko.javascript.info/" rel="noopener noreferrer" target="_blank">https://ko.javascript.info/</a></p><p><br></p><p>[ pdf 파일 편집 및 수정 ]</p><p><a href="https://tools.pdf24.org/ko/edit-pdf" rel="noopener noreferrer" target="_blank">https://tools.pdf24.org/ko/edit-pdf</a></p><p><br></p><p>[ 무료 비디오 샘플 다운로드 사이트 ]</p><p><a href="https://pixabay.com/videos/" rel="noopener noreferrer" target="_blank">https://pixabay.com/videos/</a></p><p><a href="https://www.pexels.com/videos/" rel="noopener noreferrer" target="_blank">https://www.pexels.com/videos/</a></p><p><a href="https://www.videvo.net/" rel="noopener noreferrer" target="_blank">https://www.videvo.net/</a></p><p><a href="https://www.pond5.com/" rel="noopener noreferrer" target="_blank">https://www.pond5.com/</a></p><p><a href="https://www.clipstill.com/" rel="noopener noreferrer" target="_blank">https://www.clipstill.com/</a></p><p><br></p><p>[ HTML 태그 기본 CSS 값을 예쁘게 바꾸어줌 ]</p><p><a href="https://andybrewer.github.io/mvp/" rel="noopener noreferrer" target="_blank">https://andybrewer.github.io/mvp/</a></p><p><br></p><p><br></p><p><strong><em>앞으로 좋은 사이트 있으면 계속 업데이트 추가할 예정임.</em></strong></p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-10-10T10:54:34.300Z',
    updatedAt: '2022-12-19T02:39:26.621Z',
    __v: 0,
  },
  {
    _id: '634608b07d9800503209309e',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665532778/myportfolioblogproject/jqwe2fj3gyetchjhft8x.gif',
    title: '반응형(Responsive)을 잘 만들기 위한 주의할 점 정리',
    text: '<h1>1. 웹 프론트 개발 시, 항상 반응형 디자인을 동시에 하자!!</h1><p><br></p><p>웹 프론트 컴퓨터 모니터 화면 개발을 끝내고, 이 후에 반응형 디자인을 하게 된다면 생각보다 많은 부분을 손봐야 할수도 있음.</p><p>그래서 컴퓨터 모니터 를 디자인 하면서 동시에 반응형 개발하는 것이 정말 효율적이다.</p><p><br></p><p>각 컴포넌트 혹은 페이지 개발시 동시에 진행해야함. 컴퓨터 모니터 크기를 먼저 끝내 놓고 반응형을 손본다면,</p><p>생각보다 많은 디자인 CSS 부분이 충돌되고, 꽤 많은 부분을 손봐야하는 문제가 있어 시간이 배로 걸리게 되고,</p><p>반응형 디자인 자체도 크게 예쁘지 않을 수도 있음.</p><p><br></p><p><br></p><h1>2. 각 컴포넌트 섹션의 높이를 지정해주면서 하지 말것!!</h1><p><br></p><p>이렇게 하게 된다면 자동으로 반응형 현상이 일어날 때,</p><p>섹션 높이를 정해준 것 때문에 생각지 못한 오류가 발생할 수도 있음.</p><p><br></p><p><br></p><h1>3. position 문법 신중하게 쓰기!!</h1><p><br></p><p>앞뒤 컴포넌트 배치를 염두에 두고, 항상 position 문법은 신중하게 써야함.</p><p>특히나 position: absolute; 의 경우, 화면 배치 순서를 초월하여 배치할 수 있는 문법인 만큼,</p><p>반응형 때 생각치 못한 오류가 발생할 확률이 높음.</p><p><br></p><p>그래서 특히나 position 문법의 경우 무조건 그 앞뒤 컴포넌트 반응형 조화에 신경쓰며 코드해야함.</p><p>( 바로 반응형 코드를 시작 해야 된다는 말씀이시겠다.... )</p><p><br></p><p><br></p><h1>4. 반응형은 모니터 크기가 작아지는 부분을 신경 써야 하는 만큼 반응형이 일어남에 따라 자동 개행하게 만드는 것이 아주 중요함!!</h1><p><br></p><h3>* 내용물 ( 이미지, 동영상 등등 ) 및 컴포넌트 ( Component )</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">display</span>: flex;\n<span class="hljs-attribute">flex-wrap</span>: wrap;\n</pre><p><br></p><h3>* 텍스트</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">overflow-wrap</span>: anywhere;\n</pre><p><br></p><h3>* pre 태그 내에서 자동 개행</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">white-space</span>: pre-wrap;\n</pre><p><br></p><p>위의 자동 개행 문법들을 잘 활용하여 내가 따로 반응형 코드를 안 해주더라도 자동으로 반응형 모니터 크기에 따라 자동개행 되게끔 코드를 해주자!!</p><p><br></p><p><em>&lt;여담&gt;</em></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">overflow-x</span>: scroll;\n<span class="hljs-attribute">font</span>: message-box;\n</pre><p><br></p><p>이렇게 했을 때 코드 블럭과 그 안의 텍스트가 가장 예쁘더라....</p><p><br></p><p><br></p><h1>5. 단위 px가 아닌 %, vw, vh, rem, em 등과 같은 화면 비율 단위를 많이 사용하자!!</h1><p><br></p><p>기본 단위를 화면의 크기와 상관없이 정해진 px이 아닌 %, vw, vh, rem, em 등을 많이 사용하자.</p><p><br></p><p>vw 같은 경우 View Port 모니터 크기에 따른 단위라고 하지만 100vw가 미묘하게 맞기가 않음.</p><p>그럼 아래와 같은 코드를 추가하여 해결하도록 하자!!</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;\n<span class="hljs-attribute">overflow-x</span>: hidden;\n</pre><p><br></p><p>rem의 같은 경우 웹에 가장 최상위인 루트 요소의 폰트 사이즈에 따라서 크기가 지정되는 단위.</p><p>em의 같은 경우 웹에 부모 요소(상위 요소)의 폰트 사이즈에 따라서 크기가 지정되는 단위.</p><p><br></p><p>위와 같이 상대적인 비율 기본 단위를 사용하여 반응형 디자인을 용이하게 만들도록 하자!!</p><p>이상!! 끝!!!!</p><p><br></p><p><br></p><h1>6. 바둑 배열 형식 디자인을 할 때는 아래의 grid 코드를 많이 애용하자!!</h1><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">display</span>: grid;\n<span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">15rem</span>, <span class="hljs-number">1</span>fr));\n</pre><p><br></p><p>위의 코드를 이해하기 위해선 먼저 grid 문법이 기본적으로 어떻게 적용되는지 알아야한다.</p><p>아래 mdn 홈페이지로 가서 확인해보도록 하자.</p><p>grid를 모르는 상태라면 아래 mdn 사이트로 들어가서 예시 코드, 그림 부분을 조작해서 약간만 이해하고 오더라도 위의 코드 이해에는 지장이 없다.</p><p>( 본인도 grid에 관한 공부는 진행 중이며, 아직 완벽하지 않은 상태임... )</p><p><br></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns" rel="noopener noreferrer" target="_blank"><strong><em>https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns</em></strong></a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows" rel="noopener noreferrer" target="_blank"><strong><em>https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows</em></strong></a></p><p><br></p><p>자 들어가서 기본적으로 grid 문법이 어떻게 돌아가는지 알아보았다면,</p><p>위의 코드를 뜯어보고 해석을 해보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">/* repeat() 함수 */</span>\n<span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>fr);\n<span class="hljs-comment">/* 1fr 1fr 이런 식으로 찍힘  */</span>\n<span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr <span class="hljs-number">2</span>fr);  \n<span class="hljs-comment">/* 1fr 2fr 1fr 2fr 1fr 2fr 이런 식으로 찍힘 */</span>\n</pre><p><br></p><p>여기서 <strong><em>3</em></strong>은 <strong><em>반복 횟수</em></strong>를 의미한다. 그리고 <strong><em>"1fr 2fr" </em></strong>은 <strong><em>그리드 트랙 리스트</em></strong>에 해당함.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">/* minmax() 함수 */</span>\n<span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">20px</span>, auto));\n<span class="hljs-comment">/* 20px은 최소값, auto는 최대값 */</span>\n</pre><p><br></p><p>minmax() 함수는 최소값, 최대값 범위 내에서 값을 유연하게 처리하는 거임..</p><p>그럼 이제 제일 상단 코드를 분석해보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-attribute">display</span>: grid;\n<span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(auto-fit, <span class="hljs-built_in">minmax</span>(<span class="hljs-number">15rem</span>, <span class="hljs-number">1</span>fr));\n</pre><p><br></p><p>이 말의 의미는 grid로 선언된 부모 컴포넌트 아래 하위 컴포넌트들을 일정하게 반복해서 grid 트랙을 구성하는데 ( repeat 함수 )</p><p>일정한 횟수로 반복해서 grid 바둑 배열을 그리는 것이 아니라,</p><p>auto-fit 화면 크기에 맞추어서 자동으로 grid 반복 횟수가 정해지도록 auto-fit 이라고 횟수 숫자 대신 적어준다.</p><p>그리고 크기를 최소값 15rem, 최대값 1fr ( <strong><em>display: flex; flex: 1;</em></strong>의 CSS 효과랑 똑같음 ) 사이로 유연하게 적용한다. ( minmax 함수 )</p><p><br></p><p><strong class="ql-size-large" style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>즉, 이 코드의 의미는 화면 크기에 맞추어서 ( auto-fit ), 유연하게 ( minmax : 15rem ~ 1fr 사이 값 중 화면 크기에 맞게 바둑판 배열이 될 수 있는 가장 유리한 값 자동 선택 )</em></strong></p><p><strong class="ql-size-large" style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>grid track을 그려 바둑판 배열을 만든다는 뜻임. 이렇게 하면 바둑판 배열 하위 컴포넌트 박스들을 자동으로 개행되게 할 수 있음.</em></strong></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665581419/myportfolioblogproject/y4eapymd9xpki3fcnmel.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><h1>7. 반응형에 따른 자바스크립트 코드 수정은 어떻게??</h1><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">\'resize\'</span>, <span class="hljs-function">() =&gt;</span> {\n  <span class="hljs-title function_">setInitBodyWid</span>(body?.<span class="hljs-title function_">getBoundingClientRect</span>().<span class="hljs-property">width</span>);\n});\n</pre><p><br></p><p><span style="color: rgb(0, 0, 0);">반응형 스크린 너비 크기 변화에 스크린 너비 크기를 위와 같은 코드로 얻을 수 있음.</span></p><p><span style="color: rgb(0, 0, 0);">\'resize\' 이벤트에 \'getBoundingClientRect()\' 메서드 함수를 통해서 스크린 크기 변화할 때마다 너비 크기를 얻을 수 있음. </span></p><p><span style="color: rgb(0, 0, 0);">﻿이를 베이스로 자바스크립트 코드도 반응형에 따라 코드하면 된다.</span></p><p><br></p><p><br></p><h1>8. 반응형 CSS 스타일 width, height 기준을 어떻게 잡아야 할까?</h1><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1201px</span>) {\n&nbsp; <span class="hljs-comment">/* 1201px and more - Extra large screens, TV */</span>\n}\n\n<span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1025px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>) {\n&nbsp; <span class="hljs-comment">/* 1025px - 1200px - Desktops, large screens */</span>\n}\n\n<span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">769px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1024px</span>) {\n&nbsp; <span class="hljs-comment">/* 769px - 1024px - laptops, small screens */</span>\n}\n\n<span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">481px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">768px</span>) {\n&nbsp; <span class="hljs-comment">/* 481px - 768px - ipads, tablets */</span>\n}\n\n<span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">480px</span>) {\n&nbsp; <span class="hljs-comment">/* 320px - 480px - mobile devices */</span>\n}\n\n<span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">319px</span>) {\n&nbsp; <span class="hljs-comment">/* 319px below - folder screens */</span>\n}\n\n<span class="hljs-comment">/* &lt;참고 출처&gt; */</span>\n<span class="hljs-comment">/*&nbsp; https://www.lambdatest.com/blog/how-to-use-css-breakpoints-for-responsive-design/ */</span>\n</pre><p><br></p><p>지금 현재 시점 기준 IT 기계 기준을 다음과 같이 잡아서 CSS 스타일을 해주면 될 거 같음.</p><p><br></p><p><span style="color: rgb(0, 0, 0);">이상!! 끝!!!!</span></p>',
    catName: 'CSS',
    author: 'lse126',
    createdAt: '2022-10-12T00:22:08.593Z',
    updatedAt: '2022-11-29T01:40:19.580Z',
    __v: 0,
  },
  {
    _id: '6349bf8f7d98005032093138',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665776244/myportfolioblogproject/ypvfqzqehw6pnxc86pdp.gif',
    title: 'HTML SemanticMarkUp 에 대하여....',
    text: '<h1>HTML SemanticMarkUp 이란?</h1><p><br></p><p>Semantic이란 단어의 의미는 " 의미론적인 " 이라는 뜻이다.</p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>즉, 단어가 내포하고 있는 것처럼 HTML 태그를 정의할 때 그 내용의 의미에 맞는 적절한 태그를 사용하는 것이다</em></strong> 라고 할 수 있겠다.</p><p>아래의 이미지 내용처럼 "div" 로만 구성을 해도 프로그래밍이 돌아가는데에는 문제가 없다.</p><p><br></p><p>그렇다면 왜 HTML SematicMarkUp의 개념이 중요한 것일까?</p><p><br></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665776261/myportfolioblogproject/ggk6mfvtyuv40jy8yakk.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><h1>첫째: 협업</h1><p><br></p><p>다른 개발자들과의 협업시 위와 같이 div 태그로만 이루어진 HTML 파일로는 다른 개발자들이 전체적인 웹페이지 구조와 내용, 의미 파악하는 것이 아주 힘들것이다.</p><p>그 구조와 내용에 맞는 적절한 HTML 태그 구성을 통해서 한 눈에 봐도 웹페이지 구조가 파악이 될 수 있도록 위의 오른쪽 사진처럼 작성하는 것이 바람직할 것이다.</p><p>복잡하게 여러 주석을 다는 것보다는 의미가 확실한 HTML 태그를 사용하는 것이 조금 더 확실한 방법일 것이다.</p><p><br></p><p><br></p><p><br></p><h1>둘째: Search Engine Optimization (SEO)</h1><p><br></p><p>검색 엔진 최적화에 HTML Semantic MarkUp이 아주 중요하다.</p><p>모든 검색 엔진 알고리즘이 각기 다르겠지만, 공통적으로는 각 웹페이지의 단어, 내용 및 HTML 태그를 활용한 알고리즘으로 페이지들을 추출한다.</p><p>그렇기 때문에 만약 div, span, p 로만 이루어진 웹페이지는 검색 엔진 최적화가 잘된 HTML 문서라고 판단하기 어렵다.</p><p>이 검색 엔진 최적화를 위해서라도 적절한 의미의 HTML 태그를 사용하는 것이 아주 중요하다.</p><p><br></p><p><br></p><p><br></p><h1>셋째: 웹 접근성</h1><p><br></p><p>웹 접근성이란 장애인, 고령자 분이 웹 사이트에서 제공하는 정보를 비장애인 분들과 동등하게 이해하고 제공 받을 수 있도록 보장하는 것을 말함.</p><p>이러한 웹 접근성을 위하여 시각장애인 분들을 위한 음성으로 HTML 웹페이지 내용을 알려주는 스크린리더, 키보드만으로 모든 HTML 내용에 접근할 수 있게 하는 서비스는 HTML 태그 기반으로 작동함.</p><p>그렇기 때문에 이 웹 접근성을 위해서라도 우리는 Semantic HTML Tag를 쓸 필요가 있다.</p><p><br></p><p>아래 사진과 같이 여러 웹페이지 구조가 있는데, 그 구조 안에서 내용물의 의미와 맞는 적절한 태그를 써주도록 하자!!</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665777307/myportfolioblogproject/t3zb51fl2qte6tgoegys.gif" crossorigin="anonymous"> <img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665777319/myportfolioblogproject/k2qltpizuz6ah0aee0ug.gif" crossorigin="anonymous"> </p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665777359/myportfolioblogproject/avtn0wk3yfqsvmllgngy.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p> </p><p><br></p><p><br></p><p><br></p><p><br></p>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2022-10-14T19:59:11.328Z',
    updatedAt: '2022-10-14T19:59:11.328Z',
    __v: 0,
  },
  {
    _id: '6349d8e77d98005032093157',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1665784029/myportfolioblogproject/kg3rkw9r2yphzuolscps.gif',
    title: '면접 - JavaScript (3) - Closure',
    text: '<h1>Closure</h1><p><br></p><p>클로저는 반환된 내부함수가 자신이 선언됐을 때 환경( Lexical Environment )인 스코프를 기억하여,</p><p>자신이 선언됐을 때의 환경(스코프) 밖에서 호출되어도 그 환경에 접근할 수 있는 함수를 말함.</p><p><br></p><p>조금 더 간단히 말해 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>클로저는 자신이 생성될 때의 환경(Lexical Environment)을 기억하는 함수다.</em></strong> 라고 말을 할 수 있음.</p><p>아래의 코드를 보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">outerFunction</span> = () =&gt; {\n&nbsp; <span class="hljs-keyword">let</span> x = <span class="hljs-number">20</span>;\n&nbsp; <span class="hljs-keyword">let</span> <span class="hljs-title function_">innerFunction</span> = () =&gt; {\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);\n&nbsp; };\n&nbsp; <span class="hljs-keyword">return</span> innerFunction;\n};\n\n<span class="hljs-keyword">let</span> inner = <span class="hljs-title function_">outerFunction</span>();\n<span class="hljs-title function_">inner</span>();\n<span class="hljs-comment">// console.log  -&gt;  20</span>\n</pre><p><br></p><p>위의 예제 코드를 보면 innerFunction이 선언이 된 outerFunction 내부의 스코프 (환경) 에 있는 변수 \'x\'를 기억하고 있다가,</p><p>이 \'x\'를 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>자유변수</em></strong>라고 한다. 선언당시 변수 "x" 를 기억하고 있다가 inner() 로 호출이 되었을 때 콘솔로그에 20이 찍힐 수가 있는 것이다.</p><p>거듭 말하지만, 외부 함수 안에서 선언된 내부 함수는 그 외부 함수의 안의 환경을 기억하는 것이다.</p><p>이를 영어로 Closure(포섭하다) 라는 의미를 그대로 착용하여 Closure 함수라고 부르게 되는 것이다.</p><p>그럼 아래의 예제를 보자.</p><p><br></p><p><br></p><h3>*index.html</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span> /&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Closure<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style2.css"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"countBox"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"countNum"</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Click!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"./script2.js"</span> <span class="hljs-attr">defer</span>&gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</pre><p><br></p><p><br></p><h3>*style.css</h3><pre class="ql-syntax" spellcheck="false">* {\n&nbsp; <span class="hljs-attribute">box-sizing</span>: border-box;\n&nbsp; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;\n&nbsp; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;\n}\n\n\nbody {\n&nbsp; <span class="hljs-attribute">width</span>: <span class="hljs-number">100vw</span>;\n&nbsp; <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;\n&nbsp; <span class="hljs-attribute">overflow-x</span>: hidden;\n&nbsp; <span class="hljs-attribute">display</span>: flex;\n&nbsp; <span class="hljs-attribute">flex-direction</span>: column;\n&nbsp; <span class="hljs-attribute">justify-content</span>: center;\n&nbsp; <span class="hljs-attribute">align-items</span>: center;\n}\n\n\n.countNum {\n&nbsp; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10rem</span>;\n}\n\n\nbutton {\n&nbsp; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.6rem</span> <span class="hljs-number">1.2rem</span>;\n&nbsp; <span class="hljs-attribute">font-size</span>: large;\n&nbsp; <span class="hljs-attribute">cursor</span>: pointer;\n}\n</pre><p><br></p><p>먼저 count 예시를 만들기 위해서 위와 같은 간단한 HTML, CSS 파일을 만들었다.</p><p>그럼 이제 count 함수를 만들어보자!!</p><p><br></p><p><br></p><h3>*script.js</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> countNum = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'.countBox .countNum\'</span>);\n<span class="hljs-keyword">const</span> countBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'button\'</span>);\n\n<span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">click</span> = () =&gt; {\n&nbsp; <span class="hljs-keyword">return</span> ++num;\n};\n\ncountBtn.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> {\n&nbsp; countNum.<span class="hljs-property">innerText</span> = <span class="hljs-string">`<span class="hljs-subst">${click()}</span>`</span>;\n};\n</pre><p><br></p><p>일단 변수 num을 전역변수로서 선언하고 count 함수를 적용시켜 보았다.</p><p>물론 아래와 같이 잘 작동한다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665782860/myportfolioblogproject/vzktkn5p3urtfdg01wk3.gif" crossorigin="anonymous"></p><p><br></p><p>하지만 num을 저렇게 전역변수로 선언하고 count 함수를 돌리면 이 단순한 코드보다 더 복잡한 코드에선 문제를 일으킬 소지가 다분히 크다.</p><p>왜냐하면, click 함수 호출 이전에 전역변수 num이 반드시 0이어야만 코드가 제대로 작동이 된다.</p><p><br></p><p>지금은 단순한 코드이기 때문에 문제 없이 작동하지만, 프로젝트를 하거나 이 보다 더 복잡한 코드를 가지게 된다면,</p><p>생각지 못한 코드 상 오류로 전연변수 값 num이 click 함수 이외의 다른 요소 때문에 변경될 가능성이 높다.</p><p><br></p><p>이를 막기 위해 num을 click 함수 안에 선언하고 내부함수에서 num 증가하는 값을 처리하고, 그것을 Closure 함수로써</p><p>반환해주는 코드를 짤 수도 있겠다.</p><p>아래의 예시를 보자.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> countNum = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'.countBox .countNum\'</span>);\n<span class="hljs-keyword">const</span> countBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">\'button\'</span>);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">clickCount</span> = () =&gt; {\n&nbsp; <span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span>;\n&nbsp; <span class="hljs-keyword">const</span> <span class="hljs-title function_">clickCountInside</span> = () =&gt; ++num;\n&nbsp; <span class="hljs-keyword">return</span> clickCountInside;\n};\n\n<span class="hljs-keyword">const</span> click = <span class="hljs-title function_">clickCount</span>();\n\ncountBtn.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> {\n&nbsp; countNum.<span class="hljs-property">innerText</span> = <span class="hljs-string">`<span class="hljs-subst">${click()}</span>`</span>;\n};\n</pre><p><br></p><p>위와 같이 코드를 짠다면 clickCount 함수 내부에 num 값을 선언하고 그 내부에서 num 값을 증가시키도록 처리를 한다.</p><p>clickCountInside 라는 클로저함수를 clickCount 함수 내부에 정의하고, 선언함에 따라 clickCountInside 라는 클로저함수가 num 값을 기억하도록 조치한다.</p><p>그리고 반환된 함수를 click 이라는 변수에 넣고 그것을 click() 이렇게 실행시키면 아래와 같이 코드가 잘 작동한다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1665783659/myportfolioblogproject/p4dv3veyjeorgg79mmf6.gif" crossorigin="anonymous"></p><p><br></p><p>이런 클로저함수 장점은 num 변수를 전역변수가 아닌 어떠한 함수 내부에 정의함으로써 의도치 않게 발생되는 num 값의 변화를 막고 오류를 예방해주는 효과가 있다.</p><p>변수 num 값은 이제 외부에서 접근 가능한 전역변수가 아닌 private 변수가 된 것이다.</p><p>이렇게 의도치 않은 변경을 예방할 수 있기 때문에 안정적인 프로그래밍이 가능하게 하는 것이다.</p><p><br></p><p><br></p><p><br></p><p><strong>&lt;출처 참고&gt;</strong></p><p>https://namu.wiki/w/%ED%81%B4%EB%A1%9C%EC%A0%80</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-14T21:47:19.178Z',
    updatedAt: '2022-10-14T21:58:31.719Z',
    __v: 0,
  },
  {
    _id: '634d3ad27d98005032093244',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1666003551/myportfolioblogproject/mb9p5tg4ymh4ndg1mti6.gif',
    title: '면접 - JavaScript (4) - this',
    text: '<h1>Java와 JavaScript 의 this란??</h1><p><br></p><p>자바(Java) 같은 경우 내가 배워 본 적이 없어서 잘 모르겠지만, </p><p><em style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">자바에서의 this는 인스턴스 자신(self)을 가리키는 참조변수이다.</em></p><p>this가 객체 자신에 대한 참조 값을 가지고 있다는 뜻이다.</p><p><br></p><p>하지만, <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>JavaScript의 경우 함수 호출 방식에 의해 this에 바인딩(bind)할 어떤 객체가 동적으로 결정된다.</em></strong></p><p>다시 말해, 함수를 선언할 때, this에 바인딩(bind)할 객체가 정적으로 결정되는 것이 아니고, </p><p>함수를 호출할 때, 함수가 어떻게 호출되었는지에 따라 this에 바인딩할 객체가 동적으로 결정된다.</p><p>그럼 함수 호출 방식에 따라 어떻게 this가 동적으로 결정되는지 알아보자!!</p><p><br></p><p><br></p><h3>1. 단독으로 쓴 this</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);\n<span class="hljs-comment">// console -&gt; window</span>\n</pre><p><br></p><p>전역에서 단독으로 쓴 this는 window 를 의미함.</p><p><br></p><p><br></p><p><br></p><h3>2 - 1. 함수 안에서 쓴 this</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>() {\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;   \n}\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFunction</span>());\n<span class="hljs-comment">// console -&gt; window</span>\n</pre><p><br></p><p>함수 생성과 동시에 window로 default binding되기 때문에 window가 찍히게 됨.</p><p>하지만 최상단에 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>"use strict";</em></strong> 을 쓰면 결과는 달라짐.</p><p>아래의 코드를 보자. </p><p>( use strict 개념의 경우 향후 따로 포스트 할 예정 )</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">\'use strict\'</span>;\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>() {\n  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;   \n}\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFunction</span>());\n<span class="hljs-comment">// console -&gt; undefined</span>\n</pre><p><br></p><p>만약 최상단에 "use strict"; 를 쓴다면, 함수 생성과 동시에 자동적으로 default binding이 되지 않기 때문에 undefined 가 출력됨.</p><p><br></p><p><br></p><p><br></p><h3>2 - 2. call, apply, bind</h3><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>\'use strict\'; 를 쓰지 않은 상태</em></strong>에서 함수 내 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>default binding 된 this가 존재하고 유효</em></strong>할 경우.</p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>함수 안의 this를 window 객체 외 다른 것을 바인딩(bind)해서 쓸려면 어떻게 해야할까?</em></strong></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params">city</span>) {\n&nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${city}</span>에 <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.name}</span>이 살았다!!`</span>;\n}\n\n<span class="hljs-keyword">const</span> obj = { <span class="hljs-attr">name</span>: <span class="hljs-string">\'Tom\'</span> };\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFunction</span>());  \n<span class="hljs-comment">// undefined에  이 살았다!!</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">myFunction</span>(<span class="hljs-string">\'Seoul\'</span>));  \n<span class="hljs-comment">// Seoul에  이 살았다!!</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myFunction.<span class="hljs-title function_">call</span>(obj, <span class="hljs-string">\'Seoul\'</span>));\n<span class="hljs-comment">// Seoul에 Tom이 살았다!!</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myFunction.<span class="hljs-title function_">apply</span>(obj, [<span class="hljs-string">\'Seoul\'</span>]));\n<span class="hljs-comment">// Seoul에 Tom이 살았다!!</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myFunction.<span class="hljs-title function_">bind</span>(obj)(<span class="hljs-string">\'Seoul\'</span>));\n<span class="hljs-comment">// Seoul에 Tom이 살았다!!</span>\n</pre><p><br></p><p>call, apply, bind 이 모든 메서드 함수들이 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>\'use strict\'; 를 쓰지 않은 상태 </em></strong> 에서 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>기존 default window this 객체에</em></strong></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>새로운 객체를 binding 할 때 쓰는 함수들이다.</em></strong></p><p><br></p><p><strong><em>call은 첫 번째 매개변수에 binding할 새로운 객체와 함수 내 매개변수를 2번째 인자로 받고,</em></strong></p><p><strong><em>apply는 첫 번째 매개변수로 binding할 새로운 객체를 받고 함수 내 매개변수가 복수인 경우 배열로서 받는 차이점이 있다.</em></strong></p><p><strong><em>bind는 바인딩할 새로운 객체만 받고, ( 함수 매개변수 ) 이런 식으로 괄호로 따로 함수 매개변수를 받아 실행시킴.</em></strong></p><p><br></p><p><br></p><p><br></p><h3>3. 메서드( 객체 안의 함수 ) 안에서 쓴 this</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">let</span> person = {\n&nbsp; <span class="hljs-attr">firstName</span>: <span class="hljs-string">\'Seong Eun\'</span>,\n&nbsp; <span class="hljs-attr">lastName</span>: <span class="hljs-string">\'Lee\'</span>,\n&nbsp; <span class="hljs-attr">fullName</span>: <span class="hljs-keyword">function</span> () {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">\' \'</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;\n&nbsp; &nbsp; <span class="hljs-comment">// 이때 this는 해당 메서드를 호출한 객체로 바인딩 됨.</span>\n&nbsp; },\n};\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">fullName</span>());\n<span class="hljs-comment">// Seong Eun Lee</span>\n</pre><p><br></p><p>객체 안의 함수 메서드 안에서 쓴 this는 위와 같이 해당 메서드를 호출한 객체로 바인딩 된다.</p><p><br></p><p><br></p><p><br></p><h3>4. 이벤트 핸들러 안에서 쓴 this</h3><pre class="ql-syntax" spellcheck="false">countBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">\'click\'</span>, <span class="hljs-keyword">function</span> () {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);\n&nbsp; <span class="hljs-comment">// &lt;button&gt;Click!!&lt;/button&gt;</span>\n&nbsp; <span class="hljs-comment">// 이벤트 핸들러 안에서 쓴 this는 HTML 요소를 가르킴</span>\n});\n</pre><p><br></p><p>이벤트 핸들러 안에서 쓴 this는 해당 이벤트의 HTML 요소를 가르킨다.</p><p><br></p><p><br></p><p><br></p><h3>5. 생성자 안에서 쓴 this</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {\n&nbsp; <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) {\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;\n&nbsp; }\n}\n<span class="hljs-keyword">let</span> kim = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">\'Kim\'</span>);\n<span class="hljs-keyword">let</span> lee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">\'Lee\'</span>);\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(kim.<span class="hljs-property">name</span>);\n<span class="hljs-comment">// console -&gt; Kim</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lee.<span class="hljs-property">name</span>);\n<span class="hljs-comment">// console -&gt; Lee</span>\n</pre><p><br></p><p>생성자 안에서 쓴 this는 생성자 객체를 new와 함께 만듦과 동시에 당연히 해당 객체를 가르키게 됨.</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-17T11:21:54.759Z',
    updatedAt: '2022-10-17T11:21:54.759Z',
    __v: 0,
  },
  {
    _id: '635923197d980050320932ae',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1666783214/myportfolioblogproject/gwyiikqk6rrwngafm9ln.gif',
    title: 'Axios vs Fetch API',
    text: '<p><strong><em>자주 반복으로 쓰이는데 자꾸 쓸 때마다 기억이 가물가물하여 기록 삼아 적어둔다.</em></strong></p><p><br></p><p><br></p><h3>* Fetch API</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">event</span>) =&gt; {\n  event.<span class="hljs-title function_">preventDefault</span>();\n\n  <span class="hljs-keyword">try</span> {\n    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://api.lsevina126.asia/loginDatas/login`</span>, {\n      <span class="hljs-attr">method</span>: <span class="hljs-string">"POST"</span>,\n      <span class="hljs-attr">mode</span>: <span class="hljs-string">"cors"</span>,\n      <span class="hljs-attr">credentials</span>: <span class="hljs-string">"include"</span>,\n      <span class="hljs-attr">headers</span>: {\n        <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/json\'</span>,\n        <span class="hljs-string">"Origin"</span>: <span class="hljs-string">"http://localhost:3000"</span>\n      }\n      <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>({\n        <span class="hljs-attr">userId</span>: idRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,\n        <span class="hljs-attr">password</span>: pwdRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,\n      }),\n    });\n    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>();\n    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);\n  } <span class="hljs-keyword">catch</span> (error) {\n    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(error);\n  }\n};\n</pre><p><br></p><p><br></p><h3>* Axios</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">event</span>) =&gt; {\n  event.<span class="hljs-title function_">preventDefault</span>();\n\n  <span class="hljs-keyword">try</span> {\n   <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">`https://api.lsevina126.asia/loginDatas/login`</span>, {\n     <span class="hljs-attr">userId</span>: idRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,\n     <span class="hljs-attr">password</span>: pwdRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,\n   }, {\n    <span class="hljs-attr">mode</span>: <span class="hljs-string">"cors"</span>,\n    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">headers</span>: {\n      <span class="hljs-attr">origin</span>: <span class="hljs-string">`http://localhost:3000`</span>,\n    }\n  });\n  } <span class="hljs-keyword">catch</span> (error) {\n    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(error);\n  }\n};\n</pre><p><br></p><p><br></p><h3>* Axios Create</h3><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">\'axios\'</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">BASE_URL</span> = <span class="hljs-string">\'https://api.lsevina126.asia\'</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">USER</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>?.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">\'persist:root\'</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>)?.<span class="hljs-property">user</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TOKEN</span> = <span class="hljs-variable constant_">USER</span>\n&nbsp; ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable constant_">USER</span>).<span class="hljs-property">currentUser</span>?.<span class="hljs-property">accessToken</span>?.<span class="hljs-title function_">toString</span>()\n&nbsp; : <span class="hljs-literal">null</span>;\n<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HOST</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">host</span>;\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> publicRequest = axios.<span class="hljs-title function_">create</span>({\n&nbsp; <span class="hljs-attr">baseURL</span>: <span class="hljs-variable constant_">BASE_URL</span>,\n&nbsp; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,\n  <span class="hljs-attr">mode</span>: <span class="hljs-string">"cors"</span>,\n&nbsp; <span class="hljs-attr">headers</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">origin</span>: <span class="hljs-string">`http://<span class="hljs-subst">${HOST}</span>`</span>,\n&nbsp; },\n});\n\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> userRequest = axios.<span class="hljs-title function_">create</span>({\n&nbsp; <span class="hljs-attr">baseURL</span>: <span class="hljs-variable constant_">BASE_URL</span>,\n&nbsp; <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span>,\n&nbsp; <span class="hljs-attr">mode</span>: <span class="hljs-string">"cors"</span>,\n  <span class="hljs-attr">headers</span>: {\n&nbsp; &nbsp; <span class="hljs-attr">token</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">${TOKEN}</span>`</span>,\n&nbsp; &nbsp; <span class="hljs-attr">origin</span>: <span class="hljs-string">`http://<span class="hljs-subst">${HOST}</span>`</span>,\n&nbsp; },\n});\n</pre><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">event</span>) =&gt; {\n  event.<span class="hljs-title function_">preventDefault</span>();\n\n&nbsp; <span class="hljs-keyword">try</span> {\n&nbsp; &nbsp; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> publicRequest.<span class="hljs-title function_">post</span>(<span class="hljs-string">\'/loginDatas/login\'</span>, {\n      <span class="hljs-attr">userId</span>: idRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,\n      <span class="hljs-attr">password</span>: pwdRef.<span class="hljs-property">current</span>.<span class="hljs-property">value</span>,\n    });\n&nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);\n&nbsp; } <span class="hljs-keyword">catch</span> (error) {\n&nbsp; &nbsp; <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(error);\n&nbsp; }\n};\n</pre>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-10-26T12:07:53.263Z',
    updatedAt: '2022-11-05T04:45:53.835Z',
    __v: 0,
  },
  {
    _id: '635935677d980050320932d6',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1666789080/myportfolioblogproject/bhdgqg7kvbhpfotug8qp.gif',
    title: '면접 - JavaScript (5) - Async/Await ( 비동기 )',
    text: '<h1>동기와 비동기</h1><p><br></p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>동기</em></strong> : Syncronous 동기 작업은 요청을 보낸 뒤 해당 요청을 응답받거나 해당 작업이 끝나야 다음 코드 동작을 실행시킴.</p><p><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>비동기</em></strong> : Asynchronous 비동기 작업은 요청을 보낸 뒤, 해당 요청을 응답받거나 해당 작업이 끝나는 것에 상관없이 다음 코드 동작을 실행시킬 수 있는 방식.</p><p><br></p><p>간단하게 말하면 은행의 번호표를 뽑으면 먼저 앞선 번호표를 뽑은 고객이 끝날 때까지 기다려야만 나의 은행 업무를 볼 수 있듯이,</p><p>이렇게 코드가 작동하는 것을 동기적이라고 표현을 한다.</p><p><br></p><p>반면에 비동기적이라는 표현은 어떤 식당에 들어가서 음식을 주문했을때, 식당 주인이 음식 주문을 순차적으로 받겠지만,</p><p>먼저 와서 주문을 한 선착순 상관없이, 조리가 끝난 음식 먼저 해당 손님에게 나가는 것과 같이, </p><p>이렇게 코드가 작동하는 것을 비동기적이라고 표현을 하는 것이다.</p><p><br></p><p>그렇다면 자바스크립트에서 이러한 비동기 작업을 수행하게 하는 Promise, Async-Await 코드가 등장하게 된 이유는 무엇일까?</p><p><br></p><p><br></p><h1>자바스크립트는 Single Thread 기반 언어이다.</h1><p><br></p><p>다시 한번 말하지만 자바스크립트는 싱글스레드 기반 언어이다. </p><p>이 말의 의미는 이벤트를 처리하는 Call Stack이 하나 뿐이란 의미인 것이다.</p><p>( 자바스크립트 Event Loop 및 Call Stack에 대해서는 아래의 포스트 참고할 것!! )</p><p><br></p><h3><a href="https://www.lsevina126.asia/post/623aa660e30b40a8d7ff1f26" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/623aa660e30b40a8d7ff1f26</em></strong></a></h3><h3><a href="https://www.lsevina126.asia/post/623dc058738dcca69b6d60b3" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/623dc058738dcca69b6d60b3</em></strong></a></h3><h3><a href="https://www.lsevina126.asia/post/633adbc57d98005032092f82" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/633adbc57d98005032092f82</em></strong></a></h3><p><br></p><p>방대한 양의 코드에서 여러가지 함수 작업들을 동기적으로만 처리하게 된다면, 하나의 이벤트가 모두 끝날 때까지 다른 어떠한 함수 코드도 실행시키지 못하는 최적화 문제가 발생하게 된다.</p><p>이는 자바스크립트를 베이스로 하는 브라우저가 백엔드 서버와 HTTP 네트워크 통신하는 함수 코드를 작업할 때, 그 HTTP 네트워크 통신이 끝날 때까지는 브라우저 상에서 그 어떠한 여타 작업, 코드 실행을 하지 못한다는 의미이다.</p><p>서버 통신 특성상 그 시간이 오래 걸리는 경우도 더러 있으므로, 이는 브라우저 최적화에 악영향을 끼치게 된다.</p><p><br></p><p>이러한 이유로 비동기 함수 작업을 하는 문법이 있는 것이다.</p><p>콜스택에서 비동기 함수를 일단 Web API 로 보내 작업을 맡기고, Web API에서 작업이 끝나는 순서대로 해당 비동기 함수 콜백을 다시 MicroTask Queue에 줄을 세워서 콜스택이 처리하게 된다.</p><p><br></p><p>해당 비동기 함수 작업은  Promise 문법과 Async - Await 문법으로 구현할 수 있음.</p><p>아래와 같이 똑같은 작업을 하는 함수를 다른 방식으로 구현했지만, 한 눈에 보아도 Async - Await 문법이 더 가독성이 뛰어난 것을 확인할 수 있음.</p><p>Promise 문법도 그 전 비동기 함수 작업의 콜백지옥 가독성이 문제가 되어 나온 문법이 이지만, 이를 더욱 개선시켜 나온 문법이 Async - Await 문법인 것임. </p><p><br></p><p><br></p><h1>Promise 문법</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRequest</span>() {\n    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getData</span>()\n        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> {\n            <span class="hljs-keyword">if</span>(data &amp;&amp; data.<span class="hljs-property">needMoreRequest</span>) {\n                <span class="hljs-keyword">return</span> <span class="hljs-title function_">makeMoreRequest</span>(data)\n                  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">moreData</span> =&gt;</span> {\n                      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(moreData);\n                      <span class="hljs-keyword">return</span> moreData;\n                  }).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n                      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Error while makeMoreRequest\'</span>, error);\n                  });\n            } <span class="hljs-keyword">else</span> {\n                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);\n                <span class="hljs-keyword">return</span> data;\n            }\n        }).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> {\n          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Error while getData\'</span>, error);\n        });\n}\n</pre><p><br></p><p><br></p><h1>Async - Await 문법</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">makeRequest</span>() { \n    <span class="hljs-keyword">try</span> {\n      <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getData</span>();\n      <span class="hljs-keyword">if</span>(data &amp;&amp; data.<span class="hljs-property">needMoreRequest</span>) {\n          <span class="hljs-keyword">const</span> moreData = <span class="hljs-keyword">await</span> <span class="hljs-title function_">makeMoreRequest</span>(data);\n          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(moreData);\n          <span class="hljs-keyword">return</span> moreData;\n      } <span class="hljs-keyword">else</span> {\n          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);\n          <span class="hljs-keyword">return</span> data;\n      }\n    } <span class="hljs-keyword">catch</span> (error) {\n        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">\'Error while getData\'</span>, error);\n    }\n}\n</pre>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-26T13:25:59.026Z',
    updatedAt: '2022-10-26T13:25:59.026Z',
    __v: 0,
  },
  {
    _id: '635bc5867d980050320932ff',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1666955519/myportfolioblogproject/iboukjno5yl9wh3rcf0v.gif',
    title: '면접 - 네트워크 (2) - HTTP와 HTTPS',
    text: '<h1>HTTP와 HTTPS 란?</h1><p><br></p><p>HTTP ( Hyper Text Transfer Protocol )는 컴퓨터 간의 데이터 교환 및 통신을 위한 통신 규약, 규칙임. 통신 규약, 통신 프로토콜임.</p><p>HTTPS ( Hyper Text Transfer Protocol <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>over Secure Socket Layer</em></strong> ) 기존 HTTP 통신 규약에 위의 사진처럼 데이터 암호화가 추가된 통신 프로토콜임.</p><p><br></p><p><br></p><h1>HTTPS의 필요성</h1><p><br></p><p>HTTP 통신 프로토콜을 베이스로 하는 TCP/IP는 도청 가능한 네트워크임.</p><p>TCP/IP 연결 과정 중에 일어나는 패킷 교환 과정 중에서 패킷을 중간에서 수집하는 것만으로도 충분히 해킹 및 도청할 수가 있음.</p><p>그래서 이러한 패킷 및 데이터를 평문으로 통신했을 때, 그 메시지 의미를 바로 파악할 수 있기 때문에 암호화하여 통신해야함.</p><p><br></p><p><br></p><h1>HTTPS 암호화 방식</h1><p><br></p><h3>1. 대칭키 암호화</h3><p>클라이언트와 서버가 동일한 키를 가지고 암호화 / 복호화를 진행함.</p><p>키가 노출되면 매우 위험하지만 속도가 매우 빠름.</p><p><br></p><h3>2. 비대칭키 암호화</h3><p>공개키/개인키를 사용해 암호화/복호화를 진행함.</p><p>키가 노출되어도 비교적 안전하지만 연산 속도가 느림.</p><p><br></p><p><strong><em>공개키 - 모두에게 공개가능한 키.</em></strong></p><p><strong><em>개인키 - 나만 가지고 알고 있어야 하는 키.</em></strong></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1666957240/myportfolioblogproject/kr6xswdbq6pqxxvs2cy7.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><strong><em>공개키 암호화 : 공개키로 암호화를 하면 개인키로만 복호화할 수 있다 -&gt; 개인키는 나만 가지고 있으므로, 나만 볼 수 있음.</em></strong></p><p><strong><em>개인키 암호화 : 개인키로 암호화하면 공개키로 복호화할 수 있다 -&gt; 공개키는 모두에게 공개되어 있으므로, 내가 인증한 정보임을 알리고, 신뢰성 보장 가능</em></strong></p><p><br></p><p><br></p><h1>HTTPS 연결, 동작 과정 및</h1><p><br></p><p>HTTPS는 대칭키 암호화와 비대칭키 암호화를 모두 사용하여 빠른 연산 속도와 안정성, 보안성을 자랑한다.</p><p>HTTPS 네트워크 통신 연결을 위해 패킷을 교환하기 전( 3-Way Handshake )에 포트 ( Port ) 연결을 통해 서버와 브라우저가 같은 세션키를 이용하여, 암호화, 복호화를 통해 데이터 및 패킷을 주고 받게 된다.</p><p>이는 대칭키 방식임....</p><p>이미 그 전 포스트에서 살펴보았음. 이 과정은 아래 포스트 OSI 5계층, 4계층 설명 참고할 것!!</p><p><br></p><p><a href="https://www.lsevina126.asia/post/6325f1897d980050320929a7" rel="noopener noreferrer" target="_blank" class="ql-size-large"><strong><em>https://www.lsevina126.asia/post/6325f1897d980050320929a7</em></strong></a></p><p><br></p><p>하지만, 이 같은 세션키를 클라이언트와 서버가 어떻게 안전하게 교환하느냐가 문제인데...</p><p><strong><em>즉, 처음 연결을 성립하여 안전하게 세션키를 공유하는 과정에서 비대칭키 방식이 사용되는 것임.</em></strong></p><p><strong><em>그 이후 같은 세션키를 사용하여 브라우저와 서버가 대칭키 방식으로 암호화, 복호화를 진행. 데이터를 교환하게 된다. </em></strong></p><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>실제 HTTPS 연결 과정 흐름을 살펴보면 아래와 같다.</em></strong></p><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>1. 클라이언트 (브라우저) 가 서버로 최초 연결 시도를 한다.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>2. 서버는 공개키( 인증서 )를 브라우저에게 넘겨줌.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>3. 브라우저는 공개키( 인증서 )의 유효성을 검사하고 세션키를 발급함.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>4. 브라우저는 세션키를 보관하며 추가로 서버의 공개키로 세션키를 암호화하여 서버로 전송함.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>5. 서버는 개인키로 암호화된 세션키를 복호화하여 세션키를 얻음.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>6. 클라이언트와 서버는 동일한 세션키를 공유하므로, 데이트를 전달, 교환할 때 같은 세션키로 암호화, 복호화가 진행됨.</em></strong></p><p><br></p><p><img style="height: 140vh" src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1666958258/myportfolioblogproject/hsiwfwhzjeclvah4iplr.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong class="ql-size-large"><em>&lt;참고출처&gt;</em></strong></p><p><br></p><p>https://stackoverflow.com/questions/188266/how-are-ssl-certificates-verified#:~:text=Your%20web%20browser%20downloads%20the,key%20of%20the%20web%20server.&amp;text=It%20uses%20this%20public%20key,address%20of%20the%20web%20server</p><p>https://tiptopsecurity.com/how-does-https-work-rsa-encryption-explained/</p><p>https://tech.ssut.me/https-is-faster-than-http/</p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-10-28T12:05:26.539Z',
    updatedAt: '2022-10-28T12:22:21.614Z',
    __v: 0,
  },
  {
    _id: '636879f87d980050320933ac',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1667788251/myportfolioblogproject/iyqc1ehczpujetgg3x9t.gif',
    title: '면접 - JavaScript (6) - ProtoType ( 객체원형 )',
    text: '<h1>ProtoType 객체 원형</h1><p><br></p><p>자바스크립트에서 객체는 언제나 함수(function)로 생성되어진다.</p><p>자바스크립트에서 함수가 정의되면 2가지 일이 동시에 일어난다.</p><p><br></p><p><strong>1. </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">prototype object 생성</strong><strong> -- 해당 함수의</strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"> prototype 속성을 통해서 prototype object로 접근 가능</strong><strong>함.</strong></p><p><strong>2. </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">prototype object</strong><strong> 안에는 </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">constructor, __proto__ </strong><strong>로 구성되는 key값으로 이루어진 객체로 정의됨.</strong></p><p><br></p><p><strong>- </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">constructor</strong><strong> : prototype object 생성에 기반이 되었던 </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">함수(</strong><span style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">function</span><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">)를 가르킴</strong><strong>.</strong></p><p><strong> 즉, </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">해당 함수에 constructor(생성자) 자격을 부여하여 new를 통해서 객체를 만들 수 있음.</strong></p><p><br></p><p><strong>- </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">__proto__</strong><strong> : prototype object 를 기반으로 new을 통해서 객체가 생성되고 인스턴스화 되면,</strong></p><p><strong> </strong><strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">그 해당 객체의 __proto__는 조상 함수의 Prototype Object를 가르킴.</strong></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1667790188/myportfolioblogproject/xo0rnpiuhqftdkxfjg4v.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">con</span>(<span class="hljs-params">name</span>) {\n&nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;\n}\n\ncon.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">12</span>;\n\n<span class="hljs-keyword">var</span> who = <span class="hljs-keyword">new</span> <span class="hljs-title function_">con</span>(<span class="hljs-string">\'me\'</span>);\n<span class="hljs-keyword">var</span> when = <span class="hljs-keyword">new</span> <span class="hljs-title function_">con</span>(<span class="hljs-string">\'Monday\'</span>);\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);\n<span class="hljs-comment">// Object Prototype Object 가르킴</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(con.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);\n<span class="hljs-comment">// con Prototype Object 가르킴</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(con.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>);\n<span class="hljs-comment">// Object Prototype Object 가르킴</span>\n\n<span class="hljs-comment">// 위의 Prototype 구조 이미지 참고할 것</span>\n\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(who);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(when);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(who.<span class="hljs-property">age</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(when.<span class="hljs-property">age</span>);\n<span class="hljs-comment">// __proto__ 자바스크립트 위에서 설명했듯이 Prototype Link 를 통해서</span>\n<span class="hljs-comment">// 객체 생성 기반이 된 조상 함수의 prototype object를 가르키기 때문에</span>\n<span class="hljs-comment">// who, when 객체 인스턴스 생성시 age 값을 정의하지 않고</span>\n<span class="hljs-comment">// 앞에 prototype을 통해서 정의했어도 우리가 console.log 를 통해서 확인가능함</span>\n</pre><p><br></p><p><br></p><p>즉, <strong>__proto__ </strong>는 <strong>Prototype Object</strong>를 가르킴 <span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">( </span><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>ProtoType Link</em></strong><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"> )</span></p><p>이렇게 <strong>__proto__ </strong> 속성을 통해서 상위<strong> Prototype Object</strong>과 연결되어 있는 형태를 <strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>ProtoType Chain</em></strong> 이라고 합니다.</p><p>자바스크립트 모든 객체의 조상은 위의 사진처럼 <strong>Object</strong> 임.</p><p>그러므로 <strong>__proto__</strong>로 이루어진 <strong>prototype chain</strong> 구조 때문에 모든 객체는 <strong>Object</strong>의 자식이라고 불린다.</p><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>이 말인 즉슨, prototype chain 최상위에 있는 모든 객체의 조상은 Object이다.</em></strong></p><p>따라서<strong> Object Prototype Object</strong> 안에 있는 모든 속성을 모든 객체에서 사용이 가능함을 의미.</p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>( 위의 사진 참고할 것!! )</em></strong></p><p><br></p><p><br></p><p><br></p><p><br></p><p><strong><em>&lt;참고 내용 출처&gt;</em></strong></p><p><strong class="ql-size-small">https://kyounghwan01.github.io/blog/JS/JSbasic/prototype/#prototype-chain-%E1%84%8B%E1%85%B1%E1%84%8B%E1%85%B5%E1%86%B7</strong></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-11-07T03:22:32.401Z',
    updatedAt: '2022-11-07T03:30:23.997Z',
    __v: 0,
  },
  {
    _id: '636b25357d9800503209340b',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1667962047/myportfolioblogproject/o67vixko5j4tud8jdhi4.gif',
    title: '자바스크립트에 대한 조금 더 진지한 고찰 ( Feat. Why ProtoType???!!! )',
    text: '<h3><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>해당 포스트는 카카오 엔터테인먼트의 임성묵 개발자 님의 자바스크립트 프로토타입에 대한 포스트를 면접 준비 및 공부 겸 요약 정리한 포스트 입니다.</em></strong></h3><p><br></p><p>자바스크립트가 왜 다른 객체 지향 프로그래밍 언어와는 다르게 프로로타입 베이스로 객체 지향 프로그래밍 언어 디자인을 했고, 다른 OOP 프로그래밍 언어들과 어떻게 다른지.</p><p>철학을 곁들여 깊이 있게 설명한 해당 포스트에 깊은 감동을 받았습니다.</p><p><br></p><p>저 역시도 면접 준비 및 공부 겸 임성묵 개발자 님의 원 포스트를 공부하고, 해당 포스트에 요약 정리를 하고자 합니다.</p><p>혹시나 문제시 삭제할 예정이며, 해당 포스트가 너무 나도 훌륭하여, 개인적으로 면접 준비 및 공부 겸 요약 정리한 포스트이니, 서두에 먼저 출처를 밝히고 시작하겠습니다.</p><p>아래 임성묵 개발자 님의 원 포스트를 먼저 읽어 주시면 감사드리겠습니다. 본 포스트는 제가 이해한 바를 요약 정리한 포스트입니다.</p><p><br></p><p><br></p><h1><br></h1><h1>[ 카카오 엔터테인먼트 개발자 - 임성묵 개발자 님 ]</h1><p><br></p><h3><a href="https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42" rel="noopener noreferrer" target="_blank" style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><strong><em>https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42</em></strong></a></h3><p><br></p><p><br></p><h1><br></h1><h1>Rosch의 프로토타입 이론</h1><p><br></p><p>현실에 존재하는 것 중 가장 좋은 본보기를 원형( prototype )으로 선택한다.</p><p>인간은 사물을 분류할 때 자연스럽게 가장 유사성 높은 것 순서대로 등급을 매긴다는 의미로 볼 수 있습니다.</p><p>이렇게 분류했을 때 가장 높은 등급을 가진 녀석이 나올 텐데요, 이것이 바로 원형(prototype) 이다.</p><p><br></p><p>\'새\'를 예로 들어볼까요?</p><p><br></p><p>\'참새\'는 새의 범주를 대표할 만한 가장 전형적인 녀석입니다. 이 녀석을 \'원형(prototype)\'으로 간주하겠습니다.</p><p>\'타조\'는 전통적인 분류에선 같은 새가 되지만, 프로토타입 이론에서는 \'원형\'에서 가장 멀리 떨어진,</p><p>즉, \'비전형적인\' 녀석이 됩니다. 범주의 가장 끄트머리에 있는 녀석이 되는 거죠.</p><p><br></p><p>즉, 객체는 \'정의\'로 부터 분류되는 것이 아니라, 가장 좋은 보기(prototype, examplar)로부터 범주화된다고 합니다.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1667963680/myportfolioblogproject/chzr6tx0ahm9wofgiuhs.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><h1><br></h1><h1>문맥(Context)에 따라 \'범주\', 즉 \'의미\' 가 달라진다. ( 의미사용이론 )</h1><p><br></p><p>"같은 단어라 할지라도 누가 어떤 상황에서 접했냐"에 따라 의미가 달라진다는 것 입니다.</p><p>예를 들면, 아이가 생각하는 새의 범주에서 \'참새\'는 명확하게 새에 속하지만,</p><p>\'펭귄\'은 해당 범주에 속하지 못할 수도 있습니다. 아이가 생각할 땐, 펭귄이 매우 비전형적이기 때문이죠.</p><p><br></p><p>하지만, 조류학자가 생각할 때 \'참새\'와 \'펭귄\'은 명확하게 유사한 새의 범주에 속할 수 있습니다.</p><p>같은 단어여도 어떤 상황(누가, 어디서...)에서 접했나에 따라 범주는 크게 달라집니다.</p><p><br></p><p><br></p><h1><br></h1><h1>프로토타입(ProtoType)이론, 의미사용이론에 입각한 호이스팅, 클로져, 렉시컬 스코프, 실행 콘텍스트의 이해.</h1><p><br></p><h3><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>객체는 \'정의\'로 부터 분류되는 것이 아니라, 가장 좋은 보기(prototype, examplar)로부터 범주화 </em></strong><strong style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"><em>프로토타입(ProtoType)이론</em></strong>과 그에 파생되는 <strong style="color: rgb(255, 255, 0); background-color: rgb(230, 0, 0);"><em>의미사용이론</em></strong><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>인 "같은 단어라 할지라도 누가 어떤 상황에서 접했냐"에 따라 의미가 달라진다.</em></strong></h3><p>이 부분에 입각해서 호이스팅, 클로져 함수, 렉시컬 스코프, 실행 콘텍스트의 의미를 이해한다면, 이 부분은 더 이상 암기의 영역이 아니게 된다.</p><p><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">프로토타입(prototype) 이론에 입각해서 디자인된 자바스크립트(JavaScript)는 어쩔 수 없이 호이스팅 현상이 일어날 수 밖에 없고, 클로져, 렉시컬 스코프, 실행 콘텍스트라는 개념이 생길 수 밖에 없는 것이다.</span></p><p><br></p><p>즉, 자바스크립트(JavaScript) 코드에서 변수의 의미는 그 어휘적인 범위(Lexical Scope), 실행 문맥(Execution Context)에서의 의미가 된다.</p><p>그렇기 때문에, 동일 범위(어떠한 코드의 실행콘텍스트 내부의 렉시컬 스코프)의 모든 선언을 먼저 참고(호이스팅)해서, 해석하고 있는 코드의 실행콘텍스트 내외부의 환경 및 속한 변수의 관계를 정의를 먼저 할수 밖에 없는 것이다.</p><p>그에 따라 변수의 데이터 값이 달라지기 때문....</p><p>예시를 보자....</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">var</span> name = <span class="hljs-string">\'Kai\'</span>;\n<span class="hljs-title function_">init</span>(); <span class="hljs-comment">// init 실행문맥 생성. 내부 정의(name, displayName) 호이스팅</span>\n\n<span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>() {\n&nbsp; &nbsp; <span class="hljs-keyword">var</span> name = <span class="hljs-string">"Steve"</span>;\n&nbsp; &nbsp; <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayName</span>() {&nbsp;&nbsp;\n&nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name); <span class="hljs-comment">// 현재 실행문맥 내에 정의된게 없으니 outer 로 chain "Steve" 가 찍힘</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-comment">// var name = \'troll?\'; // 주석 해제되면 호이스팅</span>\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class="hljs-title function_">displayName</span>(); <span class="hljs-comment">// displayName 실행문맥 생성. 내부 정의 호이스팅.</span>\n}\n</pre><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1667965404/myportfolioblogproject/rmytio9xcjo4fwcgtqmn.gif" crossorigin="anonymous"></p><p><br></p><p>위의 코드를 실행을 해보면 같은 변수 name이 상황에 따라 console.log에 다르게 찍히기 때문에,</p><p>프로토타입 기반의 자바스크립트는 그 프로토타입 원리(원형보전, 의미사용이론)를 지키기 위해,</p><p>불가피하게 호이스팅 현상이 나타날 수 밖에 없고, 그에 따른 실행콘텍스트 내부의 렉시컬 스코프, 클로져 함수 개념이 생길 수 밖에 없는 것이다.</p><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>호이스팅을 통해서 실행콘텍스트 내부의 렉시컬 스코프의 모든 함수, 변수 선언을 먼저 자바스크립트 인터프리터가 해석한 뒤,</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>그 외부 실행 콘텍스트 상황과 비교하여, 내부 변수 데이터가 결정되고, 같게 혹은 다르게 결정될 수 밖에 없는 것이다.</em></strong></p><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>즉, 상황에 따라서 가장 가까운 prototype 원형의 렉시컬 스코프 범위의 변수 데이터를 따르는 것이다.</em></strong></p><p><br></p><p>이 자바스크립트(JavaScript)의 프로토타입(ProtoType) 원형 보존 이론과 상황과 문맥에 따라 변수의 데이터 및 의미가 달라지는 의미사용이론을 정확하게 이해했다면,</p><p>클로져(closure), 호이스팅(hoisting), 렉시컬 스코프(lexical scope), 실행콘텍스트(execution context), 동적으로 결정되는 this 개념들은 모두 이제 더 이상 단순히 외우는 영역이 아니라,</p><p>이해할 수 있는 영역이 될 것이다.</p><p><br></p><p>결국엔... prototype 이론 베이스로 설계된 JavaScript이기 때문에 저러한 기능들이 필요할 수 밖에 없는 것이다.</p><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>다시 한번, 자바스크립트에 대한 깊은 통찰력과 깊은 이해를 보여주신 카카오 엔터테인먼트 임성묵 개발자 님에게 감사를 드리며, </em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>해당 포스트는 임성묵 개발자 님의 본 포스트를 공부하고 요약한 포스티 임을 알려드립니다.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>자바스크립트로 개발하는 모든 개발자 분들이 이 임성묵 개발자 님의 포스트를 반드시 읽어보아야 한다고 생각합니다.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>말미에 다시 한번 좋은 포스트 글을 써주신 임성묵 개발자 님에게 감사를 드리며 또 한번 밑에 출처를 남깁니다.</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>감사드립니다!!! ^^ ( 본 요약포스트 향후 저작권 문제시 삭제토록 하겠습니다. ) </em></strong></p><h1><br></h1><p><br></p><h1>[ 카카오 엔터테인먼트 개발자 - 임성묵 개발자 님 ]</h1><p><br></p><h3><a href="https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42" rel="noopener noreferrer" target="_blank" style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><strong><em>https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42</em></strong></a></h3>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-11-09T03:57:41.950Z',
    updatedAt: '2022-11-09T04:20:37.488Z',
    __v: 0,
  },
  {
    _id: '638ecc9c7d980050320934d5',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1670300617/myportfolioblogproject/bvwivfp6qrdtbgmf4qsi.gif',
    title: 'OAuth 2.0 ( Open Authorization 2.0, OAuth2 )',
    text: '<h1>OAuth 2.0 (Open Authorization 2.0) 란?</h1><p><br></p><p>다양한 플랫폼 환경에서 인증 및 권한 부여를 위한 산업 표준 프로토콜을 말함.</p><p>위의 사진과 같이 구글, 페이스북, 카카오, 네이버 등 간편 로그인 기능을 제공해주는 기술은 OAuth 2.0 프로토콜에 기반을 두고 있다.</p><p><br></p><p><br></p><h1>OAuth 2.0 (Open Authorization 2.0) 등장배경?</h1><p><br></p><p>The third party Application ( 제 3자 응용 소프트웨어 앱 )에 나의 아이디와 비밀번호를 직접적으로 제공하고 싶지 않은 욕구가 첫번째임.</p><p>통상적으로 자기가 기억하기 쉬운 아이디, 비밀번호 하나를 여러 곳에서 쓰기 때문에, 이러한 개인정보를 여러 군데 입력하면 Fishing(피싱)</p><p>에 둔감해지고 해당 Application이 보안에 취약한지 안전한지 판단할 수 없기 때문에 Twitter 주도로 OAuth1.0이 등장하게 됨.</p><p><br></p><p><br></p><h1>OAuth 1.0 구조?</h1><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670301613/myportfolioblogproject/v031y0cf6hsiuxp6qaza.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><p><br></p><p><br></p><h1>OAuth 1.0 문제</h1><p><br></p><p>구현이 복잡하고 웹이 아닌 어플리케이션에서의 지원이 부족.</p><p>HMAC를 통한 암호화가 번거로움.</p><p>인증토큰(Access-Token)이 만료되지 않음.</p><p><br></p><p><strong><em># HMAC ( Hash-based Message Authentication Code )</em></strong></p><p>OAuth에서 Access-Token을 생성하고 검증, 인증하는 방법이다.</p><p><strong>메시지 인증 코드 ( Message Authentication Code, MAC )</strong><em>는 메시지의 인증에 쓰이는 정보(코드 혹은 토큰)이다.</em></p><p><em>메시지의 무결성 및 신뢰성을 보장하는 용도로 MAC을 사용한다. ( 인증에 필요한 데이터를 Hash화 하여 인증용 Token으로 변환 )</em></p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670302263/myportfolioblogproject/islvquktpvo8ykecpcpx.gif" crossorigin="anonymous"></p><p><br></p><p>위의 사진 HMAC 구조에서 Message 부분이 로그인 성공한 결과 사용자 아이디와 사용자 DB 고유 아이디로 구성되어 있다고 생각해보자.</p><p>위의 사진 서버에서 Key (Secret Key)로 Hash화 하여(암호화) MAC(Hash Value) 라는 하나의 토큰을 생성 클라이언트에 전달해주고,</p><p>클라이언트는 그 토큰 값을 저장( localstorage, cookie, session )하고 http 처리 요청 헤더에 bearer 뒤에 붙여주든, cookie 값으로 보내든,</p><p>session cookie 값으로 보내든, 백엔드 서버에서 이를 검증하여 논리 로직을 처리하는 식으로 보안이 이루어짐</p><p>( 나의 대다수 포트폴리오가 이런식으로 되어 있음 )</p><p><br></p><p>OAuth 2.0 에서도 위의 구조와 비슷하게 보안이 적용되는 것 같다.</p><p><br></p><p><br></p><h1>OAuth 2.0 에서 Token 이란?</h1><p><br></p><h3>- Access Token</h3><p>네이버, 페이스북, 트위터 등등 OAuth 2.0 기반의 로그인 요청이 절차가 정상적으로 마무리되면 클라이언트들에게 위의 암호화 방식대로</p><p>처리한 Hash화 된 Access Token이 발급 되어짐. 문자열 형태로 클라이언트들에게 Hash (암호)화 하여 발급 되기 때문에 직접적으로 아이디, 패스워드</p><p>등 사용하는 것이 아니라 암호화된 Hash Token을 사용하는 것이라 안전하다.</p><p><br></p><h3>- Refresh Token</h3><p>한번 발급 받은 Access Token은 사용 기한이 정해져 있기 때문에 기간이 지나 만료가 되면, 이 Refresh Token을 통해서,</p><p>새로운 Access Token을 발급 받게 된다. 그리고 최초 Access Token을 발급 받았을 때 Refresh Token도 동시에 발급 받게 된다.</p><p><br></p><p><br></p><h1>OAuth 2.0 4가지 인증 절차?</h1><p><br></p><h3>- Authorization Code Grant ( 권한 부여 승인 코드 방식 )</h3><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670305443/myportfolioblogproject/pnchukvs8vxjyoaizka2.gif" crossorigin="anonymous"></p><p><br></p><p><br></p><ul><li>권한 부여 승인을 위해 자체 생성한 Authorization Code 를 전달하는 방식으로 많이 쓰입니다.</li><li>보통 타사의 클라이언트에게 보호된 자원을 제공하기 위한 인증에 사용됩니다.</li><li>Refresh Token 사용 가능함</li><li>Access Token이 Authorization Server와 Client, Resource Server를 옮겨 다니면서 해커가 중간에 가로챌 확률이 높음</li></ul><p><br></p><p><br></p><h3>- Implicit Grant ( 암묵적 승인 방식 )</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670305568/myportfolioblogproject/rrft1zcy7j5bod1n5sp3.gif" crossorigin="anonymous"></p><p><br></p><ul><li>자격 증명을 안전하게 저장하기 힘든 클라이언트에게 최적화된 방식입니다.</li><li>앞서 소개한 권한 부여 승인 코드 없이 바로 Access Token 이 발급 됩니다.</li><li>Refresh Token 사용 불가능.</li><li>Access Token 이 URL을 통해 전달되므로 위험함 -&gt; Access Token의 만료 기간을 되도록 짧게 설정하여 위험을 줄여야 함.</li></ul><p><br></p><p><br></p><h3>- Resource Owner Password Credentials Grant ( 자원 소유자 자격 증명 승인 방식 )</h3><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670306091/myportfolioblogproject/qn21zlwcisskdkuwxcos.gif" crossorigin="anonymous"></p><p><br></p><ul><li>OAuth 제공자가 서비스하는 애플리케이션에서만 사용가능한 방식</li><li>단순히 username과 password 로 자격 증명하는 방식.</li><li>물론 Refresh Token 사용 못함.</li></ul><p><br></p><p><br></p><h3>- Client Credentials Grant( 클라이언트 자격 증명 승인 방식 )</h3><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670306220/myportfolioblogproject/dea8rgf2awi7158vbxuw.gif" crossorigin="anonymous"></p><p><br></p><ul><li>가장 간단한 방식으로, 클라이언트 자신이 관리하는 리소스 혹은 권한 서버에 해당 클라이언트를 위한 제한된 리소스 접근 권한이 설정되어 있는 경우 사용됩니다.</li></ul><p>            - 한 마디로 그냥 클라이언트 자체가 Resource Owner 인 경우를 뜻한다고 생각하면 됨.</p><ul><li>Refresh Token 을 사용할 수 없습니다.</li></ul><p><br></p><p><br></p><p><br></p><p><strong>&lt;출처 참고 자료&gt;</strong></p><p><a href="https://jongmin92.github.io/2019/12/23/Programming/hmac/" rel="noopener noreferrer" target="_blank">https://jongmin92.github.io/2019/12/23/Programming/hmac/</a></p><p><a href="https://showerbugs.github.io/2017-11-16/OAuth-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C" rel="noopener noreferrer" target="_blank">https://showerbugs.github.io/2017-11-16/OAuth-%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C</a></p><p><a href="https://velog.io/@wooyoung-tom/oauth" rel="noopener noreferrer" target="_blank">https://velog.io/@wooyoung-tom/oauth</a></p><p><br></p>',
    catName: 'Book / Learn',
    author: 'lse126',
    createdAt: '2022-12-06T05:01:16.665Z',
    updatedAt: '2022-12-06T08:17:02.310Z',
    __v: 0,
  },
  {
    _id: '6395bf657d9800503209350f',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1670757060/myportfolioblogproject/n3quola1t8us7cberojg.gif',
    title: 'React에 외부에서 만든 웹페이지 삽입',
    text: '<p>친구와 프로젝트를 진행하면서, 외부에서 만들어진 index.html ( VanillaJS Script + HTML + CSS 외부 Link 태그) 웹페이지를 리액트에 삽입하는 문제를 오래 고심한 적이 있음.</p><p>Script 파일이 포함된 외부 HTML 파일을 리액트 내에서 이식시키기 위한 작업이었다.</p><p><br></p><p>내가 기존에 가지고 있는 지식으로 그대로 innerHTML() 로 집어넣으면 오류가 발생하거나, Script 내용이 실행이 되지 않는 문제가 존재했었음.</p><p>아래 글은 그에 대한 해결책을 공유하고자 한다.</p><p><br></p><h3><strong><em>출처: </em></strong><a href="https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment" rel="noopener noreferrer" target="_blank"><strong><em>https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment</em></strong></a></h3><p><br></p><p>위의 mdn에서 나오는 documentFragment 라는 개념을 아직 완벽하게 파악을 한 것은 아니지만, 기존의 DOM에 속하지 않고,</p><p>부모 노드 없이 하나의 작은 HTML DOM을 만들고, 다 완성시킨 다음 DOM에 appendChild() 를 통해 추가하는 것이다.</p><p><br></p><p>즉, 문서조각(fragment)을 생성해 외부에서 수정한 후,&nbsp;처리가 완전히 끝난 다음에 실제 DOM에 추가하여, DOM 자주 업데이트 되는 부분을 줄여,</p><p>성능향상에 기여하는 문법인 것 같음,,,</p><p><br></p><p>어쨋든 해당 문제를 해결하기 위해선, 아예 리액트에서 분리 독립된 DOM으로 넣는 것이 해결책인 만큼,</p><p>useEffect 내부에서 createContextualFragment를 사용하여 리액트와 분리 독립 HTML 파일을 이식해보자.</p><p><br></p><p><br></p><pre class="ql-syntax" spellcheck="false">  <span class="hljs-keyword">const</span> [decoded, setDecoded] = useState&lt;<span class="hljs-built_in">string</span>&gt;();\n  <span class="hljs-comment">// decoded 는 HTML 문서가 문자열로 표현된 상태임.</span>\n\n  <span class="hljs-title function_">useEffect</span>(\n\t    <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> {\n\t      <span class="hljs-comment">// 리액트와는 분리 독립된 DOM으로서 HTML 파일 이식 코드</span>\n\t      <span class="hljs-keyword">const</span> range = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createRange</span>();\n\t      <span class="hljs-keyword">const</span> reportBox = reportRef.<span class="hljs-property">current</span>;\n\t      <span class="hljs-keyword">if</span> (reportBox) {\n\t        range.<span class="hljs-title function_">selectNode</span>(reportBox);\n\t        <span class="hljs-keyword">const</span> fragment = range.<span class="hljs-title function_">createContextualFragment</span>(decoded!);\n\t        reportBox.<span class="hljs-title function_">appendChild</span>(fragment);\n\t\n\t        <span class="hljs-comment">// script 적용 안되는 문제는 아래 코드로 해결. 하지만...</span>\n\t        <span class="hljs-comment">// 태그 이름으로 노드를 착고 for문으로 매번 찾아 적용하는 것이 느리고,</span>\n\t        <span class="hljs-comment">// 문자로 표현된 JavaScript 코드를 실행하는 함수인 eval()을 사용하는 것은</span>\n\t        <span class="hljs-comment">// 보안상 적절치 않기 때문에 아예 index.html 파일 안에 해당 script 문을 찾아서 넣고,</span>\n\t        <span class="hljs-comment">// ( index.html 파일 참고할 것!! )</span>\n\t        <span class="hljs-comment">// 아래 코드는 주석 처리함</span>\n\t\n\t        <span class="hljs-comment">// const scripts = reportBox.getElementsByTagName(\'script\');</span>\n\t        <span class="hljs-comment">// for (const script of scripts) {</span>\n\t        <span class="hljs-comment">//   window.eval(script.innerHTML);</span>\n\t        <span class="hljs-comment">// }</span>\n\t      }\n\t    }, [decoded]),\n\t    [decoded]\n\t  );\n\t\n\t  <span class="hljs-keyword">return</span> (\n\t    <span class="hljs-tag">&lt;<span class="hljs-name">Container</span>\n\t      <span class="hljs-attr">ref</span>=<span class="hljs-string">{reportRef</span> <span class="hljs-attr">as</span> <span class="hljs-attr">any</span>}\n\t      // <span class="hljs-attr">dangerouslySetInnerHTML</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">__html:</span> `${<span class="hljs-attr">decoded</span>}` }}\n\t    &gt;&lt;/<span class="hljs-name">Container</span>&gt;</span>\n\t  );\n\t};\n</pre>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2022-12-11T11:30:45.030Z',
    updatedAt: '2023-01-25T15:41:29.501Z',
    __v: 0,
  },
  {
    _id: '6395dcae7d98005032093521',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1670765674/myportfolioblogproject/goiltncquzu67tizm8pq.gif',
    title: 'JavaScript 클래스와 객체',
    text: '<pre class="ql-syntax" spellcheck="false"><span class="hljs-comment">// 부모 클래스</span>\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {\n&nbsp; <span class="hljs-comment">// private property는 오직 클래스 안에서만 사용, 변경이 가능함.</span>\n&nbsp; <span class="hljs-comment">// 외부에서 접근이 불가능함.</span>\n&nbsp; #secretAge;\n&nbsp; <span class="hljs-keyword">static</span> animal = <span class="hljs-string">\'Human being\'</span>;\n\n&nbsp; <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, id</span>) {\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_id</span> = id;\n\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.#secretAge = <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-number">2</span>;\n&nbsp; &nbsp; <span class="hljs-comment">// this.speak = this.speak.bind(this);</span>\n&nbsp; }\n\n&nbsp; <span class="hljs-title function_">speak</span>() {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.name}</span>: Hello!!`</span>;\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">static</span> <span class="hljs-title function_">speakAnimal</span>() {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">`I am <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.animal}</span> with the freedom!!`</span>;\n&nbsp; }\n\n&nbsp; <span class="hljs-comment">// getter와 setter 사용이유는 객체 내의 어떠한 필드 값이 잘못할당 되었을때 예외처리하고,</span>\n&nbsp; <span class="hljs-comment">// 에러를 일으키기 위해 사용함. setter로 논리로직을 작성하고, getter 해당 변수를 확인할 수 있는 것이다.</span>\n&nbsp; <span class="hljs-keyword">get</span> <span class="hljs-title function_">id</span>() {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_id</span>;\n&nbsp; }\n\n&nbsp; <span class="hljs-keyword">set</span> <span class="hljs-title function_">id</span>(<span class="hljs-params">value</span>) {\n&nbsp; &nbsp; <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-number">10</span>) {\n&nbsp; &nbsp; &nbsp; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">\'10이상 id 금지!!\'</span>);\n&nbsp; &nbsp; } <span class="hljs-keyword">else</span> {\n&nbsp; &nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">_id</span> = value;\n&nbsp; &nbsp; }\n&nbsp; }\n}\n\n<span class="hljs-comment">// 자식 클래스 (부모 클래스로부터 상속 받음)</span>\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">Developer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> {\n&nbsp; <span class="hljs-comment">// 부모 클래스 파마미터까지 다 super()로 추가해주어야함</span>\n&nbsp; <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, id, job</span>) {\n&nbsp; &nbsp; <span class="hljs-variable language_">super</span>(name, age, id);\n&nbsp; &nbsp; <span class="hljs-comment">// 자식 클래스 파마메터</span>\n&nbsp; &nbsp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job;\n&nbsp; }\n\n&nbsp; <span class="hljs-title function_">speak</span>() {\n&nbsp; &nbsp; <span class="hljs-comment">// 부모클래스 speak() 함수와 다름.</span>\n&nbsp; &nbsp; <span class="hljs-comment">// 다른 코드 내용으로 overriding함.</span>\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-variable language_">this</span>.name}</span>: Hello!!. My Job is <span class="hljs-subst">${<span class="hljs-variable language_">this</span>.job}</span>!!`</span>;\n&nbsp; }\n}\n\n\n<span class="hljs-comment">// 기본 객체 개념</span>\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">Leo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">\'Leo\'</span>, <span class="hljs-number">30</span>, <span class="hljs-number">1</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-property">name</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-property">age</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-title function_">speak</span>());\n\n\n<span class="hljs-comment">// getter와 setter</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-property">id</span>);\n<span class="hljs-keyword">try</span> {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((<span class="hljs-title class_">Leo</span>.<span class="hljs-property">id</span> = <span class="hljs-number">11</span>));\n} <span class="hljs-keyword">catch</span> (error) {\n&nbsp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);\n}\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-property">id</span>);\n\n\n<span class="hljs-comment">// private 변수 호출</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-property">secretAge</span>);\n<span class="hljs-comment">// undefined</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>.<span class="hljs-property">secretAge</span> + <span class="hljs-number">4</span>);\n<span class="hljs-comment">// NaN</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span>);\n\n\n<span class="hljs-comment">// static 변수와 메서드는 객체 인스턴스로 사용할 수 없음.</span>\n<span class="hljs-comment">// 클래스 명으로 접근하여 사용.</span>\n<span class="hljs-comment">// 어떤 객체든 상관없이 공통된 모든 객체에 같은 프로퍼티,</span>\n<span class="hljs-comment">// 메서드가 필요할 떄 사용하면 메모리 줄일 수 있음.</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">animal</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-title function_">speakAnimal</span>());\n\n\n<span class="hljs-comment">// 부모 클래스 Person으로부터 상속받은 Developer 인스턴스화</span>\n<span class="hljs-keyword">const</span> developer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Developer</span>(<span class="hljs-string">\'Leo\'</span>, <span class="hljs-number">30</span>, <span class="hljs-number">1</span>, <span class="hljs-string">\'Developer\'</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(developer.<span class="hljs-property">name</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(developer.<span class="hljs-property">age</span>);\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(developer.<span class="hljs-property">_id</span>);\n<span class="hljs-comment">// 오버라이딩: 자식클래스가 부모클래스를 상속받으면서 선언될 때,</span>\n<span class="hljs-comment">// 부모클래스의 프로퍼티와 메서드를 다시 새롭게 정의하여 덮어 씌우는 것.</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(developer.<span class="hljs-title function_">speak</span>());\n\n\n<span class="hljs-comment">// Class Checking: instanceof</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(developer <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Developer</span>); <span class="hljs-comment">// true</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(developer <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <span class="hljs-comment">// true</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Developer</span>); <span class="hljs-comment">// false</span>\n<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Leo</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>); <span class="hljs-comment">// true</span>\n</pre><p><br></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>자바스크립트 클래스와 객체 기본 개념</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>생성자 함수 역할</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>Getter와 Setter의 필요성</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>Private Property 활용법</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>Static Property and Methods 함수의 활용법과 필요성</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>클래스 상속 ( Inheritance ) 에 대하여</em></strong></p><p><strong style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);"><em>class checking: instanceof</em></strong></p><p><br></p><p>위의 개념에 대해서 스스로 연구해보면서 구현해본 코드임.</p><p>위의 코드 순차적으로 하나 하나 따라 하다보면 자바스크립트 클래스 활용방법이 이해가 될거임.</p><p>물론 그전에 JavaScript Prototype 이론에 대해서 충분히 알고 있어야함. ^^</p>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2022-12-11T13:35:42.128Z',
    updatedAt: '2023-01-04T10:08:35.471Z',
    __v: 0,
  },
  {
    _id: '639950177d9800503209353a',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1670991124/myportfolioblogproject/ytdgb3jrtzz94ke8xkgy.gif',
    title: 'AWS, 클라이언트, 백엔드 연동하기 ( Feat. Access Denied!! 에러 )',
    text: '<h3>클라이언트 React - AWS 연동 연습</h3><p><br></p><p>aws-sdk 라이브러리 모듈을 받아서 파일 get, post, put, delete 요청을 처리해보았음.</p><p>아직 delete 요청을 구현하진 않았지만 곧 할 예정임.</p><p><br></p><p><a href="https://github.com/BVBFD/AWS-S3-React" rel="noopener noreferrer" target="_blank"><strong>h<em>ttps://github.com/BVBFD/AWS-S3-React</em></strong></a></p><p><br></p><p><br></p><h3>백엔드 NodeJS - AWS 연동 연습</h3><p><br></p><p>NodeJS에서 aws-sdk, @aws-sdk/client-s3, multer, multer-s3 모듈을 활용하여,</p><p>get, post, put, delete 요청을 처리해보았음.</p><p><br></p><p><a href="https://github.com/BVBFD/nodejs-aws-s3" rel="noopener noreferrer" target="_blank"><strong><em>https://github.com/BVBFD/nodejs-aws-s3</em></strong></a></p><p><br></p><p><br></p><h3>cf) NodeJS 백엔드 서버에서 파일 제거 기능 동작시 Access Denied 오류 해결</h3><p><br></p><p>지난번 React Client - aws-sdk 연동 구현 때 깃허브에 실수로 API 액세스 Key가 노출되었던 적이 있는데,</p><p>AWS 감사하게도 Key가 자동으로 노출된 것을 알고 일부 권한에 아래와 같이 제한을 주었음.</p><p><br></p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1670991835/myportfolioblogproject/gkw0kbhofxo1pl7gok1d.gif" crossorigin="anonymous"></p><p><br></p><p>그 결과 get, post, put 요청은 다 정상작동 되었지만, 이상하게 delete요청만 실행이 안되는 access denied 오류가 발생하였던 것임.</p><p>이것을 모르고 버킷 정책 설정, 권한 수동 설정 및 IAM 연결 등등 이상한 짓을 2일 동안 한 것 같다.</p><p>다행히 지금에서야 오류를 찾아서 다행이다.</p><p><br></p><p>delete 기능을 정상 작동 시키려면, 위의 권한을 삭제하고,</p><p>다시 새로운 AccessKey, SecretKey를 발급 받아 실행시켜 보니delete 기능이 정상 작동하는 것을 확인하여,</p><p>블로그에 기록 삼아 적어둔다.</p>',
    catName: 'Back-End',
    author: 'lse126',
    createdAt: '2022-12-14T04:24:55.223Z',
    updatedAt: '2023-01-04T10:07:50.597Z',
    __v: 0,
  },
  {
    _id: '63d4ad1b2e757991f51cf24a',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1674879152/myportfolioblogproject/ru1aebvskgeub4np6tgg.gif',
    title: 'NextJS 기본 개념 정리',
    text: '<p>NextJS는 CSR( Client Side Rendering ) 기반의 React로 만들어진 SSR( Server Side Rendering ) 기반의 프레임워크이다.</p><p>일단 NextJS는 CSR로 대표하는 React 보다 더 나은 성능과 SEO를 위해서 모든 페이지를 미리 렌더링한다. <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>( Pre-render )</em></strong></p><p><br></p><p><br></p><h1>Pre-Render</h1><p>NextJS에서 이 Pre-render 방식에는 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>SSG(Static Site Generator)</em></strong>와 <strong style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);"><em>SSR(Server Side Rendering)</em></strong>로 나뉜다. </p><p>이 둘의 차이와 활용은 뒤에 다시 정리해보도록 하겠다.</p><p><br></p><h3>SSG : HTML이 빌드 시 최초 서버에서 생성되고, 최초 생성된 HTML이 지속적으로 재사용됨.</h3><h3>SSR : HTML이 각 요청에 대해서 서버에서 생성됨.</h3><p><br></p><p><br></p><h1>Hydration</h1><p>Hydration은 서버가 사전 렌더링된 HTML 파일을 전송한 후, 번들링 모듈화된 JS 파일을 클라이언트에 전송.</p><p>클라이언트에서 서버에서 사전 렌더링된 HTML 파일과 번들링된 JS 파일을 매칭시켜주는 과정을 Hydration이라고 함.</p><p>아래 그림을 통해서 ReactJS와 NextJS 구동방식 차이점을 확인해보자.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1674880250/myportfolioblogproject/y7831sr9irpi9bftjvwp.gif" crossorigin="anonymous"></p><p>위와 같이 NextJS는 서버에서 미리 HTML을 구성해서 클라이언트에 선제적으로 전송.</p><p>그리고 나서 JS파일을 클라이언트에 전송해주고, 이를 서로 매칭시켜주는 Hydration 과정을 거친다.</p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1674880275/myportfolioblogproject/ja33mtl0rdlqblbkvntx.gif" crossorigin="anonymous"></p><p>반면 ReactJS는 JSX, TSX 파일을 서버로부터 전송을 받고, 그때서야 클라이언트에서 HTML파일 만들고, JS파일 Hydration 과정을 거친다. </p><p>그래서 로딩과정이 굉장히 길며, SEO에 매우 불리함.  </p><p>React에서 SEO를 위해 메타태그를 수정하기 위해서는 자체 사전 렌더링을 구현하거나,</p><p>사전 렌더링 모듈을 활용하여 SEO 최적화를 시켜야함.</p><p><br></p><p>하지만, NextJS는 기본적으로 HTML 파일을 서버에서 구성하고, 클라이언트에서 이를 사전렌더링하기 때문에,</p><p>동적인 메타태그 수정이 가능해짐.</p><p><br></p><p><br></p><h1>외부 데이터 가지고 오는 경우</h1><p><br></p><h3><span style="background-color: rgb(255, 255, 0); color: rgb(230, 0, 0);">getServerSideProps </span></h3><p>서버사이드렌더링으로 서버에서 HTML파일을 사전 렌더링할때, </p><p>서버에서 외부 데이터를 받아오는 JS과정도 수행하여 HTML파일 반영하여 클라이언트에 그 HTML파일 보내는 것을 말함.</p><p>요청 시 외부 데이터를 가져와야 하는 페이지를 미리 렌더링해야만 하는 경우에만 사용.</p><p>HTML 파일을 사전 렌더링하는 것도 서버에 부담인데, 외부 데이터 파일로 서버에서 불러오게 하는건 서버에 무리줄 수도 있기 때문에 신중하게 사용이 필요.</p><p>외부데이터는 클라이언트에서 받아오게 하는 것을 고려해야함. </p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params">{ data }</span>) {\n  <span class="hljs-comment">// Render data...</span>\n}\n\n<span class="hljs-comment">// SSR</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getServerSideProps</span>(<span class="hljs-params">context</span>) {\n  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`https://.../data`</span>)\n  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()\n\n  <span class="hljs-keyword">return</span> { <span class="hljs-attr">props</span>: { data } }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Page</span>\n</pre><p><br></p><p><br></p><h3><span style="color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);">getStaticProps </span></h3><p>정적 페이지 생성 방식과 유사함. SSG와 마찬가지로 빌드시 서버에서 HTML파일을 사전 렌더링하지만, </p><p>getStaticProps를 사용하면 빌드 시에만 서버에서 외부데이터를 가지고 오게되고 JSON으로 저장하여 고정적으로 사용하는 것.</p><p>빌드 후에도 고정되는 내용을 보여주는 페이지에 적합함.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Blog</span>(<span class="hljs-params">{ posts }</span>) {\n  <span class="hljs-keyword">return</span> (\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\n      {posts.map((post) =&gt; (\n        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>{post.title}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      ))}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  )\n}\n\n<span class="hljs-comment">// SSG</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getStaticProps</span>(<span class="hljs-params">context</span>) {\n  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">\'https://.../posts\'</span>)\n  <span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">await</span> res.<span class="hljs-title function_">json</span>()\n\n  <span class="hljs-keyword">return</span> {\n    <span class="hljs-attr">props</span>: {\n      posts,\n    },\n  }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Blog</span>\n</pre><p><br></p><p><br></p><h1>Dynamic Component Import</h1><p>dynamic하게 처음 보여줄 필요가 없는 컴포넌트는 import 하지 않게 함으로써, 초기화면 렌더링 속도 상승에 기여하는 문법이다.</p><p>주의할 점음 페이지에 진입했을 때 맨 처음 보이는 컴포넌트는 사용하면 안됨.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, { useState } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;\n<span class="hljs-keyword">import</span> dynamic <span class="hljs-keyword">from</span> <span class="hljs-string">"next/dynamic"</span>;\n\n<span class="hljs-keyword">const</span> <span class="hljs-title class_">DynamicComponent</span> = dynamic&lt;{ <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> }&gt;(<span class="hljs-function">() =&gt;</span>\n  <span class="hljs-title function_">import</span>(<span class="hljs-string">"./DynamicComponent"</span>)\n);\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">Index</span> = () =&gt; {\n  <span class="hljs-keyword">const</span> [nowTab, setNowTab] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);\n\n  <span class="hljs-keyword">return</span> (\n    <span class="hljs-tag">&lt;&gt;</span>\n      {nowTab === 0 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>0 tab<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>}\n      {nowTab === 1 &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">DynamicComponent</span> <span class="hljs-attr">num</span>=<span class="hljs-string">{nowTab}</span> /&gt;</span>}\n    <span class="hljs-tag">&lt;/&gt;</span>\n  );\n};\n</pre><p><br></p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2023-01-28T05:05:31.763Z',
    updatedAt: '2023-01-28T05:05:31.763Z',
    __v: 0,
  },
  {
    _id: '63d7837f2e757991f51cf48c',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1675064759/myportfolioblogproject/woexkahrxbbpxibgir89.gif',
    title: 'NextJS ( SSR: 서버 사이드 렌더링 ) - SEO',
    text: '<h1>SEO ( Search Engine Optimization ) 란?</h1><p>검색엔진 최적화라는 의미임. 말 그대로 네이버, 구글 같은 검색 엔진의 스크롤러가 사이트 관련 메타 정보 및 HTML 태그 정보를 통해 웹사이트 노출을 결정함.</p><p>그래서 프론트엔드 개발자라면 기본적으로는 meta, link 태그 각 페이지 별로 설정. 그리고, 최대한 시멘틱 태그 구조를 준수하면서 HTML 태그 설정 필요.</p><p>물론 SEO 전략에는 meta, link, 시멘틱 태그 구조 외에도 찾아보면 더 많이 해야 할 일이 있겠지만, 프론트엔드 개발자라면 기본적인 SEO 전략인 meta, link 태그 페이지 별로 설정.</p><p>그리고 시멘틱 태그 구조 준수, SNS에 특화된 OG 태그 설정과 같은 기본적인 SEO 처리는 할 줄 알아야 한다고 생각함.</p><p><br></p><p>cf) 시멘틱 태그 구조?? 아래 참고할 것</p><p><a href="https://www.lsevina126.asia/post/6349bf8f7d98005032093138" rel="noopener noreferrer" target="_blank"><strong><em>https://www.lsevina126.asia/post/6349bf8f7d98005032093138</em></strong></a></p><p><br></p><p><br></p><h1>CSR( Client Side Rendering ) 기반의 React 에서 SEO 처리 문제점</h1><p>물론 React를 활용하여 포스트, 기사와 같이 항상 동적인 페이지를 처리해야 하는 경우. React에서는 이러한 동적인 페이지 SEO 최적화가 어려움.</p><p>물론 React를 활용하여 만든 프로젝트가 정적인 페이지로 구성이 되어 있는 경우, react-helmet-async, react-snap 등의 모듈을 통해서 각각 정적인 페이지의 index.html 파일을 빌드할 때 만들게하여,</p><p>검색 엔진 스크롤러가 그 index.html 파일을 먼저 참고하게 끔 할 수 있다. 하지만, 수십, 수백 개의 페이지가 존재하는 동적인 페이지인 경우 이를 일일이 다 만들 순 없는 노릇임. </p><p>( 결국, React 자체적으로 SSR, 서버사이드 렌더링 구현해야하는 복잡함.. )</p><p><br></p><p>검색 엔진 스크롤러가 React의 HTML의 메타, 링크 태그를 잘 참조하지 못하는 이유는 기본적으로 React는 SPA( Single Page Application )이다.  </p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge"</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>__TITLE__<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"__DESCRIPTION__"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:title"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"Blog Project with React and NodeJS"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:url"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"https://www.lsevina126.asia"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"website"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:site_name"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"Blog Project for lsevina126"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"og:image"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"%PUBLIC_URL%/Logo-big.png"</span> /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span>\n&nbsp; &nbsp; <span class="hljs-attr">property</span>=<span class="hljs-string">"og:description"</span>\n&nbsp; &nbsp; <span class="hljs-attr">content</span>=<span class="hljs-string">"Blog Project for lsevina126 with React and NodeJS"</span>\n&nbsp; /&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"canonical"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://www.lsevina126.asia"</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"root"</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">&lt;!-- 이안에 각 페이지에 해당하는 jsx, tsx 등등 js파일 불러와서, &nbsp;--&gt;</span>\n&nbsp; &nbsp; <span class="hljs-comment">&lt;!-- client가 그 안에 있는 html 파일을 렌더링하고 js 문법과 hydration을 진행함. --&gt;</span>\n    \n    <span class="hljs-comment">&lt;!-- 최초 이 index.html 전체 페이지 하나를 로드한 후, 페이지 이동 시 jsx, tsx 모듈들을 서버로 부터 로드해서  --&gt;</span>\n    <span class="hljs-comment">&lt;!-- 페이지 이동 시 마다, 서버로부터 새로운 HTML 파일 페이지를 불러오지 않고  --&gt;</span>\n    <span class="hljs-comment">&lt;!-- 필요한 부분만 화면을 동적으로 표현하는 것,  --&gt;</span>\n&nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</pre><p><br></p><h3>즉, SPA 란?</h3><p>단어 의미대로 이 index.html 포함한 최초 한번 전체 페이지를 먼저 로드한 후, jsx, tsx 파일만 로드해서 동적으로 표현함.</p><p>즉 CSR, 클라이언트 사이드 렌더링인 것이다.</p><p><br></p><h3>반면 MPA 란?</h3><p>애초에 페이지 이동시마다 전체 HTML 렌더링 파일을 서버에서 받아서 처음부터 다시 로딩하는 전통적인 방식임. </p><p><br></p><p>위의 React의 index.html 파일 구조를 보면 최초 페이지 로드 시 head 태그 안에 있는 각종 웹사이트 메타, 링크 태그 정보가 최초 로드한 후,</p><p>페이지 이동 시에는 그 해당 페이지 정보를 반영하기에 상당히 힘든 구조임. 왜냐하면, 애초에 검색엔진 스크롤러는 최초 렌더링된 HTML 파일을 참고하는 경우가 많고,</p><p>React는 jsx, tsx 라는 JavaScript 모듈을 불러와서 html을 만들고 필요시 head 태그 안의 내용을 변경할 수 있는 구조임.</p><p>문제는 검색엔진 스크롤러가 JavaScript 코드를 참고하지 않는 다는 것임.</p><p>그래서 SEO 전략시 React의 경우 이미 정해진 index.html 파일 안의 head 태그 안에 있는 정보만 참고할 수 밖에 없는거임.</p><p>물론 최근 구글 검색엔진 스크롤러는 JavaScript 파일도 참고하게끔 되었다지만, 페이스북, 트위터, 카카오톡 등등은 아직 그렇게 까지는 안되어 있음.</p><p><br></p><p>이러한 이유로 NextJS 서버사이드 렌더링 프레임워크를 쓰는 이유가 되었음.</p><p>서버사이드 렌더링의 경우 애초에 페이지 로드, 이동 시 렌더링된 HTML 파일을 서버로 부터 받고, 이를 화면에 띄우고,</p><p>JavaScript 코드 Hydration 과정을 거치기에 SEO에 훨씬 더 유리함.</p><p><br></p><p><br></p><h1>SSR( Server Side Rendering ) 기반의 NextJS로 SEO 최적화</h1><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { publicRequest } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../config\'</span>;\n<span class="hljs-keyword">import</span> <span class="hljs-title class_">Head</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/head\'</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">GetServerSidePropsContext</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'next\'</span>;\n\n\n<span class="hljs-keyword">const</span> <span class="hljs-title function_">PostPage</span> = (<span class="hljs-params">{ ps }: <span class="hljs-built_in">any</span></span>) =&gt; {\n&nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{styles.postPage}</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; {/* Head */}\n       <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; {/* SEO */}\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>{ps.title}<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\'viewport\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">\'width=device-width, initial-scale=1\'</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">rel</span>=<span class="hljs-string">\'icon\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">href</span>=<span class="hljs-string">\'https://res.cloudinary.com/dewa3t2gi/image/upload/v1674981291/qyeb9rvghfair1pkgqud.png\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\'description\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">{ps.title}</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">\'og:title\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">{ps.title}</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">property</span>=<span class="hljs-string">\'og:url\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">content</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">https:</span>//<span class="hljs-attr">www.lsevina126.asia</span>/<span class="hljs-attr">post</span>/${<span class="hljs-attr">ps.title</span>}/${<span class="hljs-attr">ps._id</span>}`}\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">\'og:type\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">\'website\'</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">\'og:site_name\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">{ps.title}</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">\'og:image\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">{ps.imgUrl}</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">property</span>=<span class="hljs-string">\'og:description\'</span> <span class="hljs-attr">content</span>=<span class="hljs-string">{ps.title}</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">rel</span>=<span class="hljs-string">\'canonical\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">href</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">https:</span>//<span class="hljs-attr">www.lsevina126.asia</span>/<span class="hljs-attr">post</span>/${<span class="hljs-attr">ps.title</span>}/${<span class="hljs-attr">ps._id</span>}`}\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; {/* SEO */}\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span>\n     {/* Head */}\n&nbsp; &nbsp; &nbsp; \n      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{styles.postBox}</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {/* View */}\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n&nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n )\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">PostPage</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getServerSideProps</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">ctx: GetServerSidePropsContext</span>) =&gt; {\n&nbsp; <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> publicRequest.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/posts/<span class="hljs-subst">${ctx.query.id}</span>`</span>);\n\n&nbsp; <span class="hljs-keyword">return</span> {\n&nbsp; &nbsp; <span class="hljs-attr">props</span>: {\n&nbsp; &nbsp; &nbsp; <span class="hljs-attr">ps</span>: res.<span class="hljs-property">data</span>,\n&nbsp; &nbsp; },\n&nbsp; };\n};\n</pre><p><br></p><p>getServerSideProps를 통해서 해당 post 데이터를 서버 측에서 HTTP 통신을 통해 받아오고,</p><p>이를 활용하여 렌더링된 HTML 파일을 만들어서 브라우저에 전송하게 끔하는 코드임.</p><p><br></p><p><a href="https://www.lsevina126.asia/post/63d4ad1b2e757991f51cf24a" rel="noopener noreferrer" target="_blank">https://www.lsevina126.asia/post/63d4ad1b2e757991f51cf24a</a></p><p>React로 구성한 위의 페이지를 로컬 상으로 NextJS를 이용해 리팩토링하여, </p><p>ngrok 프로그램을 통해서 public url을 부여하여 metapreveiw 테스트를 진행해본 결과..</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1675068136/myportfolioblogproject/o0betxmybhbxxqxrvcrs.gif" crossorigin="anonymous"></p><p><br></p><p>위와 같이 잘 뜨는 것을 확인해볼 수 있음.</p><p>( 향후 SEO 전략에 대해서 더 알게 되면 추가할 예정 )</p>',
    catName: 'Front-End',
    author: 'lse126',
    createdAt: '2023-01-30T08:44:47.733Z',
    updatedAt: '2023-01-30T08:44:47.733Z',
    __v: 0,
  },
  {
    _id: '63d78a392e757991f51cf49d',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1675069858/myportfolioblogproject/kr73nhpm9aqm3u0swxb3.gif',
    title: '정규표현식 문법 기록해놓기',
    text: '<h1>&amp;*-Regex-*&amp;</h1><p><br></p><h3>"/apple/gm"</h3><h3>"/apple/i"</h3><p><br></p><p>" i " - Ignore Case : 대소문자를 구별하지 않고 검색한다.</p><p>" g " - Global : 문자열 내의 모든 패턴을 검색한다.</p><p>" m " - MultiLine : 문자열의 행이 바뀌더라도 검색을 계속한다.</p><p>" s "&nbsp;:&nbsp;​(모든 문자 정규식)이 개행 문자 \\n도 포함하도록</p><p>" u " - unicode : 유니코드 전체를 지원</p><p>" y " - sticky : 문자 내 특정 위치에서 검색을 진행하는 ‘sticky’ 모드를 활성화</p><p><br></p><p><br></p><h1>***Groups and Ranges***</h1><p>" | "&nbsp;-&nbsp;또는</p><p>" () "&nbsp;-&nbsp;그룹</p><p>" [] "&nbsp;-&nbsp;문자셋, 괄호 안의 어떤 문자든</p><p>" [^] "&nbsp;-&nbsp;부정 문자셋, 괄호 안의 어떤 문자가 아닐 때</p><p>" (?:) "&nbsp;-&nbsp;찾지만 기억하지는 않음</p><p><br></p><p><br></p><h1>***Quantifiers***</h1><p>" ? " - 없거나 있거나 ( zero or one )</p><p>" * " - 없거나 있거나 많거나 ( zero or more )</p><p>" + " - 하나 또는 많이 ( one or more )</p><p>" {n} " - n번 반복</p><p>" {min,} " - 최소</p><p>" {min,max} " - 최소, 그리고 최대</p><p><br></p><p><br></p><h1>***Boundary Type***</h1><p>" \\b " - 단어 경계</p><p>" \\B " - 단어 경계가 아님</p><p>" ^ " - 문장의 시작</p><p>" $ " - 문장의 끝</p><p><br></p><p><br></p><h1>***Character Classes***</h1><p>" \\ " - 특수 문자가 아닌 문자</p><p>" . " - 어떤 글자 ( 줄바꿈 문자 제외 )</p><p>" \\d " - digit 숫자 문자</p><p>" \\D " - digit 숫자 아닌 문자</p><p>" \\w " - word 문자</p><p>" \\W " - word 문자 아님</p><p>" \\s " - space 공백</p><p>" \\S " - space 공백 아님</p><p><br></p><h3>&lt;출처&gt;</h3><h3><a href="https://www.youtube.com/watch?v=t3M6toIflyQ&amp;t=786s" rel="noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=t3M6toIflyQ&amp;t=786s</a></h3>',
    catName: 'JavaScript',
    author: 'lse126',
    createdAt: '2023-01-30T09:13:29.273Z',
    updatedAt: '2023-02-02T07:13:47.004Z',
    __v: 0,
  },
  {
    _id: '63dc68c2059244411a573754',
    imgUrl:
      'https://res.cloudinary.com/dewa3t2gi/image/upload/v1675388015/myportfolioblogproject/cdbcwdif837izwwxjyex.gif',
    title: 'NextJS의 SSR 서버사이드 렌더링 최적화 여정기',
    text: '<p>React로 구성된 해당 기술 블로그 프로젝트를 SEO 검색엔진 최적화 및 SSR 서버사이드 렌더링 연습의 필요성 때문에,</p><p>NextJS로 만들면서 적용했던 SSR 서버사이드 렌더링 최적화 방법에 대해 기록.</p><p><br></p><p><br></p><h3><span class="ql-size-large">- NextJS 외부 Scripts 적용 전략</span></h3><p>일단 Script Tag 속성인 defer와 async에 대해서 알아봐야했음.</p><p>script 태그에는 속성으로 async와 defer가 존재한다. 외부에서 JavaScript 파일을 가져올 때 사용하게 되는 속성임.</p><p>그래서 가뜩이나 서버에서 HTML 렌더링을 진행하는 서버사이드렌더링 NextJS의 경우 defer와 async를 사용하면,</p><p>초기 렌더링 시간단축 효과를 어느정도 볼수 있다. ( 극적인 속도 향상은 아니지만, 그래도 적용이 필요함 )</p><p><br></p><p>말로 주절주절 설명하여 이해하는 것보다 그림으로 이해하는 것이 훨씬 빨랐음.</p><p>나도 아래의 그림을 보고 바로 이해하였음.</p><p><br></p><p><img src="https://res.cloudinary.com/dewa3t2gi/image/upload/v1675388590/myportfolioblogproject/crvgivpvfegplc1fdlpo.gif"></p><p><br></p><p>그냥 속성 설정없이 script 태그만 쓴다면 HTML을 parsing하는 과정 중, script 태그를 만나면,</p><p>그 외부 script 파일을 다운로드하고 실행완료 시키는 시점까지 HTML parsing은 중단되게 된다.</p><p>HTML 파일을 서버에서 빨리 parsing하고 초기 HTML 화면을 브라우저에게 전달해야 하는 SSR 서버사이드 렌더링 시점에선 가장 최악의 방법임.</p><p><br></p><p>async 속성을 쓰게되면, 일단 HTML parsing을 진행하게 되고 script 태그를 만나면, 백그라운드에서 script 다운로드가 진행되게된다.</p><p>그 외부 script를 다운로드하는 과정 중에도 HTML parsing은 멈추지 않는다. 하지만 다운로드를 완료하게 되면, script 실행해야 할때는 HTML parsing은 멈추게 됨.</p><p><br></p><p>하지만 defer 속성을 쓰게되면, async와 마찬가지고 외부 script 파일을 다운로드하면서도 HTML parsing은 멈추지 않는다.</p><p>그리고 HTML parsing이 완료되고 난 뒤, 다운로드 완료된 script 파일을 실행하게 된다.</p><p><br></p><p>SSR 서버사이드렌더링 기반으로 하는 NextJS 같은 경우 어떠한 경우에서도 초기 렌더링될 때는 HTML parsing을 멈추지 말아야 한다.</p><p>그래서 개인적인 판단에 아래와 같이 외부 script 태그에 defer 속성을 적용해주는 것이 적절하다고 판단했었음.</p><p><br></p><p><br></p><h3><strong><em>*_document.tsx</em></strong></h3><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Document</span>, { <span class="hljs-title class_">Html</span>, <span class="hljs-title class_">Head</span>, <span class="hljs-title class_">Main</span>, <span class="hljs-title class_">NextScript</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'next/document\'</span>;\n\n<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDocument</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Document</span> {\n&nbsp; <span class="hljs-title function_">render</span>() {\n&nbsp; &nbsp; <span class="hljs-keyword">return</span> (\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Html</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Head</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">rel</span>=<span class="hljs-string">\'icon\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">href</span>=<span class="hljs-string">\'https://res.cloudinary.com/dewa3t2gi/image/upload/v1674981291/qyeb9rvghfair1pkgqud.png\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">rel</span>=<span class="hljs-string">\'stylesheet\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">href</span>=<span class="hljs-string">\'https://fonts.googleapis.com/icon?family=Material+Icons\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">link</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">rel</span>=<span class="hljs-string">\'stylesheet\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">href</span>=<span class="hljs-string">\'https://unpkg.com/react-quill@1.3.3/dist/quill.snow.css\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">src</span>=<span class="hljs-string">\'https://unpkg.com/react@16/umd/react.development.js\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // @<span class="hljs-attr">ts-ignore</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">crossorigin</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">defer</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">src</span>=<span class="hljs-string">\'https://unpkg.com/react-dom@16/umd/react-dom.development.js\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // @<span class="hljs-attr">ts-ignore</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">crossorigin</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">defer</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">defer</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">src</span>=<span class="hljs-string">\'https://unpkg.com/react-quill@1.3.3/dist/react-quill.js\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">defer</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-attr">src</span>=<span class="hljs-string">\'https://unpkg.com/babel-standalone@6/babel.min.js\'</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">\'text/babel\'</span> <span class="hljs-attr">src</span>=<span class="hljs-string">\'/my-scripts.js\'</span>&gt;&lt;/<span class="hljs-name">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Head</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">Main</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;<span class="hljs-name">NextScript</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class="hljs-tag">&lt;/<span class="hljs-name">Html</span>&gt;</span>\n&nbsp; &nbsp; );\n&nbsp; }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">MyDocument</span>;\n</pre><p><br></p><p><br></p><p><br></p><h3><span class="ql-size-large">- NextJS에서 import 전략 변경</span></h3><p>서버사이드렌더링하는 과정에서 전체 NPM 외부 모듈 및 라이브러리를 import 시키는 방법은 지양해야한다.</p><p>서버에서 HTML을 렌더링하기 때문에 하나의 외부 모듈에 2000개 이상을 파일을 시시각각 렌더링한때마다 불러오기 때문에 서버에 과부하를 줄 수 있음.</p><p>NextJS로 기술 블로그를 만들면서 배포 후 로딩시간이 10초 이상 길어지는 현상이 있었는데, 이러한 import 방식이 문제였던 것임.</p><p>아래의 코드는 문제가 있는 코드임.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">AccessAlarm</span>, <span class="hljs-title class_">ThreeDRotation</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">\'@mui/icons-material\'</span>;\n</pre><p><br></p><p>위와 같이 코드를 쓴다면 서버 측에서 사전 HTML 파일을 렌더링할 때 @mui/icons-material 안에 있는 2000개 이상의 아이콘을 import 할때마다 불러와야했기에 로딩 시간이 10초이상 길어졌던 것임.</p><p>그래서 위의 import 전략을 버리고 아래와 같이 수정을 하니, 로딩 시간이 길어졌던 문제가 해결이 되었음.</p><p><br></p><pre class="ql-syntax" spellcheck="false"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">\'@mui/material/Button\'</span>;\n</pre><p><br></p><p>위와 같이 전체 모듈을 import 시키는 것이 아니라 부분적으로 필요한 아이콘만 불러오게 함으로써 로딩 시간 1초로 단축을 시켰음.</p><p>다시 한번 말하지만, NextJS는 서버에서 HTML 파일을 pre-rendering 하는 프레임워크임.</p><p>React에서는 아무런 문제 없이 작동한 코드지만 위의 코드처럼 문제가 될 수 있는 코드가 몇몇 있어 기록을 해둔다.</p>',
    catName: 'HTML / Git',
    author: 'lse126',
    createdAt: '2023-02-03T01:52:02.509Z',
    updatedAt: '2023-02-03T02:35:49.923Z',
    __v: 0,
  },
];
