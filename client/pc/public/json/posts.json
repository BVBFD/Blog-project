{
  "posts": [
    {
      "_id": "6567ff00bbe61dba09130c89",
      "imgUrl": "https://res.cloudinary.com/dewa3t2gi/image/upload/v1701312596/myportfolioblogproject/i0k6agfv2xqlqzzgmxts.gif",
      "title": "웹 풀사이클 데브코스 회고 - 웹 개요와 깃 협업 - 11월",
      "text": "<p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701312747/myportfolioblogproject/hqc4fwlj2dqg8abwcxlf.gif\" crossorigin=\"anonymous\"></p><p><br></p><p><br></p><p><br></p><p><strong>&lt;웹 개요&gt;</strong></p><p><br></p><p>11월 <strong><u>프로그래머스 데브코스 타입스크립트와 함께하는 웹 풀사이클 과정</u></strong>을 시작하고, <strong>HTML, CSS, JavaScript, MariaDB, NodeJS</strong> 등등...</p><p>전반적인 웹 생태계 개요와 간단하지만 NodeJS를 활용하여 웹 서버를 구현하고, <strong>HTML, CSS, JavaScript, MariaDB, NodeJS</strong>로 간단한 풀스택 프로젝트를 진행을 하였다.</p><p><br></p><p>보통 HTML, CSS, JavaScript를 활용해서 간단한 웹 페이지를 만들때, Live Server 익스텐션을 활용해서 구현을 했었는데,</p><p>이번 과정에서 NodeJS로 간단한 웹 서버를 내가 직접 구현해보았던 경험은 처음이었다.</p><p><br></p><p>간단한 개요를 소개하면서, <strong>간단하지만 결코 간단하게만 할 수 없는 단순한 프로젝트</strong>를 HTML, CSS, JavaScript, NodeJS, MariaDB로 구현을 해보면서,</p><p>앞으로의 과정이 더욱 기대가 되고, 많은 성장을 이룰 수 있을 것 같다는 확신이 들었다.</p><p><br></p><p><br></p><p><br></p><p><strong>&lt;깃과 깃허브&gt;</strong></p><p><br></p><p><strong>부트캠프를 하는 가장 큰 목적</strong>은 당연히 타 개발자들과의 <strong>협업</strong>이다.</p><p>물론 배우는 것도 중요하지만, 그 배운 것을 활용하여 타 개발자들과 어떻게 소통하고 갈등을 중재하면서 일을 진행해 나가는 과정 또한 중요한 배움의 과정이라고 생각한다.</p><p>이 부분을 확실하게 가장 처음부터 배우고 넘어가는 것이 마음에 들었다.</p><p><strong>( 웹 개요 강의를 시작하기 앞서 협업의 필수적인 툴인 깃과 깃허브를 먼저 배운다!!! )</strong></p><p><br></p><p>팀원들끼리 소소한 프로젝트를 진행하면서, 배운 깃과 깃허브를 통해서 터미널 커맨드 라인을 통해서,</p><p>작은 프로젝트를 완성해나가는 것을 처음이었지만, 좋은 경험이었던 것 같다.</p><p>앞으로도 NodeJS, ReactJS를 통해서 깃과 깃허브를 많이 활용할텐데, 가장 처음부터 확실히 교육을 받고 들어가서,</p><p>앞으로도 잘 활용할 수 있을 것 같은 확신이 많이 들었다.</p><p><br></p><p><br></p><p><br></p><p><strong>&lt;프로그래머스 부트 캠프 과정&gt;</strong></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701314272/myportfolioblogproject/zebyl5iftuozk1hha7xq.gif\" crossorigin=\"anonymous\"></p><p><br></p><p>프로그래머스 부트 캠프 과정을 11월 시작하면서 느낀 것이지만, <strong>확실히 타 부트캠프에 비해서 수강생들에게 많은 심리적 부담을 주지 않으려고 노력을 하는 것 같다.</strong></p><p>그렇다고 해서 배우는 내용, 수행하는 과제가 부실한 것은 절대 아니다!!! </p><p><strong><u>오히려 배우고 넘어가는 것은 확실하게 배우고 넘어가고, 과제 자체도 너무 어렵지는 않지만 그렇다고 해서 마냥 쉽다고도 볼 수는 없다!!!</u></strong></p><p><br></p><p>타 부트캠프는 수강생들끼리 성적을 확실히 매기고 줄을 세워가면서, <strong>협업</strong>이 아닌 경쟁으로 치닫기 쉬운 구조를 가지고 있는데,</p><p><strong><u>프로그래머스 부트 캠프 과정</u></strong>은 그러한 경쟁보다는 <strong><u>협업을 더 중요시하는 것 같다는 느낌</u></strong>을 받았다.</p><p>다만 과제 수행 기간을 조그만 더 늘려주셨으면 하는 마음은 있지만, <strong>열심히 노력하고 타 개발자들과 협업을 통해서 극복</strong>할 수 있었던 것 같다. </p><p>그러기에 <strong><u>경쟁에서 오는 부담감을 주지 않으려고 노력하는 교육 운영 담당자 분들과 강의하시는 분들에게 감사한 마음</u></strong>이 너무 들었다.</p><p><br></p><p><br></p><p><br></p><p><strong>&lt;앞으로 더 기대되는 과정&gt;</strong></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701314293/myportfolioblogproject/j4yalwk4r5uhypfiugsz.gif\"></p><p><br></p><p>첫 한달 마무리 하고 회고록을 쓰고 있다.</p><p>첫 한달 정말 마음에 들었다.. 경쟁보다는 <strong>진정한 교감과 협업</strong>을 통해서 <strong>타 개발자들과 의사소통</strong>한다는 것이 <strong>흔한 경험은 절대 아니다. </strong></p><p>( 특히 전반적인 <strong>사회 자체가 각박</strong>하고, <strong>사내 협업이 아닌 경쟁으로 치닫기 쉬운 한국 사회</strong>에서는... <strong>더욱 더..... 경험하기 힘든....</strong>) </p><p><br></p><p>앞으로도 상호 간의 갈등, 경쟁이 아니라, </p><p>서로 도와주고 <strong>협업을 강조</strong>하게끔 그렇게 프로그래머스 데브코스가 수강생들 이끌어 주셨으면 하는 마음이다..</p><p><strong><u>앞으로가 더욱 더 기대되는 과정이다!!!!</u></strong></p>",
      "catName": "Life",
      "author": "lse126",
      "createdAt": "2023-11-30T03:18:24.713Z",
      "updatedAt": "2023-11-30T03:18:24.713Z",
      "__v": 0
    },
    {
      "_id": "6563b952bbe61dba09130a0e",
      "imgUrl": "https://res.cloudinary.com/dewa3t2gi/image/upload/v1701305534/myportfolioblogproject/eakhruv9qtmfcokjvja7.gif",
      "title": "프로그래머스 데브코스 - Web, Web Server, WAS, DB - 발표 2주 차",
      "text": "<p><strong><u>웹 서버( Web Server )</u></strong>는&nbsp;<strong>정적 페이지에 대해 대</strong>응합니다.</p><p>동적 페이지에 대한 처리는 직접 처리하지 않고,&nbsp;<strong>웹 어플리케이션 서버에게 전달</strong>합니다.</p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701307695/myportfolioblogproject/azu60kxfcxq2rqwqendh.gif\"></p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701033071/myportfolioblogproject/qba57lcjbptvb1mfpjem.gif\"></p><p><br></p><p><br></p><p><strong>cf)</strong></p><p>1.&nbsp;<strong><u>정적 페이지</u></strong>&nbsp;: 화면의&nbsp;<strong>내용/데이터</strong>&nbsp;등의&nbsp;<strong>변동이 없는 페이지</strong>를 말합니다.</p><p>2.&nbsp;<strong><u>동적 페이지</u></strong>&nbsp;:&nbsp;<strong>데이터 처리/연산</strong>을 통해 화면의&nbsp;<strong>내용, 데이터가 변하는 페이지</strong>를 말합니다.</p><p><br></p><p><strong><u>웹 어플리케이션 서버 (Web Application Server)</u></strong>는&nbsp;<strong>동적 페이지를 처리</strong>합니다.</p><p>필요한 데이터 연산을 위해 데이터베이스와 연결되어 있으며,&nbsp;<strong>데이터 조회/수정/삭제에 대한 처리를 요청</strong>합니다.</p><p><br></p><p><strong>cf)</strong></p><p>*&nbsp;<strong><u>데이터베이스</u></strong>&nbsp;: 데이터를 통합하여,&nbsp;<strong>효율적으로 관리하기 위한 데이터 집합체</strong>를 말합니다.</p><p><br></p><p><br></p><p><br></p><h1><strong>DBMS</strong></h1><p><br></p><p>우리는 데이터베이스를 운영하고 관리하기 위한 DBMS(DabaBase Management System)를 통해 데이터베이스를 사용합니다.</p><p>운영회사는 다르지만, 데이터베이스에 연산을 요청하기 위해 사용되는 주요 명령어는 동일합니다.</p><p><br></p><p><br></p><p><br></p><h1><strong>SQL ( Structured Query Language ) - 관계형 데이터베이스 ( Relational Database Management System )</strong></h1><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701034587/myportfolioblogproject/tsu8eupc7i0u2pkvs7yu.gif\"></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701035593/myportfolioblogproject/jvvmxsw8ngggh8gkilld.gif\"></p><p><br></p><p><br></p><p>데이터베이스, 테이블 안에 데이터를 열과 행으로 정리해서 저장하는 방식.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701034866/myportfolioblogproject/gn0cfgod9shsajfysdeu.gif\"></p><p><br></p><p>데이터베이스 테이블 안에 정해진 데이터 스키마 ( 쉽게 말해서 데이터 Row 형식 )에 따라 저장된다.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701034896/myportfolioblogproject/iou59dlxrmvio5kk7uvx.gif\"></p><p><br></p><p><br></p><p>각각의 데이터들이 이미 정해진 규직에 따라 엄격하게 정리되어 있음.</p><p>만약에 개발을 하다가 변경이 필요하면, 데이터 규칙(스키마)를 바꿔야함.</p><p>데이터베이스를 쉽게 수정하고 확장할 수 없음.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701037057/myportfolioblogproject/ftjfoiatwk2rtevfpsbs.gif\"></p><p><br></p><p><br></p><p><br></p><h1><strong>NoSQL ( Not Only Structured Query Language ) - 비관계형 데이터베이스 </strong></h1><p><br></p><p>다양한 데이터 스키마 모델을 정의할 수 있다. ( 주로 키-값, 문서, 열 지향, 그래프 등등의 다양한 모델 )</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701042476/myportfolioblogproject/exam2hrasvhlkpiyj0ew.gif\"></p><p><br></p><p>데이터 구조를 나중에 결정할 수 있음. 데이터베이스를 쉽게 수정하고 확장할 수 있다.</p><p><br></p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701035177/myportfolioblogproject/oavvjpthrfffylvbn4d2.gif\"></p><p><br></p><p><br></p><p>즉, 단순히 말해서 Not Only DBMS 스키마도 없고, 관계도 없는 데이터베이스 시스템이다.</p><p>이 말은 같은 Collection에 스키마 구조가 다른 데이트가 들어갈 수 있다는 말임.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701036496/myportfolioblogproject/bumnjgtr0qgxsusfrwor.gif\"></p><p><br></p><p><br></p><p>강력한 테이블 colums 속성 규칙을 가지고, 관계성을 지향하는 SQL에서는 절대 절대 불가능한 일이다.</p><p>그래서 NoSQL 같은 DBMS (데이터베이스 관리 시스템) 은 스키마를 미리 정의하지 않고도 데이터베이스를 동작시킬 수 있다.</p><p><br></p><p>NoSQL에서는 레코드를 문서(documents)라고 부른다.</p><p>보통은 json 형태를 많이 가지고 있다.</p><p>(SQL은 테이블에 하나의 행으로서 저장이 되기에 rows 라고 많이 불리워진다.)</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701036950/myportfolioblogproject/wmrzrg6efifbfghnltld.gif\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><h1><strong>NoSQL DBMS </strong></h1><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701037182/myportfolioblogproject/yuxgxzkyinaospp2x9ca.gif\"></p><p><br></p><p><br></p><p><br></p><p><br></p><p><br></p><h1><strong>SQL DBMS </strong></h1><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701037213/myportfolioblogproject/mu63zm3hfsl4hnhczh2e.gif\"></p>",
      "catName": "Book / Learn",
      "author": "lse126",
      "createdAt": "2023-11-26T21:32:02.193Z",
      "updatedAt": "2023-11-30T01:30:14.445Z",
      "__v": 0
    },
    {
      "_id": "655ffe4fbbe61dba09130799",
      "imgUrl": "https://res.cloudinary.com/dewa3t2gi/image/upload/v1700788077/myportfolioblogproject/eltg4axgou9inkdwyy9k.gif",
      "title": "면접 - 백엔드 (MariaDB, Docker) - TIL (프로그래머스 데브 코스)",
      "text": "<h1><strong>1. DB ( 데이터베이스 ) 란?</strong></h1><p><br></p><p>데이터를 통합하여 효율적으로 관리하기 위한 데이터 집합체를 데이터베이스(Database; DB) 라고 합니다.</p><p>데이터를 구조화하여 관리함으로써 데이터 중복을 막고, 효율적이고 빠른 데이터 연산을 가능하게 합니다.</p><p><br></p><p><br></p><p><br></p><h1><strong>2. DBMS </strong></h1><p><br></p><p>우리는 데이터베이스를 운영하고 관리하기 위한 DBMS(DabaBase Management System)를 통해 데이터베이스를 사용합니다.</p><p>운영회사는 다르지만, 데이터베이스에 연산을 요청하기 위해 사용되는 주요 명령어는 동일합니다.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700789114/myportfolioblogproject/cyn2eovjygq3ztqistku.gif\"></p><p><br></p><p><br></p><p><br></p><h1><strong>3. SQL ( Structured Query Language ) </strong></h1><p><br></p><p>SQL은 데이터베이스에 연산을 요청하기 위해 사용되는 언어로 데이터를 생성, 조회, 수정, 삭제 등과 같은 기능을 수행할 수 있습니다.</p><p>대표적인 <strong>SQL 명령어</strong> <em><u>데이터 삽입</u></em> <strong>'INSERT'</strong>, <em><u>데이터 조회</u></em> <strong>'SELECT'</strong>, <em><u>데이터 수정</u></em> <strong>'UPDATE'</strong>, <em><u>데이터 삭제</u></em> <strong>'DELETE'</strong>.</p><p><br></p><p><br></p><p><br></p><h1><strong>4. Docker Desktop 설치하기</strong></h1><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700795958/myportfolioblogproject/enjenmjqt0abfr0i8zpt.gif\"></p><p><br></p><p><br></p><p>Docker desktop 설치하기.</p><p>docker desktop 설치하다가 아래의 에러를 만나서 고생을 한 적이 있다.</p><p>아래 사진 참고해서 해결할 것!!</p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700796190/myportfolioblogproject/rmm21qk4uxcwzokg5cj4.gif\"></p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700796202/myportfolioblogproject/w7esx9iy9truladcylxp.gif\"></p><p><br></p><p><br></p><p>각 CPU 제조사 CPU BIOS 페이지로 들어가서 해당 항목을 Enabled 시켜줘야 정상 작동을 한다.</p><p>각 CPU 제조사 마다 BIOS 페이지도 다르고, 해당 항목도 다를 수 있으니 이 부분 찾아서 해결을 해야한다.</p><p><br></p><p><br></p><p><br></p><h1><strong>5. Docker Desktop으로 MariaDB 설치하기</strong></h1><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">docker pull mariadb\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700796747/myportfolioblogproject/nkk7fbultkpxeqdub5jv.gif\"></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">docker run <span class=\"hljs-attr\">--name</span> mariadb -d -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> --restart=always -e MYSQL_ROOT_PASSWORD=root mariadb\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700797988/myportfolioblogproject/d6sjsgvj0qqbuuefr04c.gif\"></p><p><br></p><p><br></p><p><br></p><h1><strong>6. Docker로 MariaDB가 있는 컨테이너 접속</strong></h1><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">docker exec -it mariadb /bin/bash\n</pre><p><br></p><p><br></p><h1><strong>7. MariaDB 실행</strong></h1><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">mariadb -u root -p\n</pre><p><br></p><p>그리고 비밀번호 <strong><u>password</u></strong>는 <strong><u>root</u></strong>를 쳐야 최초 접속이 된다.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700798549/myportfolioblogproject/eudrtb77nomhmtiglgwm.gif\"></p><p><br></p><p><br></p><p><br></p><h1><strong>8. MariaDB : CREATE, SELECT, INSERT, UPDATE, DELETE 실습기</strong></h1><p><br></p><h2><strong><u>1. CREATE</u></strong></h2><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">SHOW DATABASES;\nUSE Tennis;\nSHOW TABLES;\n\nCREATE TABLE member \n(\n  id VARCHAR(<span class=\"hljs-number\">30</span>),\n  name VARCHAR(<span class=\"hljs-number\">30</span>),\n  pwd VARCHAR(<span class=\"hljs-number\">30</span>)\n)\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700801461/myportfolioblogproject/efiue2yophhyljlsfy47.gif\"></p><p><br></p><p><br></p><p><br></p><h2><strong><u>2. SELECT</u>, <u>INSERT</u></strong></h2><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\">SELECT id, name, pwd FROM member;\nSELECT * FROM member;\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700812572/myportfolioblogproject/kzof5jxxhms84tbh6ygv.gif\"></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-variable constant_\">INSERT</span> <span class=\"hljs-variable constant_\">INTO</span> member <span class=\"hljs-variable constant_\">VALUES</span> (<span class=\"hljs-string\">'tennisking'</span>, <span class=\"hljs-string\">'park songa'</span>, <span class=\"hljs-string\">'bbbbb'</span>);\n<span class=\"hljs-variable constant_\">INSERT</span> <span class=\"hljs-variable constant_\">INTO</span> member <span class=\"hljs-variable constant_\">VALUES</span> (<span class=\"hljs-string\">'programmer'</span>, <span class=\"hljs-string\">'song songa'</span>, <span class=\"hljs-string\">'ccccc'</span>);\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700812699/myportfolioblogproject/c6hsxknmw1ifluxzkaap.gif\"></p><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-variable constant_\">SELECT</span> * <span class=\"hljs-variable constant_\">FROM</span> member <span class=\"hljs-variable constant_\">WHERE</span> id = <span class=\"hljs-string\">'tennisking'</span>;\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700812850/myportfolioblogproject/atmrmgone0vr9ccpaqpm.gif\"></p><p><br></p><p><br></p><p><br></p><h2><strong><u>3. UPDATE</u>, <u>DELETE</u></strong></h2><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-variable constant_\">UPDATE</span> member <span class=\"hljs-variable constant_\">SET</span> pwd = <span class=\"hljs-string\">'zzzzz'</span> <span class=\"hljs-variable constant_\">WHERE</span> id = <span class=\"hljs-string\">'tennisking'</span>;\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700813548/myportfolioblogproject/ohxmnriv6fx05njr9n0a.gif\"></p><p><br></p><h2><strong style=\"color: rgb(230, 0, 0); background-color: rgb(255, 255, 0);\"><u>!주의사항! =&gt; WHERE 꼭 써줘야함!!! 실수로 안쓰면 비번 다 바뀜!!!</u></strong></h2><p><br></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-variable constant_\">DELETE</span> <span class=\"hljs-variable constant_\">FROM</span> member <span class=\"hljs-variable constant_\">WHERE</span> name = <span class=\"hljs-string\">'park songa'</span>;\n</pre><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700814175/myportfolioblogproject/o3phdhnkzglg9ii5jknu.gif\"></p><p><br></p><p><br></p><p><br></p><p><strong>* <u>server.js</u></strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"http\"</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"url\"</span>);\n<span class=\"hljs-keyword\">const</span> querystring = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"querystring\"</span>);\n\n<span class=\"hljs-comment\">// main html 불러오기, ( 하단 createServer 코드 참고 )</span>\n<span class=\"hljs-keyword\">const</span> main_view = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">\"./main.html\"</span>, <span class=\"hljs-string\">\"utf-8\"</span>);\n<span class=\"hljs-keyword\">const</span> orderlist_view = fs.<span class=\"hljs-title function_\">readFileSync</span>(<span class=\"hljs-string\">\"./orderlist.html\"</span>, <span class=\"hljs-string\">\"utf-8\"</span>);\n\n<span class=\"hljs-comment\">// mariadb를 mysql 모듈 불러와서 일단 설정완료!!!</span>\n<span class=\"hljs-keyword\">const</span> mysql_module = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"mysql\"</span>);\n<span class=\"hljs-keyword\">const</span> mariadb = mysql_module.<span class=\"hljs-title function_\">createConnection</span>({\n&nbsp; <span class=\"hljs-comment\">// mariadb가 있는 컴퓨터 주소</span>\n&nbsp; <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">\"localhost\"</span>,\n&nbsp; <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">3306</span>,\n&nbsp; <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">\"root\"</span>,\n&nbsp; <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">\"root\"</span>,\n&nbsp; <span class=\"hljs-attr\">database</span>: <span class=\"hljs-string\">\"Tennis\"</span>,\n});\n\n<span class=\"hljs-comment\">// mariadb 연결</span>\nmariadb.<span class=\"hljs-title function_\">connect</span>();\n\n<span class=\"hljs-comment\">// Request는 req, Response는 res 매개변수로 설정.</span>\n<span class=\"hljs-keyword\">const</span> server = http.<span class=\"hljs-title function_\">createServer</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n&nbsp; <span class=\"hljs-comment\">// url 모듈에서 굳이 parse를 쓰는 이유는 URL 구성 요소로 나누어서 쉽게 작업하기 위함임.</span>\n&nbsp; <span class=\"hljs-comment\">// 만약에 parse를 쓰지 않는다면 아래 주석같이 써야함.</span>\n&nbsp; <span class=\"hljs-comment\">// &nbsp; const { url } = req;</span>\n&nbsp; <span class=\"hljs-comment\">// &nbsp; const queryParams = querystring.parse(url.split(\"?\")[1]);</span>\n&nbsp; <span class=\"hljs-keyword\">const</span> parsedUrl = url.<span class=\"hljs-title function_\">parse</span>(req.<span class=\"hljs-property\">url</span>);\n\n&nbsp; <span class=\"hljs-comment\">// &nbsp; queryParams 말그대로 URL에서 ? 시작하는 query params 값을 얻기 위함임.</span>\n&nbsp; <span class=\"hljs-keyword\">const</span> queryParams = querystring.<span class=\"hljs-title function_\">parse</span>(parsedUrl.<span class=\"hljs-property\">query</span>);\n\n&nbsp; <span class=\"hljs-comment\">// &nbsp; main page</span>\n&nbsp; <span class=\"hljs-keyword\">if</span> (parsedUrl.<span class=\"hljs-property\">pathname</span> === <span class=\"hljs-string\">\"/\"</span>) {\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/html\"</span>,\n&nbsp; &nbsp; });\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">write</span>(main_view);\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">end</span>();\n&nbsp; &nbsp; <span class=\"hljs-comment\">// &nbsp; main page</span>\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// order page</span>\n&nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (parsedUrl.<span class=\"hljs-property\">pathname</span> === <span class=\"hljs-string\">\"/order\"</span>) {\n&nbsp; &nbsp; <span class=\"hljs-comment\">// Order 버튼 눌렀을때 query 값 받아오기</span>\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> productId = queryParams.<span class=\"hljs-property\">productId</span>;\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> productName = queryParams.<span class=\"hljs-property\">productName</span>;\n\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// query 값 안에 있는 productId와 더불어 현재 날짜와 같이 query 보내기</span>\n&nbsp; &nbsp; mariadb.<span class=\"hljs-title function_\">query</span>(\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">`INSERT INTO orderlist VALUES ('<span class=\"hljs-subst\">${productId}</span>', '<span class=\"hljs-subst\">${productName}</span>', '<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toLocaleDateString()}</span>');`</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-function\">(<span class=\"hljs-params\">err, rows</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rows);\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; );\n\n\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/html\"</span>,\n&nbsp; &nbsp; });\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"order page\"</span>);\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">end</span>();\n&nbsp; &nbsp; <span class=\"hljs-comment\">// order page</span>\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// orderlist page</span>\n&nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (parsedUrl.<span class=\"hljs-property\">pathname</span> === <span class=\"hljs-string\">\"/orderlist\"</span>) {\n&nbsp; &nbsp; mariadb.<span class=\"hljs-title function_\">query</span>(<span class=\"hljs-string\">`SELECT * FROM orderlist;`</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, rows</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(err);\n&nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/html\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">write</span>(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; orderlist_view.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-string\">\"{ ROWS_DATA }\"</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(rows))\n&nbsp; &nbsp; &nbsp; &nbsp; );\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">end</span>();\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; });\n&nbsp; &nbsp; <span class=\"hljs-comment\">// orderlist page</span>\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// img url 주소</span>\n&nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (parsedUrl.<span class=\"hljs-property\">pathname</span>.<span class=\"hljs-title function_\">startsWith</span>(<span class=\"hljs-string\">\"/img/\"</span>)) {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> imagePath = <span class=\"hljs-string\">`.<span class=\"hljs-subst\">${parsedUrl.pathname}</span>`</span>;\n\n&nbsp; &nbsp; fs.<span class=\"hljs-title function_\">readFile</span>(imagePath, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 이미지 못찾을시 not fouond 404 에러</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (err) {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">404</span>, {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/html\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"Not Found!!! 404!!!\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">end</span>();\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// 이미지 못찾을시 not fouond 404 에러</span>\n\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// img url 주소 찾을 시</span>\n&nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// image type 으로 바꿨습니다.</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"image/png\"</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">write</span>(data);\n&nbsp; &nbsp; &nbsp; &nbsp; res.<span class=\"hljs-title function_\">end</span>();\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// img url 주소 찾을 시</span>\n&nbsp; &nbsp; });\n&nbsp; &nbsp; <span class=\"hljs-comment\">// img url 주소</span>\n\n&nbsp; &nbsp; <span class=\"hljs-comment\">// 없는 url 주소 입력시</span>\n&nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">404</span>, {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/html\"</span>,\n&nbsp; &nbsp; });\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">\"Not Found!!! 404!!!\"</span>);\n&nbsp; &nbsp; res.<span class=\"hljs-title function_\">end</span>();\n&nbsp; }\n&nbsp; <span class=\"hljs-comment\">// 없는 url 주소 입력시</span>\n});\n\n<span class=\"hljs-comment\">// process.env.PORT 이 부분은 최상단에 .env 파일 생성 뒤</span>\n<span class=\"hljs-comment\">// PORT=8888 이렇게 작성하시면 됩니다.</span>\n\n<span class=\"hljs-comment\">// 이렇게 굳이 작성하는 이유는 서버 애플리케이션 서버가 실행될 환경에 따라 포트 번호를 동적으로 설정하기 위함입니다.</span>\n<span class=\"hljs-comment\">// 만약에 AWS와 같은 클라우드 서비스를 쓴다면, 포트번호를 서버 배포자가 지정할 수 있는데, AWS 해당 클라우드 서비스에서</span>\n<span class=\"hljs-comment\">// 서버자가 포트값을 8080 값으로 지정했다면 그 클라우드 플랫폼 서비스의 .env(환경변수 파일)에는 8080이 지정되어,</span>\n<span class=\"hljs-comment\">// 그 클라우드 서비스에서는 8080 포트번호에서 서버가 실행될 것입니다.</span>\n<span class=\"hljs-comment\">// 만약 따로 지정된 PORT 번호가 없다면 8888을 쓰게 되는 것 입니다.</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">PORT</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">PORT</span> || <span class=\"hljs-number\">8888</span>;\n\nserver.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Server running on Port <span class=\"hljs-subst\">${PORT}</span>`</span>));\n</pre><p><br></p><p><br></p><p><strong>* <u>orderlist.html</u></strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Order-List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; h1,\n&nbsp; &nbsp; &nbsp; a {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">text-align</span>: center;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; table {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">border</span>: none;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; td,\n&nbsp; &nbsp; &nbsp; th {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">6px</span>;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; td {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">text-align</span>: center;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; div {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">text-align</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">50px</span>;\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Order-List<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"./\"</span>&gt;</span>Go Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"table\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border: 1px solid black\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">&lt;!-- 열의 제목 --&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Product_ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Product_Name<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Order_Data<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> rowsData = { <span class=\"hljs-variable constant_\">ROWS_DATA</span> };\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> table = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">\".table\"</span>);\n\n&nbsp; &nbsp; &nbsp; rowsData.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">row</span>) =&gt;</span> {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> list_tr = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"tr\"</span>);\n&nbsp; &nbsp; &nbsp; &nbsp; list_tr.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">`\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tr&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;<span class=\"hljs-subst\">${row.product_id}</span>&lt;/td&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;<span class=\"hljs-subst\">${row.product_name}</span>&lt;/td&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;<span class=\"hljs-subst\">${row.order_date}</span>&lt;/td&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/tr&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; `</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; table.<span class=\"hljs-title function_\">appendChild</span>(list_tr);\n&nbsp; &nbsp; &nbsp; });\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</pre><p><br></p><p><br></p><p><strong>* <u>main.html</u></strong></p><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Main<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; h1 {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">text-align</span>: center;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; #txt_welcome {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">text-align</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">50px</span>;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; main {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">display</span>: flex;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; .card {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">display</span>: flex;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">flex-direction</span>: column;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">align-items</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">text-align</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">33%</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">50%</span>;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; .card_img {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">object-fit</span>: contain;\n&nbsp; &nbsp; &nbsp; }\n\n\n&nbsp; &nbsp; &nbsp; .card_title {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">font-weight</span>: bolder;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; .card_button {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">25px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">30px</span>;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; .card_button {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">150px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">35px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">display</span>: flex;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">justify-content</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">align-items</span>: center;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">background</span>: transparent;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">border</span>: none;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">4px</span> darkgray;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">16px</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">cursor</span>: pointer;\n&nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; .card_button:hover {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">color</span>: white;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">background-color</span>: black;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">0px</span> <span class=\"hljs-number\">4px</span> black;\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Tennis Market<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"txt_welcome\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; Welcome to Tennis Market! <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; Enjoy your shopping.\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"./orderlist\"</span>&gt;</span> Order list <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_img\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/img/tennis-racket-red.png\"</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_title\"</span>&gt;</span>Red Racket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_button\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Order\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"location.href='/order?productId=1&amp;productName=Red_Racket'\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_img\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/img/tennis-racket-blue.png\"</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_title\"</span>&gt;</span>Blue Racket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_button\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Order\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"location.href='/order?productId=2&amp;productName=Blue_Racket'\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_img\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/img/tennis-racket-pink.png\"</span> /&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_title\"</span>&gt;</span>Pink Racket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card_button\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"button\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Order\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"location.href='/order?productId=3&amp;productName=Pink_Racket'\"</span>\n&nbsp; &nbsp; &nbsp; &nbsp; /&gt;</span>\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&nbsp; &nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n&nbsp; <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</pre><p><br></p>",
      "catName": "Book / Learn",
      "author": "lse126",
      "createdAt": "2023-11-24T01:37:19.259Z",
      "updatedAt": "2023-11-30T01:49:13.637Z",
      "__v": 0
    },
    {
      "_id": "655eb0bbbbe61dba091304e0",
      "imgUrl": "https://res.cloudinary.com/dewa3t2gi/image/upload/v1700704431/myportfolioblogproject/xizrieickkin3levtftd.gif",
      "title": "면접 - 백엔드 개요 (NodeJS) - TIL (프로그래머스 데브 코스)",
      "text": "<p><strong><u>웹 서버( Web Server )</u></strong>는 <strong>정적 페이지에 대해 대</strong>응합니다.</p><p>동적 페이지에 대한 처리는 직접 처리하지 않고, <strong>웹 어플리케이션 서버에게 전달</strong>합니다.</p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701307614/myportfolioblogproject/sjrmif2inyomk7xonu37.gif\"></p><p><br></p><p><br></p><p><strong>cf) </strong></p><p>1. <strong><u>정적 페이지</u></strong> : 화면의 <strong>내용/데이터</strong> 등의 <strong>변동이 없는 페이지</strong>를 말합니다.</p><p>2. <strong><u>동적 페이지</u></strong> : <strong>데이터 처리/연산</strong>을 통해 화면의 <strong>내용, 데이터가 변하는 페이지</strong>를 말합니다.</p><p><br></p><p><br></p><p><strong><u>웹 어플리케이션 서버 (Web Application Server)</u></strong>는 <strong>동적 페이지를 처리</strong>합니다.</p><p>필요한 데이터 연산을 위해 데이터베이스와 연결되어 있으며, <strong>데이터 조회/수정/삭제에 대한 처리를 요청</strong>합니다.</p><p><br></p><p><strong>cf)</strong></p><p>* <strong><u>데이터베이스</u></strong> : 데이터를 통합하여, <strong>효율적으로 관리하기 위한 데이터 집합체</strong>를 말합니다.</p><p><br></p><p><br></p><p><br></p><h1><strong><u>NodeJS란?</u></strong></h1><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700706313/myportfolioblogproject/stlndkvjvomki0hyv9lz.gif\"></p><p><br></p><h2><strong><em><u>- From. </u></em></strong><a href=\"https://nodejs.org/en\" rel=\"noopener noreferrer\" target=\"_blank\"><strong><em><u>NodeJS 공식 홈페이지</u></em></strong></a></h2><p><br></p><p><br></p><p>NodeJS는 자바스크립트를 스크립트 언어 이상으로 프로그래밍 언어 역할을 할 수 있도록 지원하는 플랫폼입니다. 즉, 기존의 Browser 환경에서만 자바스크립트 인터프리터를 통해 활용되어 오던 <strong><u>JavaScript를 브라우저 외부 환경에서도 사용할 수 있게끔 한 Runtime 실행환경을 NodeJS 라고 합니다. </u></strong>Chrome v8 엔진을 기반으로 설계했으며, 라이언 라인하트 달( Ryan Lienhart Dahl )에 의해 2009년 5월 27일에 발표되었다.</p><p><br></p><p>기존의 <strong>전통적인 웹 어플리케이션 서버</strong>는 <strong>동시성 I/O 처리</strong>를 위해 <strong>다중 스레드</strong>를 이용하여 처리하였지만, 여러 스레드를 생성하여 처리를 하면, 서버 컴퓨터에 오버헤드가 걸리고 무리가 갈 수 있다.</p><p><br></p><p><a href=\"https://lsevina126.netlify.app/post/623aa127e30b40a8d7ff1f19\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>프로세스와 쓰레드 개념 정리 (lsevina126.netlify.app)</strong></a></p><p><br></p><p>그래서 스레드 기반의 동시 I/O 처리방식에서 <strong>단일 스레드를 이용</strong>하여 <strong>이벤트 기반 위에서 비동기적 방식으로 동시성 I/O 이벤트를 처리</strong>하는, <strong>JavaScript ( 단일 스레드, 스택 기반의 언어 ) 를 이용</strong>하여, <strong>NodeJS</strong>를 만듦으로서 <strong>웹 어플리케이션 서버 성능향상에 기여</strong>했다.</p><p><br></p><p><a href=\"https://lsevina126.netlify.app/post/623aa660e30b40a8d7ff1f26\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>자바스크립트 엔진 동작 환경 및 원리 정리 (lsevina126.netlify.app)</strong></a></p><p><a href=\"https://lsevina126.netlify.app/post/623dc058738dcca69b6d60b3\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>자바스크립트 엔진 동작 환경 및 원리 정리2 (lsevina126.netlify.app)</strong></a></p><p><a href=\"https://lsevina126.netlify.app/post/635935677d980050320932d6\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>면접 - JavaScript (5) - Async/Await ( 비동기 ) (lsevina126.netlify.app)</strong></a></p><p><br></p><p><br></p><p><br></p><h1><strong><u>HTTP 프로토콜 템플릿?</u></strong></h1><p><br></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// 웹 서버</span>\n<span class=\"hljs-comment\">// 클라이언트와 서버가 데이터 통신하는데 필요한 http protocol 모듈 받아옴.</span>\n<span class=\"hljs-keyword\">let</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n\n\n<span class=\"hljs-comment\">// 요청과 응답</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onRequest</span>(<span class=\"hljs-params\">request, response</span>) {\n&nbsp; response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'text/html'</span>,\n&nbsp; });\n&nbsp; response.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'Hello Node.JS'</span>);\n&nbsp; response.<span class=\"hljs-title function_\">end</span>();\n}\n\n\n<span class=\"hljs-comment\">// 서버를 만들고 서버에서 구동하는 데이터 통신 함수 넣어줌.</span>\n<span class=\"hljs-comment\">// 클라이언트으로 부터 데이터 처리 요청 올때 포트번호 8080으로 와야 처리한다.</span>\nhttp.<span class=\"hljs-title function_\">createServer</span>(onRequest).<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8080</span>);\n</pre><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1701310340/myportfolioblogproject/kslltffz2dd5hmd92vkm.gif\"></p><p><br></p><p><strong><u>Header</u></strong>에는, <strong>통신상태</strong>가 어떤지 알려준다. <strong>200(정상), 404(클라이언트 원하는 거 못 찾음), 500(서버 연결 이상함)</strong>, 이 숫자들이 <strong><u>HTTP Status Code</u></strong> 라고 부른다.</p><p>응답이 어떤 <strong><u>형태</u></strong>인지 적어준다. 예를 들어 <strong>html</strong> 이다.</p><p><br></p><p>그리고 <strong><u>Body</u></strong>에는 POST, PUT 요청과 같이 전달되는 데이터가 Body 안에 포함되어 전달되어 진다.</p><p>요청과 함께 전달되는 데이터가 없을 수 도 있음.</p><p><br></p><p><strong><u>SSL(Secure Socket Layer)</u></strong> 프로토콜은 HTTP 네트워크 통신 프로토콜에 대한 암호화 계층이 추가된 것임.</p><p>클라이언트와 서버 간에 TCP/IP 방식으로 패킷을 주고 받는 과정에서 text 형식으로 주고 받는 데이터를 제3자가 하이재킹하여 그대로 볼 수 있기 때문에, 공개키 암호화 방식과 대칭키 암호화 방식으로 암호화가 이루어지고, </p><p>통신에 대해서 제 3자가 보증해주는 인증서를 서버와 클라이언트가 각각 확인하고 신뢰할 수 있는 통신인지를 판단하는 것임.</p><p><br></p><p><a href=\"https://lsevina126.netlify.app/post/6325f1897d980050320929a7\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>면접 - 네트워크 (1) - OSI 7계층, TCP/IP (lsevina126.netlify.app)</strong></a></p><p><br></p><p><br></p><p><br></p><h1><strong><u>NodeJS 서버 파일 모듈화</u></strong></h1><p><br></p><h2><strong>* server.js</strong></h2><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// 웹 서버</span>\n<span class=\"hljs-comment\">// 클라이언트와 서버가 데이터 통신하는데 필요한 http protocol 모듈 받아옴.</span>\n<span class=\"hljs-keyword\">let</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">start</span>() {\n&nbsp; <span class=\"hljs-comment\">// 요청과 응답</span>\n&nbsp; <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onRequest</span>(<span class=\"hljs-params\">request, response</span>) {\n&nbsp; &nbsp; response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'text/html'</span>,\n&nbsp; &nbsp; });\n&nbsp; &nbsp; response.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'Hello Node.JS'</span>);\n&nbsp; &nbsp; response.<span class=\"hljs-title function_\">end</span>();\n&nbsp; }\n\n&nbsp; <span class=\"hljs-comment\">// 서버를 만들고 서버에서 구동하는 데이터 통신 함수 넣어줌.</span>\n&nbsp; <span class=\"hljs-comment\">// 클라이언트으로 부터 데이터 처리 요청 올때 포트번호 8080으로 와야 처리한다.</span>\n&nbsp; http.<span class=\"hljs-title function_\">createServer</span>(onRequest).<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8080</span>);\n}\n\n<span class=\"hljs-comment\">// 외부에서 활용가능하게끔 모듈화</span>\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">start</span> = start;\n</pre><p><br></p><p><br></p><h2><strong>* index.js</strong></h2><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">const</span> { start } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./server'</span>);\n\n<span class=\"hljs-title function_\">start</span>();\n</pre><p><br></p><p><br></p><p><br></p><h1><strong><u>Uniform Resource Locator</u> - ( Url )</strong></h1><p><br></p><p>인터넷 상에서 웹 페이지가 어디있는지 \"위치\"를 알려주는 주소입니다.</p><p>쉽게 말해서, 웹 페이지 주소라고 할 수 있습니다.</p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700709635/myportfolioblogproject/t4z5rbboqmu4nroe3iao.gif\"></p><p><br></p><p><br></p><p><img src=\"https://res.cloudinary.com/dewa3t2gi/image/upload/v1700709642/myportfolioblogproject/flv76kci2quqmtu2aqsw.gif\"></p><p><br></p><p><a href=\"https://lsevina126.netlify.app/post/623ebd5b25066ac1eb074c84\" rel=\"noopener noreferrer\" target=\"_blank\"><strong>네트워크와 CORS (Feat. Socket.IO) (lsevina126.netlify.app)</strong></a></p><p><br></p><p><br></p><p><br></p><h1><strong><u>NodeJS 서버 URL 따른 Router 설정 및 프론트 페이지 출력</u></strong></h1><p><br></p><p><strong>* index.js</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">const</span> { start } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./server'</span>);\n<span class=\"hljs-keyword\">let</span> router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./router'</span>);\n<span class=\"hljs-keyword\">let</span> requestHandler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./requestHandler'</span>);\n\n<span class=\"hljs-title function_\">start</span>(router.<span class=\"hljs-property\">route</span>, requestHandler.<span class=\"hljs-property\">handle</span>);\n</pre><p><br></p><p><br></p><p><strong>* server.js</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-comment\">// 웹 서버</span>\n<span class=\"hljs-comment\">// 클라이언트와 서버가 데이터 통신하는데 필요한 http protocol 모듈 받아옴.</span>\n<span class=\"hljs-keyword\">let</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n<span class=\"hljs-keyword\">let</span> url = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'url'</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">start</span>(<span class=\"hljs-params\">route, handle</span>) {\n&nbsp; <span class=\"hljs-comment\">// 요청과 응답</span>\n&nbsp; <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onRequest</span>(<span class=\"hljs-params\">request, response</span>) {\n&nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> pathname = url.<span class=\"hljs-title function_\">parse</span>(request.<span class=\"hljs-property\">url</span>).<span class=\"hljs-property\">pathname</span>;\n&nbsp; &nbsp; <span class=\"hljs-title function_\">route</span>(pathname, handle, response);\n&nbsp; }\n\n&nbsp; <span class=\"hljs-comment\">// 서버를 만들고 서버에서 구동하는 데이터 통신 함수 넣어줌.</span>\n&nbsp; <span class=\"hljs-comment\">// 클라이언트으로 부터 데이터 처리 요청 올때 포트번호 8080으로 와야 처리한다.</span>\n&nbsp; http.<span class=\"hljs-title function_\">createServer</span>(onRequest).<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">8888</span>);\n}\n\n<span class=\"hljs-comment\">// 외부에서 활용가능하게끔 모듈화</span>\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">start</span> = start;\n</pre><p><br></p><p><br></p><p><strong>* router.js</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">route</span>(<span class=\"hljs-params\">pathname, handle, response</span>) {\n&nbsp; <span class=\"hljs-comment\">// url 경로 확인하기</span>\n&nbsp; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`pathname : <span class=\"hljs-subst\">${pathname}</span>`</span>);\n\n&nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> handle[pathname] === <span class=\"hljs-string\">'function'</span>) {\n&nbsp; &nbsp; handle[pathname](response);\n&nbsp; } <span class=\"hljs-keyword\">else</span> {\n&nbsp; &nbsp; response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">404</span>, {\n&nbsp; &nbsp; &nbsp; <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'text/html'</span>,\n&nbsp; &nbsp; });\n&nbsp; &nbsp; response.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'Not Found!!! 404!!!'</span>);\n&nbsp; &nbsp; response.<span class=\"hljs-title function_\">end</span>();\n&nbsp; }\n}\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">route</span> = route;\n</pre><p><br></p><p><br></p><p><strong>* requestHandler.js</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\">response</span>) {\n&nbsp; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'main'</span>);\n\n&nbsp; response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'text/html'</span>,\n&nbsp; });\n&nbsp; response.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'Main page'</span>);\n&nbsp; response.<span class=\"hljs-title function_\">end</span>();\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">response</span>) {\n&nbsp; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">'login'</span>);\n\n&nbsp; response.<span class=\"hljs-title function_\">writeHead</span>(<span class=\"hljs-number\">200</span>, {\n&nbsp; &nbsp; <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'text/html'</span>,\n&nbsp; });\n&nbsp; response.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">'Login page'</span>);\n&nbsp; response.<span class=\"hljs-title function_\">end</span>();\n}\n\n<span class=\"hljs-keyword\">let</span> handle = {}; <span class=\"hljs-comment\">// key : value</span>\nhandle[<span class=\"hljs-string\">'/'</span>] = main;\nhandle[<span class=\"hljs-string\">'/login'</span>] = login;\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">handle</span> = handle;\n</pre><p><br></p><p><br></p><p><br></p><p><strong>﻿</strong></p>",
      "catName": "Back-End",
      "author": "lse126",
      "createdAt": "2023-11-23T01:54:03.198Z",
      "updatedAt": "2023-11-30T02:23:15.746Z",
      "__v": 0
    }
  ],
  "totalPostsCount": 107
}
